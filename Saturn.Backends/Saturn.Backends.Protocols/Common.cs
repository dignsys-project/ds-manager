// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Saturn.Backends.Protocols.Common {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8SEHByb3RvY29scy5jb21tb24iwwIKD1NjZW5lUGFy",
            "dENvbW1vbhIKCgJpZBgBIAEoCRI1CgRraW5kGAIgASgOMicucHJvdG9jb2xz",
            "LmNvbW1vbi5TQ0VORV9DT01QT05FTlRTX0tJTkQSPAoIcG9zaXRpb24YAyAB",
            "KAsyKi5wcm90b2NvbHMuY29tbW9uLlNjZW5lUGFydENvbW1vbi5Qb3NpdGlv",
            "bhI0CgRzaXplGAQgASgLMiYucHJvdG9jb2xzLmNvbW1vbi5TY2VuZVBhcnRD",
            "b21tb24uU2l6ZRISCgpiYWNrZ3JvdW5kGAUgASgJEg4KBnpJbmRleBgGIAEo",
            "BRIMCgRuYW1lGAcgASgJGiAKCFBvc2l0aW9uEgkKAXgYASABKAMSCQoBeRgC",
            "IAEoAxolCgRTaXplEg0KBXdpZHRoGAEgASgDEg4KBmhlaWdodBgCIAEoAyLK",
            "BAoJU2NlbmVQYXJ0EjEKBmNvbW1vbhgBIAEoCzIhLnByb3RvY29scy5jb21t",
            "b24uU2NlbmVQYXJ0Q29tbW9uEjEKBmJ1dHRvbhgCIAEoCzIhLnByb3RvY29s",
            "cy5jb21tb24uU2NlbmVQYXJ0QnV0dG9uEi8KBWltYWdlGAMgASgLMiAucHJv",
            "dG9jb2xzLmNvbW1vbi5TY2VuZVBhcnRJbWFnZRIvCgV2aWRlbxgEIAEoCzIg",
            "LnByb3RvY29scy5jb21tb24uU2NlbmVQYXJ0VmlkZW8SNQoIZG9jdW1lbnQY",
            "BSABKAsyIy5wcm90b2NvbHMuY29tbW9uLlNjZW5lUGFydERvY3VtZW50EjUK",
            "CHN1YnRpdGxlGAYgASgLMiMucHJvdG9jb2xzLmNvbW1vbi5TY2VuZVBhcnRT",
            "dWJ0aXRsZRI5Cgpjb29yZGluYXRlGAcgASgLMiUucHJvdG9jb2xzLmNvbW1v",
            "bi5TY2VuZVBhcnRDb29yZGluYXRlEjMKB3dlYXRoZXIYCCABKAsyIi5wcm90",
            "b2NvbHMuY29tbW9uLlNjZW5lUGFydFdlYXRoZXISKwoDd2ViGAkgASgLMh4u",
            "cHJvdG9jb2xzLmNvbW1vbi5TY2VuZVBhcnRXZWISLwoFY2xvY2sYCiABKAsy",
            "IC5wcm90b2NvbHMuY29tbW9uLlNjZW5lUGFydENsb2NrEjkKCnNsaWRlSW1h",
            "Z2UYCyABKAsyJS5wcm90b2NvbHMuY29tbW9uLlNjZW5lUGFydFNsaWRlSW1h",
            "Z2Ui1AEKDVNjZW5lUGFydFRleHQSDAoEdGV4dBgBIAEoCRIRCgl0ZXh0Q29s",
            "b3IYAiABKAkSEAoIdGV4dFNpemUYAyABKAUSDAoEYm9sZBgEIAEoCBIOCgZp",
            "dGFsaWMYBSABKAgSNwoMdmVydGljYWxLaW5kGAYgASgOMiEucHJvdG9jb2xz",
            "LmNvbW1vbi5URVhUX0FMSUdOX0tJTkQSOQoOaG9yaXpvbnRhbEtpbmQYByAB",
            "KA4yIS5wcm90b2NvbHMuY29tbW9uLlRFWFRfQUxJR05fS0lORCJtCg5TY2Vu",
            "ZVBhcnRJbWFnZRIsCghyZXNvdXJjZRgBIAEoCzIaLnByb3RvY29scy5jb21t",
            "b24uUmVzb3VyY2USLQoEdGV4dBgCIAEoCzIfLnByb3RvY29scy5jb21tb24u",
            "U2NlbmVQYXJ0VGV4dCJ/Cg9TY2VuZVBhcnRCdXR0b24SLQoEdGV4dBgBIAEo",
            "CzIfLnByb3RvY29scy5jb21tb24uU2NlbmVQYXJ0VGV4dBIsCghyZXNvdXJj",
            "ZRgCIAEoCzIaLnByb3RvY29scy5jb21tb24uUmVzb3VyY2USDwoHc2NlbmVJ",
            "ZBgDIAEoAyJxCg5TY2VuZVBhcnRWaWRlbxIsCghyZXNvdXJjZRgBIAEoCzIa",
            "LnByb3RvY29scy5jb21tb24uUmVzb3VyY2USEAoIcmVwZWF0ZWQYAiABKAgS",
            "DgoGcGxheWVkGAMgASgIEg8KB3NjZW5lSWQYBCABKAMiQQoRU2NlbmVQYXJ0",
            "RG9jdW1lbnQSLAoIcmVzb3VyY2UYASABKAsyGi5wcm90b2NvbHMuY29tbW9u",
            "LlJlc291cmNlIqoFChFTY2VuZVBhcnRTdWJ0aXRsZRItCgR0ZXh0GAEgASgL",
            "Mh8ucHJvdG9jb2xzLmNvbW1vbi5TY2VuZVBhcnRUZXh0Eg8KB3NlY29uZHMY",
            "AiABKAUSLAoIcmVzb3VyY2UYAyABKAsyGi5wcm90b2NvbHMuY29tbW9uLlJl",
            "c291cmNlEhAKCHJlcGVhdGVkGAQgASgIElIKDWFuaW1hdGlvbktpbmQYBSAB",
            "KA4yOy5wcm90b2NvbHMuY29tbW9uLlNjZW5lUGFydFN1YnRpdGxlLlNVQlRJ",
            "VExFX0FOSU1BVElPTl9LSU5EEjQKA3JzcxgGIAEoCzInLnByb3RvY29scy5j",
            "b21tb24uU2NlbmVQYXJ0U3VidGl0bGUuUnNzGmIKA1JzcxIPCgdhZGRyZXNz",
            "GAEgASgJEkoKDGNvbnRlbnRLaW5kcxgCIAMoDjI0LnByb3RvY29scy5jb21t",
            "b24uU2NlbmVQYXJ0U3VidGl0bGUuUlNTX0NPTlRFTlRfS0lORCK2AQoXU1VC",
            "VElUTEVfQU5JTUFUSU9OX0tJTkQSIwofU1VCVElUTEVfQU5JTUFUSU9OX0tJ",
            "TkRfREVGQVVMVBAAEikKJVNVQlRJVExFX0FOSU1BVElPTl9LSU5EX0xFRlRf",
            "VE9fUklHSFQQARIpCiVTVUJUSVRMRV9BTklNQVRJT05fS0lORF9SSUdIVF9U",
            "T19MRUZUEAISIAocU1VCVElUTEVfQU5JTUFUSU9OX0tJTkRfV1JBUBADIm4K",
            "EFJTU19DT05URU5UX0tJTkQSHAoYUlNTX0NPTlRFTlRfS0lORF9ERUZBVUxU",
            "EAASGgoWUlNTX0NPTlRFTlRfS0lORF9USVRMRRABEiAKHFJTU19DT05URU5U",
            "X0tJTkRfREVTQ1JJUFRJT04QAiLNBAoTU2NlbmVQYXJ0Q29vcmRpbmF0ZRIt",
            "CgR0ZXh0GAEgASgLMh8ucHJvdG9jb2xzLmNvbW1vbi5TY2VuZVBhcnRUZXh0",
            "EiwKCHJlc291cmNlGAIgASgLMhoucHJvdG9jb2xzLmNvbW1vbi5SZXNvdXJj",
            "ZRI3ChNjb29yZGluYXRlUnJlc291cmNlGAMgASgLMhoucHJvdG9jb2xzLmNv",
            "bW1vbi5SZXNvdXJjZRIyCg5zb3VyY2VSZXNvdXJjZRgEIAEoCzIaLnByb3Rv",
            "Y29scy5jb21tb24uUmVzb3VyY2USOgoKc291cmNlU2l6ZRgFIAEoCzImLnBy",
            "b3RvY29scy5jb21tb24uU2NlbmVQYXJ0Q29tbW9uLlNpemUSQgoOc291cmNl",
            "UG9zaXRpb24YBiABKAsyKi5wcm90b2NvbHMuY29tbW9uLlNjZW5lUGFydENv",
            "bW1vbi5Qb3NpdGlvbhI3ChNkZXN0aW5hdGlvblJlc291cmNlGAcgASgLMhou",
            "cHJvdG9jb2xzLmNvbW1vbi5SZXNvdXJjZRI/Cg9kZXN0aW5hdGlvblNpemUY",
            "CCABKAsyJi5wcm90b2NvbHMuY29tbW9uLlNjZW5lUGFydENvbW1vbi5TaXpl",
            "EkcKE2Rlc3RpbmF0aW9uUG9zaXRpb24YCSABKAsyKi5wcm90b2NvbHMuY29t",
            "bW9uLlNjZW5lUGFydENvbW1vbi5Qb3NpdGlvbhIYChBzY2VuZVBhcnRJbWFn",
            "ZUlkGAogASgJEg8KB2dyb3VwSWQYCyABKAUiQQoQU2NlbmVQYXJ0V2VhdGhl",
            "chItCgR0ZXh0GAEgASgLMh8ucHJvdG9jb2xzLmNvbW1vbi5TY2VuZVBhcnRU",
            "ZXh0IuoBCg5TY2VuZVBhcnRDbG9jaxItCgR0ZXh0GAEgASgLMh8ucHJvdG9j",
            "b2xzLmNvbW1vbi5TY2VuZVBhcnRUZXh0EiwKCHJlc291cmNlGAIgASgLMhou",
            "cHJvdG9jb2xzLmNvbW1vbi5SZXNvdXJjZRIxCghkYXRlVGV4dBgDIAEoCzIf",
            "LnByb3RvY29scy5jb21tb24uU2NlbmVQYXJ0VGV4dBISCgpkYXRlRm9ybWF0",
            "GAQgASgJEhIKCnRleHRGb3JtYXQYBSABKAkSDwoHdXNlRGF0ZRgGIAEoCBIP",
            "Cgd1c2VXZWVrGAcgASgIIhsKDFNjZW5lUGFydFdlYhILCgN1cmwYASABKAki",
            "qQEKE1NjZW5lUGFydFNsaWRlSW1hZ2USRQoLc2xpZGVJbWFnZXMYASADKAsy",
            "MC5wcm90b2NvbHMuY29tbW9uLlNjZW5lUGFydFNsaWRlSW1hZ2UuU2xpZGVJ",
            "bWFnZRpLCgpTbGlkZUltYWdlEiwKCHJlc291cmNlGAEgASgLMhoucHJvdG9j",
            "b2xzLmNvbW1vbi5SZXNvdXJjZRIPCgdzZWNvbmRzGAIgASgFIrcCCghSZXNv",
            "dXJjZRISCgpyZXNvdXJjZUlkGAEgASgDEjMKBGtpbmQYAiABKA4yJS5wcm90",
            "b2NvbHMuY29tbW9uLlNDRU5FX1JFU09VUkNFX0tJTkQSEAoIbG9jYXRpb24Y",
            "AyABKAkSEgoKZm9sZGVyTmFtZRgEIAEoCRIMCgRuYW1lGAUgASgJEgwKBGhh",
            "c2gYBiABKAkSDAoEc2l6ZRgHIAEoAxI6Cg9wcmV2aWV3UmVzb3VyY2UYCCAB",
            "KAsyIS5wcm90b2NvbHMuY29tbW9uLlByZXZpZXdSZXNvdXJjZRIiChpkZXBh",
            "cnRtZW50UmVzb3VyY2VGb2xkZXJJZBgJIAEoAxIPCgdjcmVhdGVkGAogASgD",
            "Eg8KB3VwZGF0ZWQYCyABKAMSEAoIZHVyYXRpb24YDCABKAMiPgoPUHJldmll",
            "d1Jlc291cmNlEhkKEXByZXZpZXdSZXNvdXJjZUlkGAEgASgDEhAKCGxvY2F0",
            "aW9uGAIgASgJIsEBCg5TY2VuZUJsdWVwcmludBIKCgJpZBgBIAEoAxIMCgRu",
            "YW1lGAIgASgJEjEKBmNhbnZhcxgDIAEoCzIhLnByb3RvY29scy5jb21tb24u",
            "U2NlbmVQYXJ0Q29tbW9uEioKBXBhcnRzGAQgAygLMhsucHJvdG9jb2xzLmNv",
            "bW1vbi5TY2VuZVBhcnQSNgoNZGlzcGF0Y2hTY2VuZRgFIAEoCzIfLnByb3Rv",
            "Y29scy5jb21tb24uRGlzcGF0Y2hTY2VuZSJUCg1EaXNwYXRjaFNjZW5lEg4K",
            "BmlzVXNlZBgBIAEoCBIRCglpc1RvdWNoZWQYAiABKAgSDwoHc2Vjb25kcxgD",
            "IAEoBRIPCgdzY2VuZUlkGAQgASgDItwBCglTY2VuZUJhc2USDwoHc2NlbmVJ",
            "ZBgBIAEoAxIMCgRuYW1lGAIgASgJEiwKCHJlc291cmNlGAMgASgLMhoucHJv",
            "dG9jb2xzLmNvbW1vbi5SZXNvdXJjZRIWCg5jcmVhdGVkU2Vjb25kcxgEIAEo",
            "AxINCgV3aWR0aBgFIAEoAxIOCgZoZWlnaHQYBiABKAMSHwoXZGVwYXJ0bWVu",
            "dFNjZW5lRm9sZGVySWQYByABKAMSEgoKaXNWYWxpZmllZBgIIAEoCBIWCg51",
            "cGRhdGVkU2Vjb25kcxgJIAEoAyKwAQoFU2NlbmUSKQoEYmFzZRgBIAEoCzIb",
            "LnByb3RvY29scy5jb21tb24uU2NlbmVCYXNlEj8KEnNjZW5lUmVzb3VyY2VC",
            "YXNlcxgCIAMoCzIjLnByb3RvY29scy5jb21tb24uU2NlbmVSZXNvdXJjZUJh",
            "c2USOwoQc2NlbmVDb25uZWN0aW9ucxgDIAMoCzIhLnByb3RvY29scy5jb21t",
            "b24uU2NlbmVDb25uZWN0aW9uInYKD1NjZW5lQ29ubmVjdGlvbhIZChFzY2Vu",
            "ZUNvbm5lY3Rpb25JZBgBIAEoAxIPCgdzY2VuZUlkGAIgASgDEjcKEmNvbm5l",
            "Y3RlZFNjZW5lQmFzZRgDIAEoCzIbLnByb3RvY29scy5jb21tb24uU2NlbmVC",
            "YXNlImsKEVNjZW5lUmVzb3VyY2VCYXNlEhcKD3NjZW5lUmVzb3VyY2VJZBgB",
            "IAEoAxIPCgdzY2VuZUlkGAIgASgDEiwKCHJlc291cmNlGAMgASgLMhoucHJv",
            "dG9jb2xzLmNvbW1vbi5SZXNvdXJjZSJCCg1TY2VuZVJlc291cmNlEjEKBGJh",
            "c2UYASABKAsyIy5wcm90b2NvbHMuY29tbW9uLlNjZW5lUmVzb3VyY2VCYXNl",
            "IkQKDENvbW1vblN0YXR1cxI0CgZzdGF0dXMYASABKA4yJC5wcm90b2NvbHMu",
            "Y29tbW9uLkNPTU1PTl9TVEFUVVNfS0lORCLbAQoLTW9vblZlcnNpb24SEwoL",
            "c2VydmljZU5hbWUYASABKAkSEQoJb3NWZXJzaW9uGAIgASgJEhYKDnJ1bnRp",
            "bWVWZXJzaW9uGAMgASgJEkAKDGFzc2VtVmVyc2lvbhgEIAEoCzIqLnByb3Rv",
            "Y29scy5jb21tb24uTW9vblZlcnNpb24uQXNzZW1WZXJzaW9uEhsKE2VsYXBz",
            "ZWRNaWxsaVNlY29uZHMYBSABKAMaLQoMQXNzZW1WZXJzaW9uEgwKBG5hbWUY",
            "ASABKAkSDwoHdmVyc2lvbhgCIAEoCSJ1ChJHZXRWZXJzaW9uUmVzcG9uc2US",
            "LgoGY29tbW9uGAEgASgLMh4ucHJvdG9jb2xzLmNvbW1vbi5Db21tb25TdGF0",
            "dXMSLwoIdmVyc2lvbnMYAiADKAsyHS5wcm90b2NvbHMuY29tbW9uLk1vb25W",
            "ZXJzaW9uItwBCgpNZW1iZXJCYXNlEgoKAmlkGAEgASgDEgwKBHV1aWQYAiAB",
            "KAkSDQoFZW1haWwYAyABKAkSMQoKbWVtYmVyS2luZBgEIAEoDjIdLnByb3Rv",
            "Y29scy5jb21tb24uTUVNQkVSX0tJTkQSPAoMcmVnaXN0ZXJLaW5kGAUgASgO",
            "MiYucHJvdG9jb2xzLmNvbW1vbi5NRU1CRVJfUkVHSVNURVJfS0lORBIWCg5j",
            "cmVhdGVkU2Vjb25kcxgGIAEoAxIcChRsYXN0Q29ubmVjdGVkU2Vjb25kcxgH",
            "IAEoAyKuAQoGTWVtYmVyEioKBGJhc2UYASABKAsyHC5wcm90b2NvbHMuY29t",
            "bW9uLk1lbWJlckJhc2USOQoPZGVwYXJ0bWVudEJhc2VzGAIgAygLMiAucHJv",
            "dG9jb2xzLmNvbW1vbi5EZXBhcnRtZW50QmFzZRI9CgtwZXJtaXNzaW9ucxgD",
            "IAMoDjIoLnByb3RvY29scy5jb21tb24uTUVNQkVSX1BFUk1JU1NJT05fS0lO",
            "RCJCCg5EZXBhcnRtZW50QmFzZRIKCgJpZBgBIAEoAxIMCgRuYW1lGAIgASgJ",
            "EhYKDmNyZWF0ZWRTZWNvbmRzGAMgASgDIukBCgpEZXBhcnRtZW50Ei4KBGJh",
            "c2UYASABKAsyIC5wcm90b2NvbHMuY29tbW9uLkRlcGFydG1lbnRCYXNlEjEK",
            "C21lbWJlckJhc2VzGAIgAygLMhwucHJvdG9jb2xzLmNvbW1vbi5NZW1iZXJC",
            "YXNlEjcKDmNvbm5lY3RvckJhc2VzGAMgAygLMh8ucHJvdG9jb2xzLmNvbW1v",
            "bi5Db25uZWN0b3JCYXNlEj8KEGRlcGFydG1lbnRMb3dlcnMYBCADKAsyJS5w",
            "cm90b2NvbHMuY29tbW9uLkRlcGFydG1lbnRMb3dlckJhc2UieAoTRGVwYXJ0",
            "bWVudExvd2VyQmFzZRIKCgJpZBgBIAEoAxI9ChNsb3dlckRlcGFydG1lbnRC",
            "YXNlGAIgASgLMiAucHJvdG9jb2xzLmNvbW1vbi5EZXBhcnRtZW50QmFzZRIW",
            "Cg5jcmVhdGVkU2Vjb25kcxgDIAEoAyJPChJEZXBhcnRtZW50Tm9kZUJhc2US",
            "CgoCaWQYASABKAMSDQoFb3JkZXIYAiABKAMSHgoWcGFyZW50RGVwYXJ0bWVu",
            "dE5vZGVJZBgDIAEoAyJ2Cg5EZXBhcnRtZW50Tm9kZRIyCgRiYXNlGAEgASgL",
            "MiQucHJvdG9jb2xzLmNvbW1vbi5EZXBhcnRtZW50Tm9kZUJhc2USMAoKZGVw",
            "YXJ0bWVudBgCIAEoCzIcLnByb3RvY29scy5jb21tb24uRGVwYXJ0bWVudCKK",
            "AgoNQ29ubmVjdG9yQmFzZRITCgtjb25uZWN0b3JJZBgBIAEoAxIMCgRuYW1l",
            "GAIgASgJEhAKCGRldmljZUlkGAMgASgJEhYKDmNyZWF0ZWRTZWNvbmRzGAQg",
            "ASgDEjcKBGtpbmQYBSABKA4yKS5wcm90b2NvbHMuY29tbW9uLkNPTk5FQ1RP",
            "Ul9SRUdJU1RFUl9LSU5EEhYKDnVwZGF0ZWRTZWNvbmRzGAYgASgDEiwKCHJl",
            "c291cmNlGAcgASgLMhoucHJvdG9jb2xzLmNvbW1vbi5SZXNvdXJjZRIYChBl",
            "bWVyZ2VuY3lTY2VuZUlkGAggASgDEhMKC2lzRW1lcmdlbmN5GAkgASgIIooC",
            "CglDb25uZWN0b3ISLQoEYmFzZRgBIAEoCzIfLnByb3RvY29scy5jb21tb24u",
            "Q29ubmVjdG9yQmFzZRI4Cg5kZXBhcnRtZW50QmFzZRgCIAEoCzIgLnByb3Rv",
            "Y29scy5jb21tb24uRGVwYXJ0bWVudEJhc2USJgoFc2NlbmUYAyABKAsyFy5w",
            "cm90b2NvbHMuY29tbW9uLlNjZW5lEjsKCXNjaGVkdWxlcxgEIAMoCzIoLnBy",
            "b3RvY29scy5jb21tb24uQ29ubmVjdG9yU2NoZWR1bGVTY2VuZRIvCg5lbWVy",
            "Z2VuY3lTY2VuZRgFIAEoCzIXLnByb3RvY29scy5jb21tb24uU2NlbmUiiwEK",
            "F0Nvbm5lY3RvckRlcGFydG1lbnRCYXNlEjYKDWNvbm5lY3RvckJhc2UYASAB",
            "KAsyHy5wcm90b2NvbHMuY29tbW9uLkNvbm5lY3RvckJhc2USOAoOZGVwYXJ0",
            "bWVudEJhc2UYAiABKAsyIC5wcm90b2NvbHMuY29tbW9uLkRlcGFydG1lbnRC",
            "YXNlIo4BChBNZW1iZXJQZXJtaXNzaW9uEgoKAmlkGAEgASgDEjAKCm1lbWJl",
            "ckJhc2UYAiABKAsyHC5wcm90b2NvbHMuY29tbW9uLk1lbWJlckJhc2USPAoK",
            "cGVybWlzc2lvbhgDIAEoDjIoLnByb3RvY29scy5jb21tb24uTUVNQkVSX1BF",
            "Uk1JU1NJT05fS0lORCKKAQoQTWVtYmVyRGVwYXJ0bWVudBIKCgJpZBgBIAEo",
            "AxIwCgptZW1iZXJCYXNlGAIgASgLMhwucHJvdG9jb2xzLmNvbW1vbi5NZW1i",
            "ZXJCYXNlEjgKDmRlcGFydG1lbnRCYXNlGAMgASgLMiAucHJvdG9jb2xzLmNv",
            "bW1vbi5EZXBhcnRtZW50QmFzZSL6GAoVTWVtYmVyUmVjb3JkQmx1ZXByaW50",
            "EjIKBGtpbmQYASABKA4yJC5wcm90b2NvbHMuY29tbW9uLk1FTUJFUl9SRUNP",
            "UkRfS0lORBJOCgtzY2VuZVJlY29yZBgCIAEoCzI5LnByb3RvY29scy5jb21t",
            "b24uTWVtYmVyUmVjb3JkQmx1ZXByaW50Lk1lbWJlclNjZW5lUmVjb3JkElYK",
            "D2Nvbm5lY3RvclJlY29yZBgDIAEoCzI9LnByb3RvY29scy5jb21tb24uTWVt",
            "YmVyUmVjb3JkQmx1ZXByaW50Lk1lbWJlckNvbm5lY3RvclJlY29yZBJmChdj",
            "b25uZWN0b3JTY2hlZHVsZVJlY29yZBgEIAEoCzJFLnByb3RvY29scy5jb21t",
            "b24uTWVtYmVyUmVjb3JkQmx1ZXByaW50Lk1lbWJlckNvbm5lY3RvclNjaGVk",
            "dWxlUmVjb3JkEl4KE2Nvbm5lY3RvcktpbmRSZWNvcmQYBSABKAsyQS5wcm90",
            "b2NvbHMuY29tbW9uLk1lbWJlclJlY29yZEJsdWVwcmludC5NZW1iZXJDb25u",
            "ZWN0b3JLaW5kUmVjb3JkEmAKFGNvbm5lY3RvclNjZW5lUmVjb3JkGAYgASgL",
            "MkIucHJvdG9jb2xzLmNvbW1vbi5NZW1iZXJSZWNvcmRCbHVlcHJpbnQuTWVt",
            "YmVyQ29ubmVjdG9yU2NlbmVSZWNvcmQSagoZY29ubmVjdG9yRGVwYXJ0bWVu",
            "dFJlY29yZBgHIAEoCzJHLnByb3RvY29scy5jb21tb24uTWVtYmVyUmVjb3Jk",
            "Qmx1ZXByaW50Lk1lbWJlckNvbm5lY3RvckRlcGFydG1lbnRSZWNvcmQSVAoO",
            "c2NoZWR1bGVSZW9jcmQYCCABKAsyPC5wcm90b2NvbHMuY29tbW9uLk1lbWJl",
            "clJlY29yZEJsdWVwcmludC5NZW1iZXJTY2hlZHVsZVJlY29yZBJeChNzY2hl",
            "ZHVsZVNjZW5lUmVjb3JkGAkgASgLMkEucHJvdG9jb2xzLmNvbW1vbi5NZW1i",
            "ZXJSZWNvcmRCbHVlcHJpbnQuTWVtYmVyU2NoZWR1bGVTY2VuZVJlY29yZBJY",
            "ChBkZXBhcnRtZW50UmVjb3JkGAogASgLMj4ucHJvdG9jb2xzLmNvbW1vbi5N",
            "ZW1iZXJSZWNvcmRCbHVlcHJpbnQuTWVtYmVyRGVwYXJ0bWVudFJlY29yZBJg",
            "ChRkZXBhcnRtZW50Tm9kZVJlY29yZBgLIAEoCzJCLnByb3RvY29scy5jb21t",
            "b24uTWVtYmVyUmVjb3JkQmx1ZXByaW50Lk1lbWJlckRlcGFydG1lbnROb2Rl",
            "UmVjb3JkEnQKHmRlcGFydG1lbnRSZXNvdXJjZUZvbGRlclJlY29yZBgMIAEo",
            "CzJMLnByb3RvY29scy5jb21tb24uTWVtYmVyUmVjb3JkQmx1ZXByaW50Lk1l",
            "bWJlckRlcGFydG1lbnRSZXNvdXJjZUZvbGRlclJlY29yZBJuChtkZXBhcnRt",
            "ZW50U2NlbmVGb2xkZXJSZWNvcmQYDSABKAsySS5wcm90b2NvbHMuY29tbW9u",
            "Lk1lbWJlclJlY29yZEJsdWVwcmludC5NZW1iZXJEZXBhcnRtZW50U2NlbmVG",
            "b2xkZXJSZWNvcmQSaAoYY29ubmVjdG9yRW1lcmdlbmN5UmVjb3JkGA4gASgL",
            "MkYucHJvdG9jb2xzLmNvbW1vbi5NZW1iZXJSZWNvcmRCbHVlcHJpbnQuTWVt",
            "YmVyQ29ubmVjdG9yRW1lcmdlbmN5UmVjb3JkEnIKHWNvbm5lY3RvckVtZXJn",
            "ZW5jeVNjZW5lUmVjb3JkGA8gASgLMksucHJvdG9jb2xzLmNvbW1vbi5NZW1i",
            "ZXJSZWNvcmRCbHVlcHJpbnQuTWVtYmVyQ29ubmVjdG9yRW1lcmdlbmN5U2Nl",
            "bmVSZWNvcmQaNwoRTWVtYmVyU2NlbmVSZWNvcmQSDwoHc2NlbmVJZBgBIAEo",
            "AxIRCglzY2VuZU5hbWUYAiABKAkaQAoUTWVtYmVyU2NoZWR1bGVSZWNvcmQS",
            "EgoKc2NoZWR1bGVJZBgBIAEoAxIUCgxzY2hlZHVsZU5hbWUYAiABKAkaTwoZ",
            "TWVtYmVyU2NoZWR1bGVTY2VuZVJlY29yZBIXCg9zY2hlZHVsZVNjZW5lSWQY",
            "ASABKAMSGQoRc2NoZWR1bGVTY2VuZU5hbWUYAiABKAkavAEKGU1lbWJlckNv",
            "bm5lY3RvcktpbmRSZWNvcmQSEwoLY29ubmVjdG9ySWQYASABKAMSFQoNY29u",
            "bmVjdG9yTmFtZRgCIAEoCRI6CgdvbGRLaW5kGAMgASgOMikucHJvdG9jb2xz",
            "LmNvbW1vbi5DT05ORUNUT1JfUkVHSVNURVJfS0lORBI3CgRraW5kGAQgASgO",
            "MikucHJvdG9jb2xzLmNvbW1vbi5DT05ORUNUT1JfUkVHSVNURVJfS0lORBpD",
            "ChVNZW1iZXJDb25uZWN0b3JSZWNvcmQSEwoLY29ubmVjdG9ySWQYASABKAMS",
            "FQoNY29ubmVjdG9yTmFtZRgCIAEoCRp4Ch5NZW1iZXJDb25uZWN0b3JFbWVy",
            "Z2VuY3lSZWNvcmQSEwoLY29ubmVjdG9ySWQYASABKAMSFQoNY29ubmVjdG9y",
            "TmFtZRgCIAEoCRIUCgxvbGRFbWVyZ2VuY3kYAyABKAgSFAoMbmV3RW1lcmdl",
            "bmN5GAQgASgIGogBCh1NZW1iZXJDb25uZWN0b3JTY2hlZHVsZVJlY29yZBIT",
            "Cgtjb25uZWN0b3JJZBgBIAEoAxIVCg1jb25uZWN0b3JOYW1lGAIgASgJEiAK",
            "GGNvbm5lY3RvclNjaGVkdWxlU2NlbmVJZBgDIAEoAxIZChFzY2VuZVNjaGVk",
            "dWxlTmFtZRgEIAEoCRpsChpNZW1iZXJDb25uZWN0b3JTY2VuZVJlY29yZBIT",
            "Cgtjb25uZWN0b3JJZBgBIAEoAxIVCg1jb25uZWN0b3JOYW1lGAIgASgJEg8K",
            "B3NjZW5lSWQYAyABKAMSEQoJc2NlbmVOYW1lGAQgASgJGnUKI01lbWJlckNv",
            "bm5lY3RvckVtZXJnZW5jeVNjZW5lUmVjb3JkEhMKC2Nvbm5lY3RvcklkGAEg",
            "ASgDEhUKDWNvbm5lY3Rvck5hbWUYAiABKAkSDwoHc2NlbmVJZBgDIAEoAxIR",
            "CglzY2VuZU5hbWUYBCABKAkaewofTWVtYmVyQ29ubmVjdG9yRGVwYXJ0bWVu",
            "dFJlY29yZBITCgtjb25uZWN0b3JJZBgBIAEoAxIVCg1jb25uZWN0b3JOYW1l",
            "GAIgASgJEhQKDGRlcGFydG1lbnRJZBgDIAEoAxIWCg5kZXBhcnRtZW50TmFt",
            "ZRgEIAEoCRphChZNZW1iZXJEZXBhcnRtZW50UmVjb3JkEhQKDGRlcGFydG1l",
            "bnRJZBgBIAEoAxIWCg5kZXBhcnRtZW50TmFtZRgCIAEoCRIZChFuZXdEZXBh",
            "cnRtZW50TmFtZRgDIAEoCRqWAQoaTWVtYmVyRGVwYXJ0bWVudE5vZGVSZWNv",
            "cmQSGgoScGFyZW50RGVwYXJ0bWVudElkGAEgASgDEhwKFHBhcmVudERlcGFy",
            "dG1lbnROYW1lGAIgASgJEh0KFW5ld1BhcmVudERlcGFydG1lbnRJZBgDIAEo",
            "AxIfChduZXdQYXJlbnREZXBhcnRtZW50TmFtZRgEIAEoCRrHAQokTWVtYmVy",
            "RGVwYXJ0bWVudFJlc291cmNlRm9sZGVyUmVjb3JkEhQKDGRlcGFydG1lbnRJ",
            "ZBgBIAEoAxIWCg5kZXBhcnRtZW50TmFtZRgCIAEoCRIiChpkZXBhcnRtZW50",
            "UmVzb3VyY2VGb2xkZXJJZBgDIAEoAxIkChxkZXBhcnRtZW50UmVzb3VyY2VG",
            "b2xkZXJOYW1lGAQgASgJEicKH25ld0RlcGFydG1lbnRSZXNvdXJjZUZvbGRl",
            "ck5hbWUYBSABKAkauwEKIU1lbWJlckRlcGFydG1lbnRTY2VuZUZvbGRlclJl",
            "Y29yZBIUCgxkZXBhcnRtZW50SWQYASABKAMSFgoOZGVwYXJ0bWVudE5hbWUY",
            "AiABKAkSHwoXZGVwYXJ0bWVudFNjZW5lRm9sZGVySWQYAyABKAMSIQoZZGVw",
            "YXJ0bWVudFNjZW5lRm9sZGVyTmFtZRgEIAEoCRIkChxuZXdEZXBhcnRtZW50",
            "U2NlbmVGb2xkZXJOYW1lGAUgASgJIuEBCgxNZW1iZXJSZWNvcmQSFgoObWVt",
            "YmVyUmVjb3JkSWQYASABKAMSMAoKbWVtYmVyQmFzZRgCIAEoCzIcLnByb3Rv",
            "Y29scy5jb21tb24uTWVtYmVyQmFzZRIyCgRraW5kGAMgASgOMiQucHJvdG9j",
            "b2xzLmNvbW1vbi5NRU1CRVJfUkVDT1JEX0tJTkQSOgoJYmx1ZXByaW50GAQg",
            "ASgLMicucHJvdG9jb2xzLmNvbW1vbi5NZW1iZXJSZWNvcmRCbHVlcHJpbnQS",
            "FwoPYmVoYXZpb3JTZWNvbmRzGAUgASgDIrkFCghTY2hlZHVsZRISCgpzY2hl",
            "ZHVsZUlkGAEgASgDEgwKBG5hbWUYAiABKAkSGAoQc3RhcnREYXRlU2Vjb25k",
            "cxgDIAEoAxIWCg5lbmREYXRlU2Vjb25kcxgEIAEoAxIPCgd1c2VEYXRlGAUg",
            "ASgIEi0KBHdlZWsYBiABKAsyHy5wcm90b2NvbHMuY29tbW9uLlNjaGVkdWxl",
            "LldlZWsSFgoOY3JlYXRlZFNlY29uZHMYByABKAMSFgoOdXBkYXRlZFNlY29u",
            "ZHMYCCABKAMaewoJRGF5T2ZXZWVrEhEKCXN0YXJ0SG91chgBIAEoBRITCgtz",
            "dGFydE1pbnV0ZRgCIAEoBRIPCgdlbmRIb3VyGAMgASgFEhEKCWVuZE1pbnV0",
            "ZRgEIAEoBRIQCghpc0FsbERheRgFIAEoCBIQCghkaXNhYmxlZBgGIAEoCBrr",
            "AgoEV2VlaxIxCgNtb24YASABKAsyJC5wcm90b2NvbHMuY29tbW9uLlNjaGVk",
            "dWxlLkRheU9mV2VlaxIxCgN0dWUYAiABKAsyJC5wcm90b2NvbHMuY29tbW9u",
            "LlNjaGVkdWxlLkRheU9mV2VlaxIxCgN3ZWQYAyABKAsyJC5wcm90b2NvbHMu",
            "Y29tbW9uLlNjaGVkdWxlLkRheU9mV2VlaxIxCgN0aHUYBCABKAsyJC5wcm90",
            "b2NvbHMuY29tbW9uLlNjaGVkdWxlLkRheU9mV2VlaxIxCgNmcmkYBSABKAsy",
            "JC5wcm90b2NvbHMuY29tbW9uLlNjaGVkdWxlLkRheU9mV2VlaxIxCgNzYXQY",
            "BiABKAsyJC5wcm90b2NvbHMuY29tbW9uLlNjaGVkdWxlLkRheU9mV2VlaxIx",
            "CgNzdW4YByABKAsyJC5wcm90b2NvbHMuY29tbW9uLlNjaGVkdWxlLkRheU9m",
            "V2VlayK2AQoNU2NoZWR1bGVTY2VuZRIXCg9zY2hlZHVsZVNjZW5lSWQYASAB",
            "KAMSDAoEbmFtZRgCIAEoCRIsCghzY2hlZHVsZRgDIAEoCzIaLnByb3RvY29s",
            "cy5jb21tb24uU2NoZWR1bGUSLgoJc2NlbmVCYXNlGAQgASgLMhsucHJvdG9j",
            "b2xzLmNvbW1vbi5TY2VuZUJhc2USDwoHY3JlYXRlZBgFIAEoAxIPCgd1cGRh",
            "dGVkGAYgASgDIpQBChZDb25uZWN0b3JTY2hlZHVsZVNjZW5lEiAKGGNvbm5l",
            "Y3RvclNjaGVkdWxlU2NlbmVJZBgBIAEoAxI2Cg1zY2hlZHVsZVNjZW5lGAIg",
            "ASgLMh8ucHJvdG9jb2xzLmNvbW1vbi5TY2hlZHVsZVNjZW5lEg8KB2NyZWF0",
            "ZWQYAyABKAMSDwoHdXBkYXRlZBgEIAEoAyJHCglQYWdpbmF0b3ISEgoKaXRl",
            "bXNDb3VudBgBIAEoBRISCgpwYWdlc0NvdW50GAIgASgFEhIKCnBhZ2VzSW5k",
            "ZXgYAyABKAUiQAoHV2VhdGhlchIPCgdza3lDb2RlGAEgASgFEg8KB3B0eUNv",
            "ZGUYAiABKAUSEwoLdGVtcGVyYXR1cmUYAyABKAUiqgEKGERlcGFydG1lbnRS",
            "ZXNvdXJjZUZvbGRlchIaChJkZXBhcnRtZW50Rm9sZGVySWQYASABKAMSDAoE",
            "bmFtZRgCIAEoCRIUCgxkZXBhcnRtZW50SWQYAyABKAMSKAogcGFyZW50RGVw",
            "YXJ0bWVudFJlc291cmNlRm9sZGVySWQYBCABKAMSFgoOY3JlYXRlZFNlY29u",
            "ZHMYBSABKAMSDAoEc2l6ZRgGIAEoAyKkAQoVRGVwYXJ0bWVudFNjZW5lRm9s",
            "ZGVyEhoKEmRlcGFydG1lbnRGb2xkZXJJZBgBIAEoAxIMCgRuYW1lGAIgASgJ",
            "EhQKDGRlcGFydG1lbnRJZBgDIAEoAxIlCh1wYXJlbnREZXBhcnRtZW50U2Nl",
            "bmVGb2xkZXJJZBgEIAEoAxIWCg5jcmVhdGVkU2Vjb25kcxgFIAEoAxIMCgRz",
            "aXplGAYgASgDIpwCCgRGZWVkEg0KBXRpdGxlGAEgASgJEgwKBGxpbmsYAiAB",
            "KAkSEwoLZGVzY3JpcHRpb24YAyABKAkSEAoIbGFuZ3VhZ2UYBCABKAkSEQoJ",
            "Y29weXJpZ2h0GAUgASgJEhwKFGxhc3RCdWlsZERhdGVTZWNvbmRzGAYgASgD",
            "Ei4KBWl0ZW1zGAcgAygLMh8ucHJvdG9jb2xzLmNvbW1vbi5GZWVkLkZlZWRJ",
            "dGVtGm8KCEZlZWRJdGVtEg0KBXRpdGxlGAEgASgJEhMKC2Rlc2NyaXB0aW9u",
            "GAIgASgJEhYKDnB1YkRhdGVTZWNvbmRzGAMgASgDEhkKEWxhc3RVcGRhdGVT",
            "ZWNvbmRzGAQgASgDEgwKBGxpbmsYBSABKAkqzgQKEkNPTU1PTl9TVEFUVVNf",
            "S0lORBIeChpDT01NT05fU1RBVFVTX0tJTkRfREVGQVVMVBAAEh0KGUNPTU1P",
            "Tl9TVEFUVVNfS0lORF9GQUlMRUQQARImCiJDT01NT05fU1RBVFVTX0tJTkRf",
            "RkFJTEVEX0RBVEFCQVNFEAISJgoiQ09NTU9OX1NUQVRVU19LSU5EX0ZBSUxF",
            "RF9QUk9UT0JVRhADEicKI0NPTU1PTl9TVEFUVVNfS0lORF9GQUlMRURfRU5D",
            "RUxBRFVTEAQSKAokQ09NTU9OX1NUQVRVU19LSU5EX0ZBSUxFRF9EVVBMSUNB",
            "VEVEEAUSKAokQ09NTU9OX1NUQVRVU19LSU5EX0ZBSUxFRF9ERVBSRUNBVEVE",
            "EAYSJQohQ09NTU9OX1NUQVRVU19LSU5EX0ZBSUxFRF9SRUZSRVNIEAcSKAok",
            "Q09NTU9OX1NUQVRVU19LSU5EX0ZBSUxFRF9QRVJNSVNTSU9OEAgSJwojQ09N",
            "TU9OX1NUQVRVU19LSU5EX0ZBSUxFRF9PVkVSV1JJVEUQCRIiCh5DT01NT05f",
            "U1RBVFVTX0tJTkRfREJfUkVTVFJJQ1QQZBIfChpDT01NT05fU1RBVFVTX0tJ",
            "TkRfU1VDQ0VTUxDIARIiCh1DT01NT05fU1RBVFVTX0tJTkRfTk9fQ09OVEVO",
            "VBDMARIkCh9DT01NT05fU1RBVFVTX0tJTkRfVU5BVVRIT1JJWkVEEJEDEiMK",
            "HkNPTU1PTl9TVEFUVVNfS0lORF9VTlNVUFBPUlRFRBCfAyqEAQoLTUVNQkVS",
            "X0tJTkQSFwoTTUVNQkVSX0tJTkRfREVGQVVMVBAAEhYKEk1FTUJFUl9LSU5E",
            "X05PUk1BTBABEhUKEU1FTUJFUl9LSU5EX0FETUlOEAISFwoTTUVNQkVSX0tJ",
            "TkRfTUFOQUdFUhADEhQKEE1FTUJFUl9LSU5EX1RFU1QQBCraAwoWTUVNQkVS",
            "X1BFUk1JU1NJT05fS0lORBIiCh5NRU1CRVJfUEVSTUlTU0lPTl9LSU5EX0RF",
            "RkFVTFQQABInCiNNRU1CRVJfUEVSTUlTU0lPTl9LSU5EX1NDRU5FX1NFTEVD",
            "VBABEicKI01FTUJFUl9QRVJNSVNTSU9OX0tJTkRfU0NFTkVfVVBEQVRFEAIS",
            "JwojTUVNQkVSX1BFUk1JU1NJT05fS0lORF9TQ0VORV9ERUxFVEUQAxIpCiVN",
            "RU1CRVJfUEVSTUlTU0lPTl9LSU5EX0NPTk5FQ1RfU0VMRUNUEAQSKQolTUVN",
            "QkVSX1BFUk1JU1NJT05fS0lORF9DT05ORUNUX1VQREFURRAFEikKJU1FTUJF",
            "Ul9QRVJNSVNTSU9OX0tJTkRfQ09OTkVDVF9ERUxFVEUQBhIoCiRNRU1CRVJf",
            "UEVSTUlTU0lPTl9LSU5EX01FTUJFUl9TRUxFQ1QQBxIoCiRNRU1CRVJfUEVS",
            "TUlTU0lPTl9LSU5EX01FTUJFUl9VUERBVEUQCBIoCiRNRU1CRVJfUEVSTUlT",
            "U0lPTl9LSU5EX01FTUJFUl9ERUxFVEUQCRIiCh5NRU1CRVJfUEVSTUlTU0lP",
            "Tl9LSU5EX01PTklUT1IQCir2AQoUTUVNQkVSX1JFR0lTVEVSX0tJTkQSIAoc",
            "TUVNQkVSX1JFR0lTVEVSX0tJTkRfREVGQVVMVBAAEiMKH01FTUJFUl9SRUdJ",
            "U1RFUl9LSU5EX1JFR0lTVEVSRUQQARIiCh5NRU1CRVJfUkVHSVNURVJfS0lO",
            "RF9DT01QTEVURUQQAhIkCiBNRU1CRVJfUkVHSVNURVJfS0lORF9GQUlMRURf",
            "REVOWRADEiQKIE1FTUJFUl9SRUdJU1RFUl9LSU5EX0ZBSUxFRF9XQUlUEAQS",
            "JwojTUVNQkVSX1JFR0lTVEVSX0tJTkRfUkVTRVRfUEFTU1dPUkQQBSrlDAoS",
            "TUVNQkVSX1JFQ09SRF9LSU5EEh4KGk1FTUJFUl9SRUNPUkRfS0lORF9ERUZB",
            "VUxUEAASJQohTUVNQkVSX1JFQ09SRF9LSU5EX01FTUJFUl9DUkVBVEVEEAoS",
            "MAosTUVNQkVSX1JFQ09SRF9LSU5EX01FTUJFUl9QRVJNSVNTSU9OX1VQREFU",
            "RUQQCxIpCiVNRU1CRVJfUkVDT1JEX0tJTkRfREVQQVJUTUVOVF9DUkVBVEVE",
            "EBQSKQolTUVNQkVSX1JFQ09SRF9LSU5EX0RFUEFSVE1FTlRfVVBEQVRFRBAV",
            "EikKJU1FTUJFUl9SRUNPUkRfS0lORF9ERVBBUlRNRU5UX0RFTEVURUQQFhIu",
            "CipNRU1CRVJfUkVDT1JEX0tJTkRfREVQQVJUTUVOVF9OT0RFX1VQREFURUQQ",
            "HxIkCiBNRU1CRVJfUkVDT1JEX0tJTkRfU0NFTkVfQ1JFQVRFRBBkEiQKIE1F",
            "TUJFUl9SRUNPUkRfS0lORF9TQ0VORV9VUERBVEVEEGUSJAogTUVNQkVSX1JF",
            "Q09SRF9LSU5EX1NDRU5FX0RFTEVURUQQZhIpCiRNRU1CRVJfUkVDT1JEX0tJ",
            "TkRfQ09OTkVDVE9SX0NPTkZJUk0QyAESJgohTUVNQkVSX1JFQ09SRF9LSU5E",
            "X0NPTk5FQ1RPUl9ERU5ZEMkBEikKJE1FTUJFUl9SRUNPUkRfS0lORF9DT05O",
            "RUNUT1JfREVMRVRFRBDKARIxCixNRU1CRVJfUkVDT1JEX0tJTkRfQ09OTkVD",
            "VE9SX0VNRVJHRU5DWV9TVEFSVBDLARIvCipNRU1CRVJfUkVDT1JEX0tJTkRf",
            "Q09OTkVDVE9SX0VNRVJHRU5DWV9FTkQQzAESMgotTUVNQkVSX1JFQ09SRF9L",
            "SU5EX0NPTk5FQ1RPUl9TQ0hFRFVMRV9DUkVBVEVEEKwCEjIKLU1FTUJFUl9S",
            "RUNPUkRfS0lORF9DT05ORUNUT1JfU0NIRURVTEVfREVMRVRFRBCuAhItCihN",
            "RU1CRVJfUkVDT1JEX0tJTkRfQ09OTkVDVE9SX1NDRU5FX0FEREVEELYCEi8K",
            "Kk1FTUJFUl9SRUNPUkRfS0lORF9DT05ORUNUT1JfU0NFTkVfREVMRVRFRBC3",
            "AhI5CjRNRU1CRVJfUkVDT1JEX0tJTkRfQ09OTkVDVE9SX0VNRVJHRU5DWV9T",
            "Q0VORV9DUkVBVEVEELgCEjkKNE1FTUJFUl9SRUNPUkRfS0lORF9DT05ORUNU",
            "T1JfRU1FUkdFTkNZX1NDRU5FX0RFTEVURUQQuQISMgotTUVNQkVSX1JFQ09S",
            "RF9LSU5EX0NPTk5FQ1RPUl9ERVBBUlRNRU5UX0FEREVEEMECEjQKL01FTUJF",
            "Ul9SRUNPUkRfS0lORF9DT05ORUNUT1JfREVQQVJUTUVOVF9ERUxFVEVEEMIC",
            "EigKI01FTUJFUl9SRUNPUkRfS0lORF9TQ0hFRFVMRV9DUkVBVEVEEJADEigK",
            "I01FTUJFUl9SRUNPUkRfS0lORF9TQ0hFRFVMRV9VUERBVEVEEJEDEigKI01F",
            "TUJFUl9SRUNPUkRfS0lORF9TQ0hFRFVMRV9ERUxFVEVEEJIDEi4KKU1FTUJF",
            "Ul9SRUNPUkRfS0lORF9TQ0hFRFVMRV9TQ0VORV9DUkVBVEVEEJoDEi4KKU1F",
            "TUJFUl9SRUNPUkRfS0lORF9TQ0hFRFVMRV9TQ0VORV9VUERBVEVEEJsDEi4K",
            "KU1FTUJFUl9SRUNPUkRfS0lORF9TQ0hFRFVMRV9TQ0VORV9ERUxFVEVEEJwD",
            "Ei8KKk1FTUJFUl9SRUNPUkRfS0lORF9SRVNPVVJDRV9GT0xERVJfQ1JFQVRF",
            "RBCkAxIvCipNRU1CRVJfUkVDT1JEX0tJTkRfUkVTT1VSQ0VfRk9MREVSX1VQ",
            "REFURUQQpQMSLwoqTUVNQkVSX1JFQ09SRF9LSU5EX1JFU09VUkNFX0ZPTERF",
            "Ul9ERUxFVEVEEKYDEiwKJ01FTUJFUl9SRUNPUkRfS0lORF9TQ0VORV9GT0xE",
            "RVJfQ1JFQVRFRBCuAxIsCidNRU1CRVJfUkVDT1JEX0tJTkRfU0NFTkVfRk9M",
            "REVSX1VQREFURUQQrwMSLAonTUVNQkVSX1JFQ09SRF9LSU5EX1NDRU5FX0ZP",
            "TERFUl9ERUxFVEVEELADKpQEChVTQ0VORV9DT01QT05FTlRTX0tJTkQSIQod",
            "U0NFTkVfQ09NUE9ORU5UU19LSU5EX0RFRkFVTFQQABIfChtTQ0VORV9DT01Q",
            "T05FTlRTX0tJTkRfU0NFTkUQARIgChxTQ0VORV9DT01QT05FTlRTX0tJTkRf",
            "Q09NTU9OEAISIAocU0NFTkVfQ09NUE9ORU5UU19LSU5EX0JVVFRPThADEh8K",
            "G1NDRU5FX0NPTVBPTkVOVFNfS0lORF9WSURFTxAEEh8KG1NDRU5FX0NPTVBP",
            "TkVOVFNfS0lORF9JTUFHRRAFEiIKHlNDRU5FX0NPTVBPTkVOVFNfS0lORF9T",
            "VUJUSVRMRRAGEh0KGVNDRU5FX0NPTVBPTkVOVFNfS0lORF9QREYQBxIdChlT",
            "Q0VORV9DT01QT05FTlRTX0tJTkRfTUFQEAgSIQodU0NFTkVfQ09NUE9ORU5U",
            "U19LSU5EX1dFQVRIRVIQCRIfChtTQ0VORV9DT01QT05FTlRTX0tJTkRfQ0xP",
            "Q0sQChIdChlTQ0VORV9DT01QT05FTlRTX0tJTkRfV0VCEAsSJQohU0NFTkVf",
            "Q09NUE9ORU5UU19LSU5EX1NMSURFX0lNQUdFEAwSJQohU0NFTkVfQ09NUE9O",
            "RU5UU19LSU5EX1NMSURFX1ZJREVPEA0SHgoaU0NFTkVfQ09NUE9ORU5UU19L",
            "SU5EX1RFWFQQDiqWAgoTU0NFTkVfUkVTT1VSQ0VfS0lORBIfChtTQ0VORV9S",
            "RVNPVVJDRV9LSU5EX0RFRkFVTFQQABIdChlTQ0VORV9SRVNPVVJDRV9LSU5E",
            "X0lNQUdFEAESHQoZU0NFTkVfUkVTT1VSQ0VfS0lORF9WSURFTxACEiAKHFND",
            "RU5FX1JFU09VUkNFX0tJTkRfU1VCVElUTEUQAxIbChdTQ0VORV9SRVNPVVJD",
            "RV9LSU5EX1BERhAEEhsKF1NDRU5FX1JFU09VUkNFX0tJTkRfTUFQEAUSHQoZ",
            "U0NFTkVfUkVTT1VSQ0VfS0lORF9TQ0VORRAGEiUKIVNDRU5FX1JFU09VUkNF",
            "X0tJTkRfU0NSRUVOQ0FQVFVSRRAHKq0BChdDT05ORUNUT1JfUkVHSVNURVJf",
            "S0lORBIjCh9DT05ORUNUT1JfUkVHSVNURVJfS0lORF9ERUZBVUxUEAASJgoi",
            "Q09OTkVDVE9SX1JFR0lTVEVSX0tJTkRfUkVHSVNURVJFRBABEiMKH0NPTk5F",
            "Q1RPUl9SRUdJU1RFUl9LSU5EX0NPTUZJUk0QAhIgChxDT05ORUNUT1JfUkVH",
            "SVNURVJfS0lORF9ERU5ZEAMqgwEKFkRFUEFSVE1FTlRfRk9MREVSX0tJTkQS",
            "IgoeREVQQVJUTUVOVF9GT0xERVJfS0lORF9ERUZBVUxUEAASIwofREVQQVJU",
            "TUVOVF9GT0xERVJfS0lORF9SRVNPVVJDRRABEiAKHERFUEFSVE1FTlRfRk9M",
            "REVSX0tJTkRfU0NFTkUQAiqKAgoPVEVYVF9BTElHTl9LSU5EEhsKF1RFWFRf",
            "QUxJR05fS0lORF9ERUZBVUxUEAASIgoeVEVYVF9BTElHTl9LSU5EX1ZFUlRJ",
            "Q0FMX1NUQVJUEAESIwofVEVYVF9BTElHTl9LSU5EX1ZFUlRJQ0FMX0NFTlRF",
            "UhACEiAKHFRFWFRfQUxJR05fS0lORF9WRVJUSUNBTF9FTkQQAxIkCiBURVhU",
            "X0FMSUdOX0tJTkRfSE9SSVpPTlRBTF9TVEFSVBAEEiUKIVRFWFRfQUxJR05f",
            "S0lORF9IT1JJWk9OVEFMX0NFTlRFUhAFEiIKHlRFWFRfQUxJR05fS0lORF9I",
            "T1JJWk9OVEFMX0VORBAGQiOqAiBTYXR1cm4uQmFja2VuZHMuUHJvdG9jb2xz",
            "LkNvbW1vbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND), typeof(global::Saturn.Backends.Protocols.Common.MEMBER_KIND), typeof(global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND), typeof(global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND), typeof(global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND), typeof(global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND), typeof(global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND), typeof(global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND), typeof(global::Saturn.Backends.Protocols.Common.DEPARTMENT_FOLDER_KIND), typeof(global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartCommon), global::Saturn.Backends.Protocols.Common.ScenePartCommon.Parser, new[]{ "Id", "Kind", "Position", "Size", "Background", "ZIndex", "Name" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position), global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size), global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size.Parser, new[]{ "Width", "Height" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePart), global::Saturn.Backends.Protocols.Common.ScenePart.Parser, new[]{ "Common", "Button", "Image", "Video", "Document", "Subtitle", "Coordinate", "Weather", "Web", "Clock", "SlideImage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartText), global::Saturn.Backends.Protocols.Common.ScenePartText.Parser, new[]{ "Text", "TextColor", "TextSize", "Bold", "Italic", "VerticalKind", "HorizontalKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartImage), global::Saturn.Backends.Protocols.Common.ScenePartImage.Parser, new[]{ "Resource", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartButton), global::Saturn.Backends.Protocols.Common.ScenePartButton.Parser, new[]{ "Text", "Resource", "SceneId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartVideo), global::Saturn.Backends.Protocols.Common.ScenePartVideo.Parser, new[]{ "Resource", "Repeated", "Played", "SceneId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartDocument), global::Saturn.Backends.Protocols.Common.ScenePartDocument.Parser, new[]{ "Resource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartSubtitle), global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Parser, new[]{ "Text", "Seconds", "Resource", "Repeated", "AnimationKind", "Rss" }, null, new[]{ typeof(global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND), typeof(global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.RSS_CONTENT_KIND) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.Rss), global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.Rss.Parser, new[]{ "Address", "ContentKinds" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartCoordinate), global::Saturn.Backends.Protocols.Common.ScenePartCoordinate.Parser, new[]{ "Text", "Resource", "CoordinateRresource", "SourceResource", "SourceSize", "SourcePosition", "DestinationResource", "DestinationSize", "DestinationPosition", "ScenePartImageId", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartWeather), global::Saturn.Backends.Protocols.Common.ScenePartWeather.Parser, new[]{ "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartClock), global::Saturn.Backends.Protocols.Common.ScenePartClock.Parser, new[]{ "Text", "Resource", "DateText", "DateFormat", "TextFormat", "UseDate", "UseWeek" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartWeb), global::Saturn.Backends.Protocols.Common.ScenePartWeb.Parser, new[]{ "Url" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartSlideImage), global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Parser, new[]{ "SlideImages" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Types.SlideImage), global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Types.SlideImage.Parser, new[]{ "Resource", "Seconds" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Resource), global::Saturn.Backends.Protocols.Common.Resource.Parser, new[]{ "ResourceId", "Kind", "Location", "FolderName", "Name", "Hash", "Size", "PreviewResource", "DepartmentResourceFolderId", "Created", "Updated", "Duration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.PreviewResource), global::Saturn.Backends.Protocols.Common.PreviewResource.Parser, new[]{ "PreviewResourceId", "Location" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.SceneBlueprint), global::Saturn.Backends.Protocols.Common.SceneBlueprint.Parser, new[]{ "Id", "Name", "Canvas", "Parts", "DispatchScene" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.DispatchScene), global::Saturn.Backends.Protocols.Common.DispatchScene.Parser, new[]{ "IsUsed", "IsTouched", "Seconds", "SceneId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.SceneBase), global::Saturn.Backends.Protocols.Common.SceneBase.Parser, new[]{ "SceneId", "Name", "Resource", "CreatedSeconds", "Width", "Height", "DepartmentSceneFolderId", "IsValified", "UpdatedSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Scene), global::Saturn.Backends.Protocols.Common.Scene.Parser, new[]{ "Base", "SceneResourceBases", "SceneConnections" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.SceneConnection), global::Saturn.Backends.Protocols.Common.SceneConnection.Parser, new[]{ "SceneConnectionId", "SceneId", "ConnectedSceneBase" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.SceneResourceBase), global::Saturn.Backends.Protocols.Common.SceneResourceBase.Parser, new[]{ "SceneResourceId", "SceneId", "Resource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.SceneResource), global::Saturn.Backends.Protocols.Common.SceneResource.Parser, new[]{ "Base" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.CommonStatus), global::Saturn.Backends.Protocols.Common.CommonStatus.Parser, new[]{ "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MoonVersion), global::Saturn.Backends.Protocols.Common.MoonVersion.Parser, new[]{ "ServiceName", "OsVersion", "RuntimeVersion", "AssemVersion", "ElapsedMilliSeconds" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MoonVersion.Types.AssemVersion), global::Saturn.Backends.Protocols.Common.MoonVersion.Types.AssemVersion.Parser, new[]{ "Name", "Version" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.GetVersionResponse), global::Saturn.Backends.Protocols.Common.GetVersionResponse.Parser, new[]{ "Common", "Versions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberBase), global::Saturn.Backends.Protocols.Common.MemberBase.Parser, new[]{ "Id", "Uuid", "Email", "MemberKind", "RegisterKind", "CreatedSeconds", "LastConnectedSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Member), global::Saturn.Backends.Protocols.Common.Member.Parser, new[]{ "Base", "DepartmentBases", "Permissions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.DepartmentBase), global::Saturn.Backends.Protocols.Common.DepartmentBase.Parser, new[]{ "Id", "Name", "CreatedSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Department), global::Saturn.Backends.Protocols.Common.Department.Parser, new[]{ "Base", "MemberBases", "ConnectorBases", "DepartmentLowers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.DepartmentLowerBase), global::Saturn.Backends.Protocols.Common.DepartmentLowerBase.Parser, new[]{ "Id", "LowerDepartmentBase", "CreatedSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.DepartmentNodeBase), global::Saturn.Backends.Protocols.Common.DepartmentNodeBase.Parser, new[]{ "Id", "Order", "ParentDepartmentNodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.DepartmentNode), global::Saturn.Backends.Protocols.Common.DepartmentNode.Parser, new[]{ "Base", "Department" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ConnectorBase), global::Saturn.Backends.Protocols.Common.ConnectorBase.Parser, new[]{ "ConnectorId", "Name", "DeviceId", "CreatedSeconds", "Kind", "UpdatedSeconds", "Resource", "EmergencySceneId", "IsEmergency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Connector), global::Saturn.Backends.Protocols.Common.Connector.Parser, new[]{ "Base", "DepartmentBase", "Scene", "Schedules", "EmergencyScene" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ConnectorDepartmentBase), global::Saturn.Backends.Protocols.Common.ConnectorDepartmentBase.Parser, new[]{ "ConnectorBase", "DepartmentBase" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberPermission), global::Saturn.Backends.Protocols.Common.MemberPermission.Parser, new[]{ "Id", "MemberBase", "Permission" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberDepartment), global::Saturn.Backends.Protocols.Common.MemberDepartment.Parser, new[]{ "Id", "MemberBase", "DepartmentBase" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Parser, new[]{ "Kind", "SceneRecord", "ConnectorRecord", "ConnectorScheduleRecord", "ConnectorKindRecord", "ConnectorSceneRecord", "ConnectorDepartmentRecord", "ScheduleReocrd", "ScheduleSceneRecord", "DepartmentRecord", "DepartmentNodeRecord", "DepartmentResourceFolderRecord", "DepartmentSceneFolderRecord", "ConnectorEmergencyRecord", "ConnectorEmergencySceneRecord" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberSceneRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberSceneRecord.Parser, new[]{ "SceneId", "SceneName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleRecord.Parser, new[]{ "ScheduleId", "ScheduleName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleSceneRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleSceneRecord.Parser, new[]{ "ScheduleSceneId", "ScheduleSceneName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorKindRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorKindRecord.Parser, new[]{ "ConnectorId", "ConnectorName", "OldKind", "Kind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorRecord.Parser, new[]{ "ConnectorId", "ConnectorName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencyRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencyRecord.Parser, new[]{ "ConnectorId", "ConnectorName", "OldEmergency", "NewEmergency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorScheduleRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorScheduleRecord.Parser, new[]{ "ConnectorId", "ConnectorName", "ConnectorScheduleSceneId", "SceneScheduleName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorSceneRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorSceneRecord.Parser, new[]{ "ConnectorId", "ConnectorName", "SceneId", "SceneName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencySceneRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencySceneRecord.Parser, new[]{ "ConnectorId", "ConnectorName", "SceneId", "SceneName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorDepartmentRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorDepartmentRecord.Parser, new[]{ "ConnectorId", "ConnectorName", "DepartmentId", "DepartmentName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentRecord.Parser, new[]{ "DepartmentId", "DepartmentName", "NewDepartmentName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentNodeRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentNodeRecord.Parser, new[]{ "ParentDepartmentId", "ParentDepartmentName", "NewParentDepartmentId", "NewParentDepartmentName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentResourceFolderRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentResourceFolderRecord.Parser, new[]{ "DepartmentId", "DepartmentName", "DepartmentResourceFolderId", "DepartmentResourceFolderName", "NewDepartmentResourceFolderName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentSceneFolderRecord), global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentSceneFolderRecord.Parser, new[]{ "DepartmentId", "DepartmentName", "DepartmentSceneFolderId", "DepartmentSceneFolderName", "NewDepartmentSceneFolderName" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.MemberRecord), global::Saturn.Backends.Protocols.Common.MemberRecord.Parser, new[]{ "MemberRecordId", "MemberBase", "Kind", "Blueprint", "BehaviorSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Schedule), global::Saturn.Backends.Protocols.Common.Schedule.Parser, new[]{ "ScheduleId", "Name", "StartDateSeconds", "EndDateSeconds", "UseDate", "Week", "CreatedSeconds", "UpdatedSeconds" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek), global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek.Parser, new[]{ "StartHour", "StartMinute", "EndHour", "EndMinute", "IsAllDay", "Disabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Schedule.Types.Week), global::Saturn.Backends.Protocols.Common.Schedule.Types.Week.Parser, new[]{ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ScheduleScene), global::Saturn.Backends.Protocols.Common.ScheduleScene.Parser, new[]{ "ScheduleSceneId", "Name", "Schedule", "SceneBase", "Created", "Updated" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.ConnectorScheduleScene), global::Saturn.Backends.Protocols.Common.ConnectorScheduleScene.Parser, new[]{ "ConnectorScheduleSceneId", "ScheduleScene", "Created", "Updated" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Paginator), global::Saturn.Backends.Protocols.Common.Paginator.Parser, new[]{ "ItemsCount", "PagesCount", "PagesIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Weather), global::Saturn.Backends.Protocols.Common.Weather.Parser, new[]{ "SkyCode", "PtyCode", "Temperature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.DepartmentResourceFolder), global::Saturn.Backends.Protocols.Common.DepartmentResourceFolder.Parser, new[]{ "DepartmentFolderId", "Name", "DepartmentId", "ParentDepartmentResourceFolderId", "CreatedSeconds", "Size" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.DepartmentSceneFolder), global::Saturn.Backends.Protocols.Common.DepartmentSceneFolder.Parser, new[]{ "DepartmentFolderId", "Name", "DepartmentId", "ParentDepartmentSceneFolderId", "CreatedSeconds", "Size" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Feed), global::Saturn.Backends.Protocols.Common.Feed.Parser, new[]{ "Title", "Link", "Description", "Language", "Copyright", "LastBuildDateSeconds", "Items" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saturn.Backends.Protocols.Common.Feed.Types.FeedItem), global::Saturn.Backends.Protocols.Common.Feed.Types.FeedItem.Parser, new[]{ "Title", "Description", "PubDateSeconds", "LastUpdateSeconds", "Link" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum COMMON_STATUS_KIND {
    [pbr::OriginalName("COMMON_STATUS_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED")] Failed = 1,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED_DATABASE")] FailedDatabase = 2,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED_PROTOBUF")] FailedProtobuf = 3,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED_ENCELADUS")] FailedEnceladus = 4,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED_DUPLICATED")] FailedDuplicated = 5,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED_DEPRECATED")] FailedDeprecated = 6,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED_REFRESH")] FailedRefresh = 7,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED_PERMISSION")] FailedPermission = 8,
    [pbr::OriginalName("COMMON_STATUS_KIND_FAILED_OVERWRITE")] FailedOverwrite = 9,
    [pbr::OriginalName("COMMON_STATUS_KIND_DB_RESTRICT")] DbRestrict = 100,
    [pbr::OriginalName("COMMON_STATUS_KIND_SUCCESS")] Success = 200,
    [pbr::OriginalName("COMMON_STATUS_KIND_NO_CONTENT")] NoContent = 204,
    [pbr::OriginalName("COMMON_STATUS_KIND_UNAUTHORIZED")] Unauthorized = 401,
    [pbr::OriginalName("COMMON_STATUS_KIND_UNSUPPORTED")] Unsupported = 415,
  }

  public enum MEMBER_KIND {
    [pbr::OriginalName("MEMBER_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("MEMBER_KIND_NORMAL")] Normal = 1,
    [pbr::OriginalName("MEMBER_KIND_ADMIN")] Admin = 2,
    [pbr::OriginalName("MEMBER_KIND_MANAGER")] Manager = 3,
    [pbr::OriginalName("MEMBER_KIND_TEST")] Test = 4,
  }

  public enum MEMBER_PERMISSION_KIND {
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_SCENE_SELECT")] SceneSelect = 1,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_SCENE_UPDATE")] SceneUpdate = 2,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_SCENE_DELETE")] SceneDelete = 3,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_CONNECT_SELECT")] ConnectSelect = 4,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_CONNECT_UPDATE")] ConnectUpdate = 5,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_CONNECT_DELETE")] ConnectDelete = 6,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_MEMBER_SELECT")] MemberSelect = 7,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_MEMBER_UPDATE")] MemberUpdate = 8,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_MEMBER_DELETE")] MemberDelete = 9,
    [pbr::OriginalName("MEMBER_PERMISSION_KIND_MONITOR")] Monitor = 10,
  }

  public enum MEMBER_REGISTER_KIND {
    [pbr::OriginalName("MEMBER_REGISTER_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("MEMBER_REGISTER_KIND_REGISTERED")] Registered = 1,
    [pbr::OriginalName("MEMBER_REGISTER_KIND_COMPLETED")] Completed = 2,
    [pbr::OriginalName("MEMBER_REGISTER_KIND_FAILED_DENY")] FailedDeny = 3,
    [pbr::OriginalName("MEMBER_REGISTER_KIND_FAILED_WAIT")] FailedWait = 4,
    [pbr::OriginalName("MEMBER_REGISTER_KIND_RESET_PASSWORD")] ResetPassword = 5,
  }

  public enum MEMBER_RECORD_KIND {
    [pbr::OriginalName("MEMBER_RECORD_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("MEMBER_RECORD_KIND_MEMBER_CREATED")] MemberCreated = 10,
    [pbr::OriginalName("MEMBER_RECORD_KIND_MEMBER_PERMISSION_UPDATED")] MemberPermissionUpdated = 11,
    /// <summary>
    /// 
    /// </summary>
    [pbr::OriginalName("MEMBER_RECORD_KIND_DEPARTMENT_CREATED")] DepartmentCreated = 20,
    [pbr::OriginalName("MEMBER_RECORD_KIND_DEPARTMENT_UPDATED")] DepartmentUpdated = 21,
    [pbr::OriginalName("MEMBER_RECORD_KIND_DEPARTMENT_DELETED")] DepartmentDeleted = 22,
    [pbr::OriginalName("MEMBER_RECORD_KIND_DEPARTMENT_NODE_UPDATED")] DepartmentNodeUpdated = 31,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCENE_CREATED")] SceneCreated = 100,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCENE_UPDATED")] SceneUpdated = 101,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCENE_DELETED")] SceneDeleted = 102,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_CONFIRM")] ConnectorConfirm = 200,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_DENY")] ConnectorDeny = 201,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_DELETED")] ConnectorDeleted = 202,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_EMERGENCY_START")] ConnectorEmergencyStart = 203,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_EMERGENCY_END")] ConnectorEmergencyEnd = 204,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_SCHEDULE_CREATED")] ConnectorScheduleCreated = 300,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_SCHEDULE_DELETED")] ConnectorScheduleDeleted = 302,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_SCENE_ADDED")] ConnectorSceneAdded = 310,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_SCENE_DELETED")] ConnectorSceneDeleted = 311,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_EMERGENCY_SCENE_CREATED")] ConnectorEmergencySceneCreated = 312,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_EMERGENCY_SCENE_DELETED")] ConnectorEmergencySceneDeleted = 313,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_DEPARTMENT_ADDED")] ConnectorDepartmentAdded = 321,
    [pbr::OriginalName("MEMBER_RECORD_KIND_CONNECTOR_DEPARTMENT_DELETED")] ConnectorDepartmentDeleted = 322,
    /// <summary>
    /// 스케줄 
    /// </summary>
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCHEDULE_CREATED")] ScheduleCreated = 400,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCHEDULE_UPDATED")] ScheduleUpdated = 401,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCHEDULE_DELETED")] ScheduleDeleted = 402,
    /// <summary>
    /// 스케줄 씬
    /// </summary>
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCHEDULE_SCENE_CREATED")] ScheduleSceneCreated = 410,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCHEDULE_SCENE_UPDATED")] ScheduleSceneUpdated = 411,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCHEDULE_SCENE_DELETED")] ScheduleSceneDeleted = 412,
    /// <summary>
    /// 리소스 폴더
    /// </summary>
    [pbr::OriginalName("MEMBER_RECORD_KIND_RESOURCE_FOLDER_CREATED")] ResourceFolderCreated = 420,
    [pbr::OriginalName("MEMBER_RECORD_KIND_RESOURCE_FOLDER_UPDATED")] ResourceFolderUpdated = 421,
    [pbr::OriginalName("MEMBER_RECORD_KIND_RESOURCE_FOLDER_DELETED")] ResourceFolderDeleted = 422,
    /// <summary>
    /// 씬 폴더
    /// </summary>
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCENE_FOLDER_CREATED")] SceneFolderCreated = 430,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCENE_FOLDER_UPDATED")] SceneFolderUpdated = 431,
    [pbr::OriginalName("MEMBER_RECORD_KIND_SCENE_FOLDER_DELETED")] SceneFolderDeleted = 432,
  }

  /// <summary>
  /// 씬 컴포넌트 타입
  /// </summary>
  public enum SCENE_COMPONENTS_KIND {
    /// <summary>
    /// 
    /// </summary>
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_DEFAULT")] Default = 0,
    /// <summary>
    /// 
    /// </summary>
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_SCENE")] Scene = 1,
    /// <summary>
    /// 
    /// </summary>
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_COMMON")] Common = 2,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_BUTTON")] Button = 3,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_VIDEO")] Video = 4,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_IMAGE")] Image = 5,
    /// <summary>
    /// deprecated
    /// </summary>
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_SUBTITLE")] Subtitle = 6,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_PDF")] Pdf = 7,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_MAP")] Map = 8,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_WEATHER")] Weather = 9,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_CLOCK")] Clock = 10,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_WEB")] Web = 11,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_SLIDE_IMAGE")] SlideImage = 12,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_SLIDE_VIDEO")] SlideVideo = 13,
    [pbr::OriginalName("SCENE_COMPONENTS_KIND_TEXT")] Text = 14,
  }

  public enum SCENE_RESOURCE_KIND {
    [pbr::OriginalName("SCENE_RESOURCE_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("SCENE_RESOURCE_KIND_IMAGE")] Image = 1,
    [pbr::OriginalName("SCENE_RESOURCE_KIND_VIDEO")] Video = 2,
    [pbr::OriginalName("SCENE_RESOURCE_KIND_SUBTITLE")] Subtitle = 3,
    [pbr::OriginalName("SCENE_RESOURCE_KIND_PDF")] Pdf = 4,
    [pbr::OriginalName("SCENE_RESOURCE_KIND_MAP")] Map = 5,
    [pbr::OriginalName("SCENE_RESOURCE_KIND_SCENE")] Scene = 6,
    [pbr::OriginalName("SCENE_RESOURCE_KIND_SCREENCAPTURE")] Screencapture = 7,
  }

  public enum CONNECTOR_REGISTER_KIND {
    [pbr::OriginalName("CONNECTOR_REGISTER_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("CONNECTOR_REGISTER_KIND_REGISTERED")] Registered = 1,
    [pbr::OriginalName("CONNECTOR_REGISTER_KIND_COMFIRM")] Comfirm = 2,
    [pbr::OriginalName("CONNECTOR_REGISTER_KIND_DENY")] Deny = 3,
  }

  public enum DEPARTMENT_FOLDER_KIND {
    [pbr::OriginalName("DEPARTMENT_FOLDER_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("DEPARTMENT_FOLDER_KIND_RESOURCE")] Resource = 1,
    [pbr::OriginalName("DEPARTMENT_FOLDER_KIND_SCENE")] Scene = 2,
  }

  public enum TEXT_ALIGN_KIND {
    [pbr::OriginalName("TEXT_ALIGN_KIND_DEFAULT")] Default = 0,
    [pbr::OriginalName("TEXT_ALIGN_KIND_VERTICAL_START")] VerticalStart = 1,
    [pbr::OriginalName("TEXT_ALIGN_KIND_VERTICAL_CENTER")] VerticalCenter = 2,
    [pbr::OriginalName("TEXT_ALIGN_KIND_VERTICAL_END")] VerticalEnd = 3,
    [pbr::OriginalName("TEXT_ALIGN_KIND_HORIZONTAL_START")] HorizontalStart = 4,
    [pbr::OriginalName("TEXT_ALIGN_KIND_HORIZONTAL_CENTER")] HorizontalCenter = 5,
    [pbr::OriginalName("TEXT_ALIGN_KIND_HORIZONTAL_END")] HorizontalEnd = 6,
  }

  #endregion

  #region Messages
  public sealed partial class ScenePartCommon : pb::IMessage<ScenePartCommon> {
    private static readonly pb::MessageParser<ScenePartCommon> _parser = new pb::MessageParser<ScenePartCommon>(() => new ScenePartCommon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartCommon(ScenePartCommon other) : this() {
      id_ = other.id_;
      kind_ = other.kind_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      size_ = other.size_ != null ? other.size_.Clone() : null;
      background_ = other.background_;
      zIndex_ = other.zIndex_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartCommon Clone() {
      return new ScenePartCommon(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND kind_ = global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 4;
    private global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 5;
    private string background_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Background {
      get { return background_; }
      set {
        background_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zIndex" field.</summary>
    public const int ZIndexFieldNumber = 6;
    private int zIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZIndex {
      get { return zIndex_; }
      set {
        zIndex_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Kind != other.Kind) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if (Background != other.Background) return false;
      if (ZIndex != other.ZIndex) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Kind != global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND.Default) hash ^= Kind.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      if (Background.Length != 0) hash ^= Background.GetHashCode();
      if (ZIndex != 0) hash ^= ZIndex.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Kind != global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (size_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Size);
      }
      if (Background.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Background);
      }
      if (ZIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ZIndex);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Kind != global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (Background.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Background);
      }
      if (ZIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZIndex);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartCommon other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Kind != global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND.Default) {
        Kind = other.Kind;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          Size = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size();
        }
        Size.MergeFrom(other.Size);
      }
      if (other.Background.Length != 0) {
        Background = other.Background;
      }
      if (other.ZIndex != 0) {
        ZIndex = other.ZIndex;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Kind = (global::Saturn.Backends.Protocols.Common.SCENE_COMPONENTS_KIND) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (size_ == null) {
              Size = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size();
            }
            input.ReadMessage(Size);
            break;
          }
          case 42: {
            Background = input.ReadString();
            break;
          }
          case 48: {
            ZIndex = input.ReadInt32();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScenePartCommon message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Position : pb::IMessage<Position> {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.ScenePartCommon.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Position() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Position(Position other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Position Clone() {
          return new Position(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private long x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private long y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Position);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Position other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0L) hash ^= X.GetHashCode();
          if (Y != 0L) hash ^= Y.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(X);
          }
          if (Y != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(X);
          }
          if (Y != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Y);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Position other) {
          if (other == null) {
            return;
          }
          if (other.X != 0L) {
            X = other.X;
          }
          if (other.Y != 0L) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                X = input.ReadInt64();
                break;
              }
              case 16: {
                Y = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Size : pb::IMessage<Size> {
        private static readonly pb::MessageParser<Size> _parser = new pb::MessageParser<Size>(() => new Size());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Size> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.ScenePartCommon.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Size() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Size(Size other) : this() {
          width_ = other.width_;
          height_ = other.height_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Size Clone() {
          return new Size(this);
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 1;
        private long width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 2;
        private long height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Size);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Size other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Width != 0L) hash ^= Width.GetHashCode();
          if (Height != 0L) hash ^= Height.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Width != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Width);
          }
          if (Height != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Width != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
          }
          if (Height != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Size other) {
          if (other == null) {
            return;
          }
          if (other.Width != 0L) {
            Width = other.Width;
          }
          if (other.Height != 0L) {
            Height = other.Height;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Width = input.ReadInt64();
                break;
              }
              case 16: {
                Height = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ScenePart : pb::IMessage<ScenePart> {
    private static readonly pb::MessageParser<ScenePart> _parser = new pb::MessageParser<ScenePart>(() => new ScenePart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePart(ScenePart other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      button_ = other.button_ != null ? other.button_.Clone() : null;
      image_ = other.image_ != null ? other.image_.Clone() : null;
      video_ = other.video_ != null ? other.video_.Clone() : null;
      document_ = other.document_ != null ? other.document_.Clone() : null;
      subtitle_ = other.subtitle_ != null ? other.subtitle_.Clone() : null;
      coordinate_ = other.coordinate_ != null ? other.coordinate_.Clone() : null;
      weather_ = other.weather_ != null ? other.weather_.Clone() : null;
      web_ = other.web_ != null ? other.web_.Clone() : null;
      clock_ = other.clock_ != null ? other.clock_.Clone() : null;
      slideImage_ = other.slideImage_ != null ? other.slideImage_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePart Clone() {
      return new ScenePart(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.ScenePartCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.ScenePartButton button_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartButton Button {
      get { return button_; }
      set {
        button_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.ScenePartImage image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartImage Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "video" field.</summary>
    public const int VideoFieldNumber = 4;
    private global::Saturn.Backends.Protocols.Common.ScenePartVideo video_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartVideo Video {
      get { return video_; }
      set {
        video_ = value;
      }
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 5;
    private global::Saturn.Backends.Protocols.Common.ScenePartDocument document_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartDocument Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "subtitle" field.</summary>
    public const int SubtitleFieldNumber = 6;
    private global::Saturn.Backends.Protocols.Common.ScenePartSubtitle subtitle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartSubtitle Subtitle {
      get { return subtitle_; }
      set {
        subtitle_ = value;
      }
    }

    /// <summary>Field number for the "coordinate" field.</summary>
    public const int CoordinateFieldNumber = 7;
    private global::Saturn.Backends.Protocols.Common.ScenePartCoordinate coordinate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCoordinate Coordinate {
      get { return coordinate_; }
      set {
        coordinate_ = value;
      }
    }

    /// <summary>Field number for the "weather" field.</summary>
    public const int WeatherFieldNumber = 8;
    private global::Saturn.Backends.Protocols.Common.ScenePartWeather weather_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartWeather Weather {
      get { return weather_; }
      set {
        weather_ = value;
      }
    }

    /// <summary>Field number for the "web" field.</summary>
    public const int WebFieldNumber = 9;
    private global::Saturn.Backends.Protocols.Common.ScenePartWeb web_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartWeb Web {
      get { return web_; }
      set {
        web_ = value;
      }
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 10;
    private global::Saturn.Backends.Protocols.Common.ScenePartClock clock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartClock Clock {
      get { return clock_; }
      set {
        clock_ = value;
      }
    }

    /// <summary>Field number for the "slideImage" field.</summary>
    public const int SlideImageFieldNumber = 11;
    private global::Saturn.Backends.Protocols.Common.ScenePartSlideImage slideImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartSlideImage SlideImage {
      get { return slideImage_; }
      set {
        slideImage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(Button, other.Button)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Video, other.Video)) return false;
      if (!object.Equals(Document, other.Document)) return false;
      if (!object.Equals(Subtitle, other.Subtitle)) return false;
      if (!object.Equals(Coordinate, other.Coordinate)) return false;
      if (!object.Equals(Weather, other.Weather)) return false;
      if (!object.Equals(Web, other.Web)) return false;
      if (!object.Equals(Clock, other.Clock)) return false;
      if (!object.Equals(SlideImage, other.SlideImage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (button_ != null) hash ^= Button.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (video_ != null) hash ^= Video.GetHashCode();
      if (document_ != null) hash ^= Document.GetHashCode();
      if (subtitle_ != null) hash ^= Subtitle.GetHashCode();
      if (coordinate_ != null) hash ^= Coordinate.GetHashCode();
      if (weather_ != null) hash ^= Weather.GetHashCode();
      if (web_ != null) hash ^= Web.GetHashCode();
      if (clock_ != null) hash ^= Clock.GetHashCode();
      if (slideImage_ != null) hash ^= SlideImage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (button_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Button);
      }
      if (image_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Image);
      }
      if (video_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Video);
      }
      if (document_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Document);
      }
      if (subtitle_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Subtitle);
      }
      if (coordinate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Coordinate);
      }
      if (weather_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Weather);
      }
      if (web_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Web);
      }
      if (clock_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Clock);
      }
      if (slideImage_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SlideImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (button_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Button);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (video_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Video);
      }
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (subtitle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Subtitle);
      }
      if (coordinate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coordinate);
      }
      if (weather_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Weather);
      }
      if (web_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Web);
      }
      if (clock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clock);
      }
      if (slideImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePart other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::Saturn.Backends.Protocols.Common.ScenePartCommon();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.button_ != null) {
        if (button_ == null) {
          Button = new global::Saturn.Backends.Protocols.Common.ScenePartButton();
        }
        Button.MergeFrom(other.Button);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Saturn.Backends.Protocols.Common.ScenePartImage();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.video_ != null) {
        if (video_ == null) {
          Video = new global::Saturn.Backends.Protocols.Common.ScenePartVideo();
        }
        Video.MergeFrom(other.Video);
      }
      if (other.document_ != null) {
        if (document_ == null) {
          Document = new global::Saturn.Backends.Protocols.Common.ScenePartDocument();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.subtitle_ != null) {
        if (subtitle_ == null) {
          Subtitle = new global::Saturn.Backends.Protocols.Common.ScenePartSubtitle();
        }
        Subtitle.MergeFrom(other.Subtitle);
      }
      if (other.coordinate_ != null) {
        if (coordinate_ == null) {
          Coordinate = new global::Saturn.Backends.Protocols.Common.ScenePartCoordinate();
        }
        Coordinate.MergeFrom(other.Coordinate);
      }
      if (other.weather_ != null) {
        if (weather_ == null) {
          Weather = new global::Saturn.Backends.Protocols.Common.ScenePartWeather();
        }
        Weather.MergeFrom(other.Weather);
      }
      if (other.web_ != null) {
        if (web_ == null) {
          Web = new global::Saturn.Backends.Protocols.Common.ScenePartWeb();
        }
        Web.MergeFrom(other.Web);
      }
      if (other.clock_ != null) {
        if (clock_ == null) {
          Clock = new global::Saturn.Backends.Protocols.Common.ScenePartClock();
        }
        Clock.MergeFrom(other.Clock);
      }
      if (other.slideImage_ != null) {
        if (slideImage_ == null) {
          SlideImage = new global::Saturn.Backends.Protocols.Common.ScenePartSlideImage();
        }
        SlideImage.MergeFrom(other.SlideImage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::Saturn.Backends.Protocols.Common.ScenePartCommon();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            if (button_ == null) {
              Button = new global::Saturn.Backends.Protocols.Common.ScenePartButton();
            }
            input.ReadMessage(Button);
            break;
          }
          case 26: {
            if (image_ == null) {
              Image = new global::Saturn.Backends.Protocols.Common.ScenePartImage();
            }
            input.ReadMessage(Image);
            break;
          }
          case 34: {
            if (video_ == null) {
              Video = new global::Saturn.Backends.Protocols.Common.ScenePartVideo();
            }
            input.ReadMessage(Video);
            break;
          }
          case 42: {
            if (document_ == null) {
              Document = new global::Saturn.Backends.Protocols.Common.ScenePartDocument();
            }
            input.ReadMessage(Document);
            break;
          }
          case 50: {
            if (subtitle_ == null) {
              Subtitle = new global::Saturn.Backends.Protocols.Common.ScenePartSubtitle();
            }
            input.ReadMessage(Subtitle);
            break;
          }
          case 58: {
            if (coordinate_ == null) {
              Coordinate = new global::Saturn.Backends.Protocols.Common.ScenePartCoordinate();
            }
            input.ReadMessage(Coordinate);
            break;
          }
          case 66: {
            if (weather_ == null) {
              Weather = new global::Saturn.Backends.Protocols.Common.ScenePartWeather();
            }
            input.ReadMessage(Weather);
            break;
          }
          case 74: {
            if (web_ == null) {
              Web = new global::Saturn.Backends.Protocols.Common.ScenePartWeb();
            }
            input.ReadMessage(Web);
            break;
          }
          case 82: {
            if (clock_ == null) {
              Clock = new global::Saturn.Backends.Protocols.Common.ScenePartClock();
            }
            input.ReadMessage(Clock);
            break;
          }
          case 90: {
            if (slideImage_ == null) {
              SlideImage = new global::Saturn.Backends.Protocols.Common.ScenePartSlideImage();
            }
            input.ReadMessage(SlideImage);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartText : pb::IMessage<ScenePartText> {
    private static readonly pb::MessageParser<ScenePartText> _parser = new pb::MessageParser<ScenePartText>(() => new ScenePartText());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartText(ScenePartText other) : this() {
      text_ = other.text_;
      textColor_ = other.textColor_;
      textSize_ = other.textSize_;
      bold_ = other.bold_;
      italic_ = other.italic_;
      verticalKind_ = other.verticalKind_;
      horizontalKind_ = other.horizontalKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartText Clone() {
      return new ScenePartText(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "textColor" field.</summary>
    public const int TextColorFieldNumber = 2;
    private string textColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextColor {
      get { return textColor_; }
      set {
        textColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "textSize" field.</summary>
    public const int TextSizeFieldNumber = 3;
    private int textSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TextSize {
      get { return textSize_; }
      set {
        textSize_ = value;
      }
    }

    /// <summary>Field number for the "bold" field.</summary>
    public const int BoldFieldNumber = 4;
    private bool bold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bold {
      get { return bold_; }
      set {
        bold_ = value;
      }
    }

    /// <summary>Field number for the "italic" field.</summary>
    public const int ItalicFieldNumber = 5;
    private bool italic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Italic {
      get { return italic_; }
      set {
        italic_ = value;
      }
    }

    /// <summary>Field number for the "verticalKind" field.</summary>
    public const int VerticalKindFieldNumber = 6;
    private global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND verticalKind_ = global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND VerticalKind {
      get { return verticalKind_; }
      set {
        verticalKind_ = value;
      }
    }

    /// <summary>Field number for the "horizontalKind" field.</summary>
    public const int HorizontalKindFieldNumber = 7;
    private global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND horizontalKind_ = global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND HorizontalKind {
      get { return horizontalKind_; }
      set {
        horizontalKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (TextColor != other.TextColor) return false;
      if (TextSize != other.TextSize) return false;
      if (Bold != other.Bold) return false;
      if (Italic != other.Italic) return false;
      if (VerticalKind != other.VerticalKind) return false;
      if (HorizontalKind != other.HorizontalKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (TextColor.Length != 0) hash ^= TextColor.GetHashCode();
      if (TextSize != 0) hash ^= TextSize.GetHashCode();
      if (Bold != false) hash ^= Bold.GetHashCode();
      if (Italic != false) hash ^= Italic.GetHashCode();
      if (VerticalKind != global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default) hash ^= VerticalKind.GetHashCode();
      if (HorizontalKind != global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default) hash ^= HorizontalKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (TextColor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TextColor);
      }
      if (TextSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TextSize);
      }
      if (Bold != false) {
        output.WriteRawTag(32);
        output.WriteBool(Bold);
      }
      if (Italic != false) {
        output.WriteRawTag(40);
        output.WriteBool(Italic);
      }
      if (VerticalKind != global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default) {
        output.WriteRawTag(48);
        output.WriteEnum((int) VerticalKind);
      }
      if (HorizontalKind != global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default) {
        output.WriteRawTag(56);
        output.WriteEnum((int) HorizontalKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (TextColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextColor);
      }
      if (TextSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TextSize);
      }
      if (Bold != false) {
        size += 1 + 1;
      }
      if (Italic != false) {
        size += 1 + 1;
      }
      if (VerticalKind != global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VerticalKind);
      }
      if (HorizontalKind != global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HorizontalKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartText other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.TextColor.Length != 0) {
        TextColor = other.TextColor;
      }
      if (other.TextSize != 0) {
        TextSize = other.TextSize;
      }
      if (other.Bold != false) {
        Bold = other.Bold;
      }
      if (other.Italic != false) {
        Italic = other.Italic;
      }
      if (other.VerticalKind != global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default) {
        VerticalKind = other.VerticalKind;
      }
      if (other.HorizontalKind != global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND.Default) {
        HorizontalKind = other.HorizontalKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 18: {
            TextColor = input.ReadString();
            break;
          }
          case 24: {
            TextSize = input.ReadInt32();
            break;
          }
          case 32: {
            Bold = input.ReadBool();
            break;
          }
          case 40: {
            Italic = input.ReadBool();
            break;
          }
          case 48: {
            VerticalKind = (global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND) input.ReadEnum();
            break;
          }
          case 56: {
            HorizontalKind = (global::Saturn.Backends.Protocols.Common.TEXT_ALIGN_KIND) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartImage : pb::IMessage<ScenePartImage> {
    private static readonly pb::MessageParser<ScenePartImage> _parser = new pb::MessageParser<ScenePartImage>(() => new ScenePartImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartImage(ScenePartImage other) : this() {
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      text_ = other.text_ != null ? other.text_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartImage Clone() {
      return new ScenePartImage(this);
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.ScenePartText text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resource, other.Resource)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resource_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resource);
      }
      if (text_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartImage other) {
      if (other == null) {
        return;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
        }
        Text.MergeFrom(other.Text);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 18: {
            if (text_ == null) {
              Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
            }
            input.ReadMessage(Text);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartButton : pb::IMessage<ScenePartButton> {
    private static readonly pb::MessageParser<ScenePartButton> _parser = new pb::MessageParser<ScenePartButton>(() => new ScenePartButton());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartButton> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartButton() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartButton(ScenePartButton other) : this() {
      text_ = other.text_ != null ? other.text_.Clone() : null;
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      sceneId_ = other.sceneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartButton Clone() {
      return new ScenePartButton(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.ScenePartText text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 3;
    private long sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartButton);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartButton other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (SceneId != other.SceneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (SceneId != 0L) hash ^= SceneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (resource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Resource);
      }
      if (SceneId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SceneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (SceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartButton other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.SceneId != 0L) {
        SceneId = other.SceneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (text_ == null) {
              Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
            }
            input.ReadMessage(Text);
            break;
          }
          case 18: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 24: {
            SceneId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartVideo : pb::IMessage<ScenePartVideo> {
    private static readonly pb::MessageParser<ScenePartVideo> _parser = new pb::MessageParser<ScenePartVideo>(() => new ScenePartVideo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartVideo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartVideo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartVideo(ScenePartVideo other) : this() {
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      repeated_ = other.repeated_;
      played_ = other.played_;
      sceneId_ = other.sceneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartVideo Clone() {
      return new ScenePartVideo(this);
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 2;
    private bool repeated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Repeated {
      get { return repeated_; }
      set {
        repeated_ = value;
      }
    }

    /// <summary>Field number for the "played" field.</summary>
    public const int PlayedFieldNumber = 3;
    private bool played_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Played {
      get { return played_; }
      set {
        played_ = value;
      }
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 4;
    private long sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartVideo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartVideo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resource, other.Resource)) return false;
      if (Repeated != other.Repeated) return false;
      if (Played != other.Played) return false;
      if (SceneId != other.SceneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (Repeated != false) hash ^= Repeated.GetHashCode();
      if (Played != false) hash ^= Played.GetHashCode();
      if (SceneId != 0L) hash ^= SceneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resource_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resource);
      }
      if (Repeated != false) {
        output.WriteRawTag(16);
        output.WriteBool(Repeated);
      }
      if (Played != false) {
        output.WriteRawTag(24);
        output.WriteBool(Played);
      }
      if (SceneId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SceneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (Repeated != false) {
        size += 1 + 1;
      }
      if (Played != false) {
        size += 1 + 1;
      }
      if (SceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartVideo other) {
      if (other == null) {
        return;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.Repeated != false) {
        Repeated = other.Repeated;
      }
      if (other.Played != false) {
        Played = other.Played;
      }
      if (other.SceneId != 0L) {
        SceneId = other.SceneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 16: {
            Repeated = input.ReadBool();
            break;
          }
          case 24: {
            Played = input.ReadBool();
            break;
          }
          case 32: {
            SceneId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartDocument : pb::IMessage<ScenePartDocument> {
    private static readonly pb::MessageParser<ScenePartDocument> _parser = new pb::MessageParser<ScenePartDocument>(() => new ScenePartDocument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartDocument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartDocument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartDocument(ScenePartDocument other) : this() {
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartDocument Clone() {
      return new ScenePartDocument(this);
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartDocument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartDocument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resource, other.Resource)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resource_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartDocument other) {
      if (other == null) {
        return;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartSubtitle : pb::IMessage<ScenePartSubtitle> {
    private static readonly pb::MessageParser<ScenePartSubtitle> _parser = new pb::MessageParser<ScenePartSubtitle>(() => new ScenePartSubtitle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartSubtitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartSubtitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartSubtitle(ScenePartSubtitle other) : this() {
      text_ = other.text_ != null ? other.text_.Clone() : null;
      seconds_ = other.seconds_;
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      repeated_ = other.repeated_;
      animationKind_ = other.animationKind_;
      rss_ = other.rss_ != null ? other.rss_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartSubtitle Clone() {
      return new ScenePartSubtitle(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.ScenePartText text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 2;
    private int seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 4;
    private bool repeated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Repeated {
      get { return repeated_; }
      set {
        repeated_ = value;
      }
    }

    /// <summary>Field number for the "animationKind" field.</summary>
    public const int AnimationKindFieldNumber = 5;
    private global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND animationKind_ = global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND AnimationKind {
      get { return animationKind_; }
      set {
        animationKind_ = value;
      }
    }

    /// <summary>Field number for the "rss" field.</summary>
    public const int RssFieldNumber = 6;
    private global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.Rss rss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.Rss Rss {
      get { return rss_; }
      set {
        rss_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartSubtitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartSubtitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (Seconds != other.Seconds) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (Repeated != other.Repeated) return false;
      if (AnimationKind != other.AnimationKind) return false;
      if (!object.Equals(Rss, other.Rss)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (Seconds != 0) hash ^= Seconds.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (Repeated != false) hash ^= Repeated.GetHashCode();
      if (AnimationKind != global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND.Default) hash ^= AnimationKind.GetHashCode();
      if (rss_ != null) hash ^= Rss.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (Seconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seconds);
      }
      if (resource_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Resource);
      }
      if (Repeated != false) {
        output.WriteRawTag(32);
        output.WriteBool(Repeated);
      }
      if (AnimationKind != global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND.Default) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AnimationKind);
      }
      if (rss_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Rss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (Seconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (Repeated != false) {
        size += 1 + 1;
      }
      if (AnimationKind != global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnimationKind);
      }
      if (rss_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rss);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartSubtitle other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.Seconds != 0) {
        Seconds = other.Seconds;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.Repeated != false) {
        Repeated = other.Repeated;
      }
      if (other.AnimationKind != global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND.Default) {
        AnimationKind = other.AnimationKind;
      }
      if (other.rss_ != null) {
        if (rss_ == null) {
          Rss = new global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.Rss();
        }
        Rss.MergeFrom(other.Rss);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (text_ == null) {
              Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
            }
            input.ReadMessage(Text);
            break;
          }
          case 16: {
            Seconds = input.ReadInt32();
            break;
          }
          case 26: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 32: {
            Repeated = input.ReadBool();
            break;
          }
          case 40: {
            AnimationKind = (global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.SUBTITLE_ANIMATION_KIND) input.ReadEnum();
            break;
          }
          case 50: {
            if (rss_ == null) {
              Rss = new global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.Rss();
            }
            input.ReadMessage(Rss);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScenePartSubtitle message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SUBTITLE_ANIMATION_KIND {
        [pbr::OriginalName("SUBTITLE_ANIMATION_KIND_DEFAULT")] Default = 0,
        [pbr::OriginalName("SUBTITLE_ANIMATION_KIND_LEFT_TO_RIGHT")] LeftToRight = 1,
        [pbr::OriginalName("SUBTITLE_ANIMATION_KIND_RIGHT_TO_LEFT")] RightToLeft = 2,
        [pbr::OriginalName("SUBTITLE_ANIMATION_KIND_WRAP")] Wrap = 3,
      }

      public enum RSS_CONTENT_KIND {
        [pbr::OriginalName("RSS_CONTENT_KIND_DEFAULT")] Default = 0,
        [pbr::OriginalName("RSS_CONTENT_KIND_TITLE")] Title = 1,
        [pbr::OriginalName("RSS_CONTENT_KIND_DESCRIPTION")] Description = 2,
      }

      public sealed partial class Rss : pb::IMessage<Rss> {
        private static readonly pb::MessageParser<Rss> _parser = new pb::MessageParser<Rss>(() => new Rss());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Rss> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rss() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rss(Rss other) : this() {
          address_ = other.address_;
          contentKinds_ = other.contentKinds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rss Clone() {
          return new Rss(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private string address_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "contentKinds" field.</summary>
        public const int ContentKindsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.RSS_CONTENT_KIND> _repeated_contentKinds_codec
            = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.RSS_CONTENT_KIND) x);
        private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.RSS_CONTENT_KIND> contentKinds_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.RSS_CONTENT_KIND>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePartSubtitle.Types.RSS_CONTENT_KIND> ContentKinds {
          get { return contentKinds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Rss);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Rss other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if(!contentKinds_.Equals(other.contentKinds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          hash ^= contentKinds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Address);
          }
          contentKinds_.WriteTo(output, _repeated_contentKinds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
          }
          size += contentKinds_.CalculateSize(_repeated_contentKinds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Rss other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          contentKinds_.Add(other.contentKinds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Address = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                contentKinds_.AddEntriesFrom(input, _repeated_contentKinds_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ScenePartCoordinate : pb::IMessage<ScenePartCoordinate> {
    private static readonly pb::MessageParser<ScenePartCoordinate> _parser = new pb::MessageParser<ScenePartCoordinate>(() => new ScenePartCoordinate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartCoordinate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartCoordinate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartCoordinate(ScenePartCoordinate other) : this() {
      text_ = other.text_ != null ? other.text_.Clone() : null;
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      coordinateRresource_ = other.coordinateRresource_ != null ? other.coordinateRresource_.Clone() : null;
      sourceResource_ = other.sourceResource_ != null ? other.sourceResource_.Clone() : null;
      sourceSize_ = other.sourceSize_ != null ? other.sourceSize_.Clone() : null;
      sourcePosition_ = other.sourcePosition_ != null ? other.sourcePosition_.Clone() : null;
      destinationResource_ = other.destinationResource_ != null ? other.destinationResource_.Clone() : null;
      destinationSize_ = other.destinationSize_ != null ? other.destinationSize_.Clone() : null;
      destinationPosition_ = other.destinationPosition_ != null ? other.destinationPosition_.Clone() : null;
      scenePartImageId_ = other.scenePartImageId_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartCoordinate Clone() {
      return new ScenePartCoordinate(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.ScenePartText text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "coordinateRresource" field.</summary>
    public const int CoordinateRresourceFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.Resource coordinateRresource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource CoordinateRresource {
      get { return coordinateRresource_; }
      set {
        coordinateRresource_ = value;
      }
    }

    /// <summary>Field number for the "sourceResource" field.</summary>
    public const int SourceResourceFieldNumber = 4;
    private global::Saturn.Backends.Protocols.Common.Resource sourceResource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource SourceResource {
      get { return sourceResource_; }
      set {
        sourceResource_ = value;
      }
    }

    /// <summary>Field number for the "sourceSize" field.</summary>
    public const int SourceSizeFieldNumber = 5;
    private global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size sourceSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size SourceSize {
      get { return sourceSize_; }
      set {
        sourceSize_ = value;
      }
    }

    /// <summary>Field number for the "sourcePosition" field.</summary>
    public const int SourcePositionFieldNumber = 6;
    private global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position sourcePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position SourcePosition {
      get { return sourcePosition_; }
      set {
        sourcePosition_ = value;
      }
    }

    /// <summary>Field number for the "destinationResource" field.</summary>
    public const int DestinationResourceFieldNumber = 7;
    private global::Saturn.Backends.Protocols.Common.Resource destinationResource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource DestinationResource {
      get { return destinationResource_; }
      set {
        destinationResource_ = value;
      }
    }

    /// <summary>Field number for the "destinationSize" field.</summary>
    public const int DestinationSizeFieldNumber = 8;
    private global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size destinationSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size DestinationSize {
      get { return destinationSize_; }
      set {
        destinationSize_ = value;
      }
    }

    /// <summary>Field number for the "destinationPosition" field.</summary>
    public const int DestinationPositionFieldNumber = 9;
    private global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position destinationPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position DestinationPosition {
      get { return destinationPosition_; }
      set {
        destinationPosition_ = value;
      }
    }

    /// <summary>Field number for the "scenePartImageId" field.</summary>
    public const int ScenePartImageIdFieldNumber = 10;
    private string scenePartImageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScenePartImageId {
      get { return scenePartImageId_; }
      set {
        scenePartImageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 11;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartCoordinate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartCoordinate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (!object.Equals(CoordinateRresource, other.CoordinateRresource)) return false;
      if (!object.Equals(SourceResource, other.SourceResource)) return false;
      if (!object.Equals(SourceSize, other.SourceSize)) return false;
      if (!object.Equals(SourcePosition, other.SourcePosition)) return false;
      if (!object.Equals(DestinationResource, other.DestinationResource)) return false;
      if (!object.Equals(DestinationSize, other.DestinationSize)) return false;
      if (!object.Equals(DestinationPosition, other.DestinationPosition)) return false;
      if (ScenePartImageId != other.ScenePartImageId) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (coordinateRresource_ != null) hash ^= CoordinateRresource.GetHashCode();
      if (sourceResource_ != null) hash ^= SourceResource.GetHashCode();
      if (sourceSize_ != null) hash ^= SourceSize.GetHashCode();
      if (sourcePosition_ != null) hash ^= SourcePosition.GetHashCode();
      if (destinationResource_ != null) hash ^= DestinationResource.GetHashCode();
      if (destinationSize_ != null) hash ^= DestinationSize.GetHashCode();
      if (destinationPosition_ != null) hash ^= DestinationPosition.GetHashCode();
      if (ScenePartImageId.Length != 0) hash ^= ScenePartImageId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (resource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Resource);
      }
      if (coordinateRresource_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CoordinateRresource);
      }
      if (sourceResource_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SourceResource);
      }
      if (sourceSize_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SourceSize);
      }
      if (sourcePosition_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SourcePosition);
      }
      if (destinationResource_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DestinationResource);
      }
      if (destinationSize_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DestinationSize);
      }
      if (destinationPosition_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DestinationPosition);
      }
      if (ScenePartImageId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ScenePartImageId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (coordinateRresource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CoordinateRresource);
      }
      if (sourceResource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceResource);
      }
      if (sourceSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceSize);
      }
      if (sourcePosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourcePosition);
      }
      if (destinationResource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationResource);
      }
      if (destinationSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationSize);
      }
      if (destinationPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationPosition);
      }
      if (ScenePartImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScenePartImageId);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartCoordinate other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.coordinateRresource_ != null) {
        if (coordinateRresource_ == null) {
          CoordinateRresource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        CoordinateRresource.MergeFrom(other.CoordinateRresource);
      }
      if (other.sourceResource_ != null) {
        if (sourceResource_ == null) {
          SourceResource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        SourceResource.MergeFrom(other.SourceResource);
      }
      if (other.sourceSize_ != null) {
        if (sourceSize_ == null) {
          SourceSize = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size();
        }
        SourceSize.MergeFrom(other.SourceSize);
      }
      if (other.sourcePosition_ != null) {
        if (sourcePosition_ == null) {
          SourcePosition = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position();
        }
        SourcePosition.MergeFrom(other.SourcePosition);
      }
      if (other.destinationResource_ != null) {
        if (destinationResource_ == null) {
          DestinationResource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        DestinationResource.MergeFrom(other.DestinationResource);
      }
      if (other.destinationSize_ != null) {
        if (destinationSize_ == null) {
          DestinationSize = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size();
        }
        DestinationSize.MergeFrom(other.DestinationSize);
      }
      if (other.destinationPosition_ != null) {
        if (destinationPosition_ == null) {
          DestinationPosition = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position();
        }
        DestinationPosition.MergeFrom(other.DestinationPosition);
      }
      if (other.ScenePartImageId.Length != 0) {
        ScenePartImageId = other.ScenePartImageId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (text_ == null) {
              Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
            }
            input.ReadMessage(Text);
            break;
          }
          case 18: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 26: {
            if (coordinateRresource_ == null) {
              CoordinateRresource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(CoordinateRresource);
            break;
          }
          case 34: {
            if (sourceResource_ == null) {
              SourceResource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(SourceResource);
            break;
          }
          case 42: {
            if (sourceSize_ == null) {
              SourceSize = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size();
            }
            input.ReadMessage(SourceSize);
            break;
          }
          case 50: {
            if (sourcePosition_ == null) {
              SourcePosition = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position();
            }
            input.ReadMessage(SourcePosition);
            break;
          }
          case 58: {
            if (destinationResource_ == null) {
              DestinationResource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(DestinationResource);
            break;
          }
          case 66: {
            if (destinationSize_ == null) {
              DestinationSize = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Size();
            }
            input.ReadMessage(DestinationSize);
            break;
          }
          case 74: {
            if (destinationPosition_ == null) {
              DestinationPosition = new global::Saturn.Backends.Protocols.Common.ScenePartCommon.Types.Position();
            }
            input.ReadMessage(DestinationPosition);
            break;
          }
          case 82: {
            ScenePartImageId = input.ReadString();
            break;
          }
          case 88: {
            GroupId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartWeather : pb::IMessage<ScenePartWeather> {
    private static readonly pb::MessageParser<ScenePartWeather> _parser = new pb::MessageParser<ScenePartWeather>(() => new ScenePartWeather());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartWeather> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartWeather() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartWeather(ScenePartWeather other) : this() {
      text_ = other.text_ != null ? other.text_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartWeather Clone() {
      return new ScenePartWeather(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.ScenePartText text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartWeather);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartWeather other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartWeather other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
        }
        Text.MergeFrom(other.Text);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (text_ == null) {
              Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
            }
            input.ReadMessage(Text);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartClock : pb::IMessage<ScenePartClock> {
    private static readonly pb::MessageParser<ScenePartClock> _parser = new pb::MessageParser<ScenePartClock>(() => new ScenePartClock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartClock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartClock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartClock(ScenePartClock other) : this() {
      text_ = other.text_ != null ? other.text_.Clone() : null;
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      dateText_ = other.dateText_ != null ? other.dateText_.Clone() : null;
      dateFormat_ = other.dateFormat_;
      textFormat_ = other.textFormat_;
      useDate_ = other.useDate_;
      useWeek_ = other.useWeek_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartClock Clone() {
      return new ScenePartClock(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.ScenePartText text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "dateText" field.</summary>
    public const int DateTextFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.ScenePartText dateText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartText DateText {
      get { return dateText_; }
      set {
        dateText_ = value;
      }
    }

    /// <summary>Field number for the "dateFormat" field.</summary>
    public const int DateFormatFieldNumber = 4;
    private string dateFormat_ = "";
    /// <summary>
    /// 날짜 포맷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateFormat {
      get { return dateFormat_; }
      set {
        dateFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "textFormat" field.</summary>
    public const int TextFormatFieldNumber = 5;
    private string textFormat_ = "";
    /// <summary>
    /// 시간 포맷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextFormat {
      get { return textFormat_; }
      set {
        textFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "useDate" field.</summary>
    public const int UseDateFieldNumber = 6;
    private bool useDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseDate {
      get { return useDate_; }
      set {
        useDate_ = value;
      }
    }

    /// <summary>Field number for the "useWeek" field.</summary>
    public const int UseWeekFieldNumber = 7;
    private bool useWeek_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseWeek {
      get { return useWeek_; }
      set {
        useWeek_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartClock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartClock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (!object.Equals(DateText, other.DateText)) return false;
      if (DateFormat != other.DateFormat) return false;
      if (TextFormat != other.TextFormat) return false;
      if (UseDate != other.UseDate) return false;
      if (UseWeek != other.UseWeek) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (dateText_ != null) hash ^= DateText.GetHashCode();
      if (DateFormat.Length != 0) hash ^= DateFormat.GetHashCode();
      if (TextFormat.Length != 0) hash ^= TextFormat.GetHashCode();
      if (UseDate != false) hash ^= UseDate.GetHashCode();
      if (UseWeek != false) hash ^= UseWeek.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (resource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Resource);
      }
      if (dateText_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DateText);
      }
      if (DateFormat.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DateFormat);
      }
      if (TextFormat.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TextFormat);
      }
      if (UseDate != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseDate);
      }
      if (UseWeek != false) {
        output.WriteRawTag(56);
        output.WriteBool(UseWeek);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (dateText_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateText);
      }
      if (DateFormat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateFormat);
      }
      if (TextFormat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextFormat);
      }
      if (UseDate != false) {
        size += 1 + 1;
      }
      if (UseWeek != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartClock other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.dateText_ != null) {
        if (dateText_ == null) {
          DateText = new global::Saturn.Backends.Protocols.Common.ScenePartText();
        }
        DateText.MergeFrom(other.DateText);
      }
      if (other.DateFormat.Length != 0) {
        DateFormat = other.DateFormat;
      }
      if (other.TextFormat.Length != 0) {
        TextFormat = other.TextFormat;
      }
      if (other.UseDate != false) {
        UseDate = other.UseDate;
      }
      if (other.UseWeek != false) {
        UseWeek = other.UseWeek;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (text_ == null) {
              Text = new global::Saturn.Backends.Protocols.Common.ScenePartText();
            }
            input.ReadMessage(Text);
            break;
          }
          case 18: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 26: {
            if (dateText_ == null) {
              DateText = new global::Saturn.Backends.Protocols.Common.ScenePartText();
            }
            input.ReadMessage(DateText);
            break;
          }
          case 34: {
            DateFormat = input.ReadString();
            break;
          }
          case 42: {
            TextFormat = input.ReadString();
            break;
          }
          case 48: {
            UseDate = input.ReadBool();
            break;
          }
          case 56: {
            UseWeek = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartWeb : pb::IMessage<ScenePartWeb> {
    private static readonly pb::MessageParser<ScenePartWeb> _parser = new pb::MessageParser<ScenePartWeb>(() => new ScenePartWeb());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartWeb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartWeb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartWeb(ScenePartWeb other) : this() {
      url_ = other.url_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartWeb Clone() {
      return new ScenePartWeb(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartWeb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartWeb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartWeb other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScenePartSlideImage : pb::IMessage<ScenePartSlideImage> {
    private static readonly pb::MessageParser<ScenePartSlideImage> _parser = new pb::MessageParser<ScenePartSlideImage>(() => new ScenePartSlideImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePartSlideImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartSlideImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartSlideImage(ScenePartSlideImage other) : this() {
      slideImages_ = other.slideImages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePartSlideImage Clone() {
      return new ScenePartSlideImage(this);
    }

    /// <summary>Field number for the "slideImages" field.</summary>
    public const int SlideImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Types.SlideImage> _repeated_slideImages_codec
        = pb::FieldCodec.ForMessage(10, global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Types.SlideImage.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Types.SlideImage> slideImages_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Types.SlideImage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Types.SlideImage> SlideImages {
      get { return slideImages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePartSlideImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePartSlideImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!slideImages_.Equals(other.slideImages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= slideImages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      slideImages_.WriteTo(output, _repeated_slideImages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slideImages_.CalculateSize(_repeated_slideImages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePartSlideImage other) {
      if (other == null) {
        return;
      }
      slideImages_.Add(other.slideImages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            slideImages_.AddEntriesFrom(input, _repeated_slideImages_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScenePartSlideImage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SlideImage : pb::IMessage<SlideImage> {
        private static readonly pb::MessageParser<SlideImage> _parser = new pb::MessageParser<SlideImage>(() => new SlideImage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SlideImage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.ScenePartSlideImage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SlideImage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SlideImage(SlideImage other) : this() {
          resource_ = other.resource_ != null ? other.resource_.Clone() : null;
          seconds_ = other.seconds_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SlideImage Clone() {
          return new SlideImage(this);
        }

        /// <summary>Field number for the "resource" field.</summary>
        public const int ResourceFieldNumber = 1;
        private global::Saturn.Backends.Protocols.Common.Resource resource_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.Resource Resource {
          get { return resource_; }
          set {
            resource_ = value;
          }
        }

        /// <summary>Field number for the "seconds" field.</summary>
        public const int SecondsFieldNumber = 2;
        private int seconds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Seconds {
          get { return seconds_; }
          set {
            seconds_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SlideImage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SlideImage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Resource, other.Resource)) return false;
          if (Seconds != other.Seconds) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (resource_ != null) hash ^= Resource.GetHashCode();
          if (Seconds != 0) hash ^= Seconds.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (resource_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Resource);
          }
          if (Seconds != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Seconds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (resource_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
          }
          if (Seconds != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SlideImage other) {
          if (other == null) {
            return;
          }
          if (other.resource_ != null) {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            Resource.MergeFrom(other.Resource);
          }
          if (other.Seconds != 0) {
            Seconds = other.Seconds;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resource_ == null) {
                  Resource = new global::Saturn.Backends.Protocols.Common.Resource();
                }
                input.ReadMessage(Resource);
                break;
              }
              case 16: {
                Seconds = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Resource : pb::IMessage<Resource> {
    private static readonly pb::MessageParser<Resource> _parser = new pb::MessageParser<Resource>(() => new Resource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource(Resource other) : this() {
      resourceId_ = other.resourceId_;
      kind_ = other.kind_;
      location_ = other.location_;
      folderName_ = other.folderName_;
      name_ = other.name_;
      hash_ = other.hash_;
      size_ = other.size_;
      previewResource_ = other.previewResource_ != null ? other.previewResource_.Clone() : null;
      departmentResourceFolderId_ = other.departmentResourceFolderId_;
      created_ = other.created_;
      updated_ = other.updated_;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource Clone() {
      return new Resource(this);
    }

    /// <summary>Field number for the "resourceId" field.</summary>
    public const int ResourceIdFieldNumber = 1;
    private long resourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResourceId {
      get { return resourceId_; }
      set {
        resourceId_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND kind_ = global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folderName" field.</summary>
    public const int FolderNameFieldNumber = 4;
    private string folderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderName {
      get { return folderName_; }
      set {
        folderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 6;
    private string hash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 7;
    private long size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "previewResource" field.</summary>
    public const int PreviewResourceFieldNumber = 8;
    private global::Saturn.Backends.Protocols.Common.PreviewResource previewResource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.PreviewResource PreviewResource {
      get { return previewResource_; }
      set {
        previewResource_ = value;
      }
    }

    /// <summary>Field number for the "departmentResourceFolderId" field.</summary>
    public const int DepartmentResourceFolderIdFieldNumber = 9;
    private long departmentResourceFolderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DepartmentResourceFolderId {
      get { return departmentResourceFolderId_; }
      set {
        departmentResourceFolderId_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 10;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 11;
    private long updated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 12;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceId != other.ResourceId) return false;
      if (Kind != other.Kind) return false;
      if (Location != other.Location) return false;
      if (FolderName != other.FolderName) return false;
      if (Name != other.Name) return false;
      if (Hash != other.Hash) return false;
      if (Size != other.Size) return false;
      if (!object.Equals(PreviewResource, other.PreviewResource)) return false;
      if (DepartmentResourceFolderId != other.DepartmentResourceFolderId) return false;
      if (Created != other.Created) return false;
      if (Updated != other.Updated) return false;
      if (Duration != other.Duration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceId != 0L) hash ^= ResourceId.GetHashCode();
      if (Kind != global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND.Default) hash ^= Kind.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (FolderName.Length != 0) hash ^= FolderName.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (previewResource_ != null) hash ^= PreviewResource.GetHashCode();
      if (DepartmentResourceFolderId != 0L) hash ^= DepartmentResourceFolderId.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Updated != 0L) hash ^= Updated.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ResourceId);
      }
      if (Kind != global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (FolderName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FolderName);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Hash);
      }
      if (Size != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Size);
      }
      if (previewResource_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PreviewResource);
      }
      if (DepartmentResourceFolderId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(DepartmentResourceFolderId);
      }
      if (Created != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Created);
      }
      if (Updated != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Updated);
      }
      if (Duration != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResourceId);
      }
      if (Kind != global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (FolderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderName);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (previewResource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviewResource);
      }
      if (DepartmentResourceFolderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentResourceFolderId);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (Updated != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Updated);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resource other) {
      if (other == null) {
        return;
      }
      if (other.ResourceId != 0L) {
        ResourceId = other.ResourceId;
      }
      if (other.Kind != global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND.Default) {
        Kind = other.Kind;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.FolderName.Length != 0) {
        FolderName = other.FolderName;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      if (other.previewResource_ != null) {
        if (previewResource_ == null) {
          PreviewResource = new global::Saturn.Backends.Protocols.Common.PreviewResource();
        }
        PreviewResource.MergeFrom(other.PreviewResource);
      }
      if (other.DepartmentResourceFolderId != 0L) {
        DepartmentResourceFolderId = other.DepartmentResourceFolderId;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Updated != 0L) {
        Updated = other.Updated;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResourceId = input.ReadInt64();
            break;
          }
          case 16: {
            Kind = (global::Saturn.Backends.Protocols.Common.SCENE_RESOURCE_KIND) input.ReadEnum();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            FolderName = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Hash = input.ReadString();
            break;
          }
          case 56: {
            Size = input.ReadInt64();
            break;
          }
          case 66: {
            if (previewResource_ == null) {
              PreviewResource = new global::Saturn.Backends.Protocols.Common.PreviewResource();
            }
            input.ReadMessage(PreviewResource);
            break;
          }
          case 72: {
            DepartmentResourceFolderId = input.ReadInt64();
            break;
          }
          case 80: {
            Created = input.ReadInt64();
            break;
          }
          case 88: {
            Updated = input.ReadInt64();
            break;
          }
          case 96: {
            Duration = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PreviewResource : pb::IMessage<PreviewResource> {
    private static readonly pb::MessageParser<PreviewResource> _parser = new pb::MessageParser<PreviewResource>(() => new PreviewResource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreviewResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewResource(PreviewResource other) : this() {
      previewResourceId_ = other.previewResourceId_;
      location_ = other.location_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewResource Clone() {
      return new PreviewResource(this);
    }

    /// <summary>Field number for the "previewResourceId" field.</summary>
    public const int PreviewResourceIdFieldNumber = 1;
    private long previewResourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreviewResourceId {
      get { return previewResourceId_; }
      set {
        previewResourceId_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreviewResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreviewResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PreviewResourceId != other.PreviewResourceId) return false;
      if (Location != other.Location) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PreviewResourceId != 0L) hash ^= PreviewResourceId.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PreviewResourceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PreviewResourceId);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PreviewResourceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreviewResourceId);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreviewResource other) {
      if (other == null) {
        return;
      }
      if (other.PreviewResourceId != 0L) {
        PreviewResourceId = other.PreviewResourceId;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PreviewResourceId = input.ReadInt64();
            break;
          }
          case 18: {
            Location = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneBlueprint : pb::IMessage<SceneBlueprint> {
    private static readonly pb::MessageParser<SceneBlueprint> _parser = new pb::MessageParser<SceneBlueprint>(() => new SceneBlueprint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneBlueprint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBlueprint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBlueprint(SceneBlueprint other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      canvas_ = other.canvas_ != null ? other.canvas_.Clone() : null;
      parts_ = other.parts_.Clone();
      dispatchScene_ = other.dispatchScene_ != null ? other.dispatchScene_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBlueprint Clone() {
      return new SceneBlueprint(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canvas" field.</summary>
    public const int CanvasFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.ScenePartCommon canvas_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScenePartCommon Canvas {
      get { return canvas_; }
      set {
        canvas_ = value;
      }
    }

    /// <summary>Field number for the "parts" field.</summary>
    public const int PartsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.ScenePart> _repeated_parts_codec
        = pb::FieldCodec.ForMessage(34, global::Saturn.Backends.Protocols.Common.ScenePart.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePart> parts_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePart>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ScenePart> Parts {
      get { return parts_; }
    }

    /// <summary>Field number for the "dispatchScene" field.</summary>
    public const int DispatchSceneFieldNumber = 5;
    private global::Saturn.Backends.Protocols.Common.DispatchScene dispatchScene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.DispatchScene DispatchScene {
      get { return dispatchScene_; }
      set {
        dispatchScene_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneBlueprint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneBlueprint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Canvas, other.Canvas)) return false;
      if(!parts_.Equals(other.parts_)) return false;
      if (!object.Equals(DispatchScene, other.DispatchScene)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (canvas_ != null) hash ^= Canvas.GetHashCode();
      hash ^= parts_.GetHashCode();
      if (dispatchScene_ != null) hash ^= DispatchScene.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (canvas_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Canvas);
      }
      parts_.WriteTo(output, _repeated_parts_codec);
      if (dispatchScene_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DispatchScene);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (canvas_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Canvas);
      }
      size += parts_.CalculateSize(_repeated_parts_codec);
      if (dispatchScene_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DispatchScene);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneBlueprint other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.canvas_ != null) {
        if (canvas_ == null) {
          Canvas = new global::Saturn.Backends.Protocols.Common.ScenePartCommon();
        }
        Canvas.MergeFrom(other.Canvas);
      }
      parts_.Add(other.parts_);
      if (other.dispatchScene_ != null) {
        if (dispatchScene_ == null) {
          DispatchScene = new global::Saturn.Backends.Protocols.Common.DispatchScene();
        }
        DispatchScene.MergeFrom(other.DispatchScene);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (canvas_ == null) {
              Canvas = new global::Saturn.Backends.Protocols.Common.ScenePartCommon();
            }
            input.ReadMessage(Canvas);
            break;
          }
          case 34: {
            parts_.AddEntriesFrom(input, _repeated_parts_codec);
            break;
          }
          case 42: {
            if (dispatchScene_ == null) {
              DispatchScene = new global::Saturn.Backends.Protocols.Common.DispatchScene();
            }
            input.ReadMessage(DispatchScene);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DispatchScene : pb::IMessage<DispatchScene> {
    private static readonly pb::MessageParser<DispatchScene> _parser = new pb::MessageParser<DispatchScene>(() => new DispatchScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DispatchScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DispatchScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DispatchScene(DispatchScene other) : this() {
      isUsed_ = other.isUsed_;
      isTouched_ = other.isTouched_;
      seconds_ = other.seconds_;
      sceneId_ = other.sceneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DispatchScene Clone() {
      return new DispatchScene(this);
    }

    /// <summary>Field number for the "isUsed" field.</summary>
    public const int IsUsedFieldNumber = 1;
    private bool isUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUsed {
      get { return isUsed_; }
      set {
        isUsed_ = value;
      }
    }

    /// <summary>Field number for the "isTouched" field.</summary>
    public const int IsTouchedFieldNumber = 2;
    private bool isTouched_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTouched {
      get { return isTouched_; }
      set {
        isTouched_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 3;
    private int seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 4;
    private long sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DispatchScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DispatchScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsUsed != other.IsUsed) return false;
      if (IsTouched != other.IsTouched) return false;
      if (Seconds != other.Seconds) return false;
      if (SceneId != other.SceneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsUsed != false) hash ^= IsUsed.GetHashCode();
      if (IsTouched != false) hash ^= IsTouched.GetHashCode();
      if (Seconds != 0) hash ^= Seconds.GetHashCode();
      if (SceneId != 0L) hash ^= SceneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsUsed != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUsed);
      }
      if (IsTouched != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTouched);
      }
      if (Seconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Seconds);
      }
      if (SceneId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SceneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsUsed != false) {
        size += 1 + 1;
      }
      if (IsTouched != false) {
        size += 1 + 1;
      }
      if (Seconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
      }
      if (SceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DispatchScene other) {
      if (other == null) {
        return;
      }
      if (other.IsUsed != false) {
        IsUsed = other.IsUsed;
      }
      if (other.IsTouched != false) {
        IsTouched = other.IsTouched;
      }
      if (other.Seconds != 0) {
        Seconds = other.Seconds;
      }
      if (other.SceneId != 0L) {
        SceneId = other.SceneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsUsed = input.ReadBool();
            break;
          }
          case 16: {
            IsTouched = input.ReadBool();
            break;
          }
          case 24: {
            Seconds = input.ReadInt32();
            break;
          }
          case 32: {
            SceneId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneBase : pb::IMessage<SceneBase> {
    private static readonly pb::MessageParser<SceneBase> _parser = new pb::MessageParser<SceneBase>(() => new SceneBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBase(SceneBase other) : this() {
      sceneId_ = other.sceneId_;
      name_ = other.name_;
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      createdSeconds_ = other.createdSeconds_;
      width_ = other.width_;
      height_ = other.height_;
      departmentSceneFolderId_ = other.departmentSceneFolderId_;
      isValified_ = other.isValified_;
      updatedSeconds_ = other.updatedSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBase Clone() {
      return new SceneBase(this);
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private long sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "createdSeconds" field.</summary>
    public const int CreatedSecondsFieldNumber = 4;
    private long createdSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedSeconds {
      get { return createdSeconds_; }
      set {
        createdSeconds_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 5;
    private long width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 6;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "departmentSceneFolderId" field.</summary>
    public const int DepartmentSceneFolderIdFieldNumber = 7;
    private long departmentSceneFolderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DepartmentSceneFolderId {
      get { return departmentSceneFolderId_; }
      set {
        departmentSceneFolderId_ = value;
      }
    }

    /// <summary>Field number for the "isValified" field.</summary>
    public const int IsValifiedFieldNumber = 8;
    private bool isValified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValified {
      get { return isValified_; }
      set {
        isValified_ = value;
      }
    }

    /// <summary>Field number for the "updatedSeconds" field.</summary>
    public const int UpdatedSecondsFieldNumber = 9;
    private long updatedSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedSeconds {
      get { return updatedSeconds_; }
      set {
        updatedSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (CreatedSeconds != other.CreatedSeconds) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (DepartmentSceneFolderId != other.DepartmentSceneFolderId) return false;
      if (IsValified != other.IsValified) return false;
      if (UpdatedSeconds != other.UpdatedSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0L) hash ^= SceneId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (CreatedSeconds != 0L) hash ^= CreatedSeconds.GetHashCode();
      if (Width != 0L) hash ^= Width.GetHashCode();
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (DepartmentSceneFolderId != 0L) hash ^= DepartmentSceneFolderId.GetHashCode();
      if (IsValified != false) hash ^= IsValified.GetHashCode();
      if (UpdatedSeconds != 0L) hash ^= UpdatedSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SceneId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (resource_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Resource);
      }
      if (CreatedSeconds != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CreatedSeconds);
      }
      if (Width != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Width);
      }
      if (Height != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Height);
      }
      if (DepartmentSceneFolderId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(DepartmentSceneFolderId);
      }
      if (IsValified != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsValified);
      }
      if (UpdatedSeconds != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(UpdatedSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (CreatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedSeconds);
      }
      if (Width != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
      }
      if (DepartmentSceneFolderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentSceneFolderId);
      }
      if (IsValified != false) {
        size += 1 + 1;
      }
      if (UpdatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneBase other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0L) {
        SceneId = other.SceneId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.CreatedSeconds != 0L) {
        CreatedSeconds = other.CreatedSeconds;
      }
      if (other.Width != 0L) {
        Width = other.Width;
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      if (other.DepartmentSceneFolderId != 0L) {
        DepartmentSceneFolderId = other.DepartmentSceneFolderId;
      }
      if (other.IsValified != false) {
        IsValified = other.IsValified;
      }
      if (other.UpdatedSeconds != 0L) {
        UpdatedSeconds = other.UpdatedSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 32: {
            CreatedSeconds = input.ReadInt64();
            break;
          }
          case 40: {
            Width = input.ReadInt64();
            break;
          }
          case 48: {
            Height = input.ReadInt64();
            break;
          }
          case 56: {
            DepartmentSceneFolderId = input.ReadInt64();
            break;
          }
          case 64: {
            IsValified = input.ReadBool();
            break;
          }
          case 72: {
            UpdatedSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scene : pb::IMessage<Scene> {
    private static readonly pb::MessageParser<Scene> _parser = new pb::MessageParser<Scene>(() => new Scene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene(Scene other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      sceneResourceBases_ = other.sceneResourceBases_.Clone();
      sceneConnections_ = other.sceneConnections_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene Clone() {
      return new Scene(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.SceneBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.SceneBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "sceneResourceBases" field.</summary>
    public const int SceneResourceBasesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.SceneResourceBase> _repeated_sceneResourceBases_codec
        = pb::FieldCodec.ForMessage(18, global::Saturn.Backends.Protocols.Common.SceneResourceBase.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.SceneResourceBase> sceneResourceBases_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.SceneResourceBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.SceneResourceBase> SceneResourceBases {
      get { return sceneResourceBases_; }
    }

    /// <summary>Field number for the "sceneConnections" field.</summary>
    public const int SceneConnectionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.SceneConnection> _repeated_sceneConnections_codec
        = pb::FieldCodec.ForMessage(26, global::Saturn.Backends.Protocols.Common.SceneConnection.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.SceneConnection> sceneConnections_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.SceneConnection>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.SceneConnection> SceneConnections {
      get { return sceneConnections_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if(!sceneResourceBases_.Equals(other.sceneResourceBases_)) return false;
      if(!sceneConnections_.Equals(other.sceneConnections_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      hash ^= sceneResourceBases_.GetHashCode();
      hash ^= sceneConnections_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      sceneResourceBases_.WriteTo(output, _repeated_sceneResourceBases_codec);
      sceneConnections_.WriteTo(output, _repeated_sceneConnections_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      size += sceneResourceBases_.CalculateSize(_repeated_sceneResourceBases_codec);
      size += sceneConnections_.CalculateSize(_repeated_sceneConnections_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Saturn.Backends.Protocols.Common.SceneBase();
        }
        Base.MergeFrom(other.Base);
      }
      sceneResourceBases_.Add(other.sceneResourceBases_);
      sceneConnections_.Add(other.sceneConnections_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Saturn.Backends.Protocols.Common.SceneBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            sceneResourceBases_.AddEntriesFrom(input, _repeated_sceneResourceBases_codec);
            break;
          }
          case 26: {
            sceneConnections_.AddEntriesFrom(input, _repeated_sceneConnections_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneConnection : pb::IMessage<SceneConnection> {
    private static readonly pb::MessageParser<SceneConnection> _parser = new pb::MessageParser<SceneConnection>(() => new SceneConnection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneConnection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConnection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConnection(SceneConnection other) : this() {
      sceneConnectionId_ = other.sceneConnectionId_;
      sceneId_ = other.sceneId_;
      connectedSceneBase_ = other.connectedSceneBase_ != null ? other.connectedSceneBase_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConnection Clone() {
      return new SceneConnection(this);
    }

    /// <summary>Field number for the "sceneConnectionId" field.</summary>
    public const int SceneConnectionIdFieldNumber = 1;
    private long sceneConnectionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneConnectionId {
      get { return sceneConnectionId_; }
      set {
        sceneConnectionId_ = value;
      }
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private long sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "connectedSceneBase" field.</summary>
    public const int ConnectedSceneBaseFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.SceneBase connectedSceneBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.SceneBase ConnectedSceneBase {
      get { return connectedSceneBase_; }
      set {
        connectedSceneBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneConnection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneConnection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneConnectionId != other.SceneConnectionId) return false;
      if (SceneId != other.SceneId) return false;
      if (!object.Equals(ConnectedSceneBase, other.ConnectedSceneBase)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneConnectionId != 0L) hash ^= SceneConnectionId.GetHashCode();
      if (SceneId != 0L) hash ^= SceneId.GetHashCode();
      if (connectedSceneBase_ != null) hash ^= ConnectedSceneBase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneConnectionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SceneConnectionId);
      }
      if (SceneId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SceneId);
      }
      if (connectedSceneBase_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConnectedSceneBase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneConnectionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneConnectionId);
      }
      if (SceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
      }
      if (connectedSceneBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectedSceneBase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneConnection other) {
      if (other == null) {
        return;
      }
      if (other.SceneConnectionId != 0L) {
        SceneConnectionId = other.SceneConnectionId;
      }
      if (other.SceneId != 0L) {
        SceneId = other.SceneId;
      }
      if (other.connectedSceneBase_ != null) {
        if (connectedSceneBase_ == null) {
          ConnectedSceneBase = new global::Saturn.Backends.Protocols.Common.SceneBase();
        }
        ConnectedSceneBase.MergeFrom(other.ConnectedSceneBase);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneConnectionId = input.ReadInt64();
            break;
          }
          case 16: {
            SceneId = input.ReadInt64();
            break;
          }
          case 26: {
            if (connectedSceneBase_ == null) {
              ConnectedSceneBase = new global::Saturn.Backends.Protocols.Common.SceneBase();
            }
            input.ReadMessage(ConnectedSceneBase);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneResourceBase : pb::IMessage<SceneResourceBase> {
    private static readonly pb::MessageParser<SceneResourceBase> _parser = new pb::MessageParser<SceneResourceBase>(() => new SceneResourceBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneResourceBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneResourceBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneResourceBase(SceneResourceBase other) : this() {
      sceneResourceId_ = other.sceneResourceId_;
      sceneId_ = other.sceneId_;
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneResourceBase Clone() {
      return new SceneResourceBase(this);
    }

    /// <summary>Field number for the "sceneResourceId" field.</summary>
    public const int SceneResourceIdFieldNumber = 1;
    private long sceneResourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneResourceId {
      get { return sceneResourceId_; }
      set {
        sceneResourceId_ = value;
      }
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private long sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneResourceBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneResourceBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneResourceId != other.SceneResourceId) return false;
      if (SceneId != other.SceneId) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneResourceId != 0L) hash ^= SceneResourceId.GetHashCode();
      if (SceneId != 0L) hash ^= SceneId.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneResourceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SceneResourceId);
      }
      if (SceneId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SceneId);
      }
      if (resource_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Resource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneResourceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneResourceId);
      }
      if (SceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneResourceBase other) {
      if (other == null) {
        return;
      }
      if (other.SceneResourceId != 0L) {
        SceneResourceId = other.SceneResourceId;
      }
      if (other.SceneId != 0L) {
        SceneId = other.SceneId;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneResourceId = input.ReadInt64();
            break;
          }
          case 16: {
            SceneId = input.ReadInt64();
            break;
          }
          case 26: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneResource : pb::IMessage<SceneResource> {
    private static readonly pb::MessageParser<SceneResource> _parser = new pb::MessageParser<SceneResource>(() => new SceneResource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneResource(SceneResource other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneResource Clone() {
      return new SceneResource(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.SceneResourceBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.SceneResourceBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneResource other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Saturn.Backends.Protocols.Common.SceneResourceBase();
        }
        Base.MergeFrom(other.Base);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Saturn.Backends.Protocols.Common.SceneResourceBase();
            }
            input.ReadMessage(Base);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonStatus : pb::IMessage<CommonStatus> {
    private static readonly pb::MessageParser<CommonStatus> _parser = new pb::MessageParser<CommonStatus>(() => new CommonStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStatus(CommonStatus other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonStatus Clone() {
      return new CommonStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND status_ = global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND.Default) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND.Default) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND.Default) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Saturn.Backends.Protocols.Common.COMMON_STATUS_KIND) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoonVersion : pb::IMessage<MoonVersion> {
    private static readonly pb::MessageParser<MoonVersion> _parser = new pb::MessageParser<MoonVersion>(() => new MoonVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoonVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoonVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoonVersion(MoonVersion other) : this() {
      serviceName_ = other.serviceName_;
      osVersion_ = other.osVersion_;
      runtimeVersion_ = other.runtimeVersion_;
      assemVersion_ = other.assemVersion_ != null ? other.assemVersion_.Clone() : null;
      elapsedMilliSeconds_ = other.elapsedMilliSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoonVersion Clone() {
      return new MoonVersion(this);
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "osVersion" field.</summary>
    public const int OsVersionFieldNumber = 2;
    private string osVersion_ = "";
    /// <summary>
    /// Get the operationg system version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "runtimeVersion" field.</summary>
    public const int RuntimeVersionFieldNumber = 3;
    private string runtimeVersion_ = "";
    /// <summary>
    /// Get the common language runtime version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeVersion {
      get { return runtimeVersion_; }
      set {
        runtimeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assemVersion" field.</summary>
    public const int AssemVersionFieldNumber = 4;
    private global::Saturn.Backends.Protocols.Common.MoonVersion.Types.AssemVersion assemVersion_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MoonVersion.Types.AssemVersion AssemVersion {
      get { return assemVersion_; }
      set {
        assemVersion_ = value;
      }
    }

    /// <summary>Field number for the "elapsedMilliSeconds" field.</summary>
    public const int ElapsedMilliSecondsFieldNumber = 5;
    private long elapsedMilliSeconds_;
    /// <summary>
    /// elapsedMilliSeconds 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElapsedMilliSeconds {
      get { return elapsedMilliSeconds_; }
      set {
        elapsedMilliSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoonVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoonVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (OsVersion != other.OsVersion) return false;
      if (RuntimeVersion != other.RuntimeVersion) return false;
      if (!object.Equals(AssemVersion, other.AssemVersion)) return false;
      if (ElapsedMilliSeconds != other.ElapsedMilliSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
      if (RuntimeVersion.Length != 0) hash ^= RuntimeVersion.GetHashCode();
      if (assemVersion_ != null) hash ^= AssemVersion.GetHashCode();
      if (ElapsedMilliSeconds != 0L) hash ^= ElapsedMilliSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OsVersion);
      }
      if (RuntimeVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RuntimeVersion);
      }
      if (assemVersion_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AssemVersion);
      }
      if (ElapsedMilliSeconds != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ElapsedMilliSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (OsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (RuntimeVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeVersion);
      }
      if (assemVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AssemVersion);
      }
      if (ElapsedMilliSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElapsedMilliSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoonVersion other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.OsVersion.Length != 0) {
        OsVersion = other.OsVersion;
      }
      if (other.RuntimeVersion.Length != 0) {
        RuntimeVersion = other.RuntimeVersion;
      }
      if (other.assemVersion_ != null) {
        if (assemVersion_ == null) {
          AssemVersion = new global::Saturn.Backends.Protocols.Common.MoonVersion.Types.AssemVersion();
        }
        AssemVersion.MergeFrom(other.AssemVersion);
      }
      if (other.ElapsedMilliSeconds != 0L) {
        ElapsedMilliSeconds = other.ElapsedMilliSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            OsVersion = input.ReadString();
            break;
          }
          case 26: {
            RuntimeVersion = input.ReadString();
            break;
          }
          case 34: {
            if (assemVersion_ == null) {
              AssemVersion = new global::Saturn.Backends.Protocols.Common.MoonVersion.Types.AssemVersion();
            }
            input.ReadMessage(AssemVersion);
            break;
          }
          case 40: {
            ElapsedMilliSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MoonVersion message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AssemVersion : pb::IMessage<AssemVersion> {
        private static readonly pb::MessageParser<AssemVersion> _parser = new pb::MessageParser<AssemVersion>(() => new AssemVersion());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AssemVersion> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MoonVersion.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssemVersion() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssemVersion(AssemVersion other) : this() {
          name_ = other.name_;
          version_ = other.version_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AssemVersion Clone() {
          return new AssemVersion(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AssemVersion);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AssemVersion other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Version != other.Version) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Version);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AssemVersion other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Version = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// messages start
  /// </summary>
  public sealed partial class GetVersionResponse : pb::IMessage<GetVersionResponse> {
    private static readonly pb::MessageParser<GetVersionResponse> _parser = new pb::MessageParser<GetVersionResponse>(() => new GetVersionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVersionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersionResponse(GetVersionResponse other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      versions_ = other.versions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersionResponse Clone() {
      return new GetVersionResponse(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.CommonStatus common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.CommonStatus Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "versions" field.</summary>
    public const int VersionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.MoonVersion> _repeated_versions_codec
        = pb::FieldCodec.ForMessage(18, global::Saturn.Backends.Protocols.Common.MoonVersion.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MoonVersion> versions_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MoonVersion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MoonVersion> Versions {
      get { return versions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVersionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVersionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if(!versions_.Equals(other.versions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      hash ^= versions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      versions_.WriteTo(output, _repeated_versions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      size += versions_.CalculateSize(_repeated_versions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVersionResponse other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::Saturn.Backends.Protocols.Common.CommonStatus();
        }
        Common.MergeFrom(other.Common);
      }
      versions_.Add(other.versions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::Saturn.Backends.Protocols.Common.CommonStatus();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            versions_.AddEntriesFrom(input, _repeated_versions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// structure
  /// </summary>
  public sealed partial class MemberBase : pb::IMessage<MemberBase> {
    private static readonly pb::MessageParser<MemberBase> _parser = new pb::MessageParser<MemberBase>(() => new MemberBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberBase(MemberBase other) : this() {
      id_ = other.id_;
      uuid_ = other.uuid_;
      email_ = other.email_;
      memberKind_ = other.memberKind_;
      registerKind_ = other.registerKind_;
      createdSeconds_ = other.createdSeconds_;
      lastConnectedSeconds_ = other.lastConnectedSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberBase Clone() {
      return new MemberBase(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memberKind" field.</summary>
    public const int MemberKindFieldNumber = 4;
    private global::Saturn.Backends.Protocols.Common.MEMBER_KIND memberKind_ = global::Saturn.Backends.Protocols.Common.MEMBER_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MEMBER_KIND MemberKind {
      get { return memberKind_; }
      set {
        memberKind_ = value;
      }
    }

    /// <summary>Field number for the "registerKind" field.</summary>
    public const int RegisterKindFieldNumber = 5;
    private global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND registerKind_ = global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND RegisterKind {
      get { return registerKind_; }
      set {
        registerKind_ = value;
      }
    }

    /// <summary>Field number for the "createdSeconds" field.</summary>
    public const int CreatedSecondsFieldNumber = 6;
    private long createdSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedSeconds {
      get { return createdSeconds_; }
      set {
        createdSeconds_ = value;
      }
    }

    /// <summary>Field number for the "lastConnectedSeconds" field.</summary>
    public const int LastConnectedSecondsFieldNumber = 7;
    private long lastConnectedSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastConnectedSeconds {
      get { return lastConnectedSeconds_; }
      set {
        lastConnectedSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uuid != other.Uuid) return false;
      if (Email != other.Email) return false;
      if (MemberKind != other.MemberKind) return false;
      if (RegisterKind != other.RegisterKind) return false;
      if (CreatedSeconds != other.CreatedSeconds) return false;
      if (LastConnectedSeconds != other.LastConnectedSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (MemberKind != global::Saturn.Backends.Protocols.Common.MEMBER_KIND.Default) hash ^= MemberKind.GetHashCode();
      if (RegisterKind != global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND.Default) hash ^= RegisterKind.GetHashCode();
      if (CreatedSeconds != 0L) hash ^= CreatedSeconds.GetHashCode();
      if (LastConnectedSeconds != 0L) hash ^= LastConnectedSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      if (MemberKind != global::Saturn.Backends.Protocols.Common.MEMBER_KIND.Default) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MemberKind);
      }
      if (RegisterKind != global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND.Default) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RegisterKind);
      }
      if (CreatedSeconds != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreatedSeconds);
      }
      if (LastConnectedSeconds != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(LastConnectedSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (MemberKind != global::Saturn.Backends.Protocols.Common.MEMBER_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MemberKind);
      }
      if (RegisterKind != global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RegisterKind);
      }
      if (CreatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedSeconds);
      }
      if (LastConnectedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastConnectedSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberBase other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.MemberKind != global::Saturn.Backends.Protocols.Common.MEMBER_KIND.Default) {
        MemberKind = other.MemberKind;
      }
      if (other.RegisterKind != global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND.Default) {
        RegisterKind = other.RegisterKind;
      }
      if (other.CreatedSeconds != 0L) {
        CreatedSeconds = other.CreatedSeconds;
      }
      if (other.LastConnectedSeconds != 0L) {
        LastConnectedSeconds = other.LastConnectedSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 32: {
            MemberKind = (global::Saturn.Backends.Protocols.Common.MEMBER_KIND) input.ReadEnum();
            break;
          }
          case 40: {
            RegisterKind = (global::Saturn.Backends.Protocols.Common.MEMBER_REGISTER_KIND) input.ReadEnum();
            break;
          }
          case 48: {
            CreatedSeconds = input.ReadInt64();
            break;
          }
          case 56: {
            LastConnectedSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Member : pb::IMessage<Member> {
    private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Member> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member(Member other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      departmentBases_ = other.departmentBases_.Clone();
      permissions_ = other.permissions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member Clone() {
      return new Member(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.MemberBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "departmentBases" field.</summary>
    public const int DepartmentBasesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.DepartmentBase> _repeated_departmentBases_codec
        = pb::FieldCodec.ForMessage(18, global::Saturn.Backends.Protocols.Common.DepartmentBase.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.DepartmentBase> departmentBases_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.DepartmentBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.DepartmentBase> DepartmentBases {
      get { return departmentBases_; }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND> _repeated_permissions_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND) x);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND> permissions_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND> Permissions {
      get { return permissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Member);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Member other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if(!departmentBases_.Equals(other.departmentBases_)) return false;
      if(!permissions_.Equals(other.permissions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      hash ^= departmentBases_.GetHashCode();
      hash ^= permissions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      departmentBases_.WriteTo(output, _repeated_departmentBases_codec);
      permissions_.WriteTo(output, _repeated_permissions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      size += departmentBases_.CalculateSize(_repeated_departmentBases_codec);
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Member other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Saturn.Backends.Protocols.Common.MemberBase();
        }
        Base.MergeFrom(other.Base);
      }
      departmentBases_.Add(other.departmentBases_);
      permissions_.Add(other.permissions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Saturn.Backends.Protocols.Common.MemberBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            departmentBases_.AddEntriesFrom(input, _repeated_departmentBases_codec);
            break;
          }
          case 26:
          case 24: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepartmentBase : pb::IMessage<DepartmentBase> {
    private static readonly pb::MessageParser<DepartmentBase> _parser = new pb::MessageParser<DepartmentBase>(() => new DepartmentBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepartmentBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentBase(DepartmentBase other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      createdSeconds_ = other.createdSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentBase Clone() {
      return new DepartmentBase(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdSeconds" field.</summary>
    public const int CreatedSecondsFieldNumber = 3;
    private long createdSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedSeconds {
      get { return createdSeconds_; }
      set {
        createdSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepartmentBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepartmentBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CreatedSeconds != other.CreatedSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CreatedSeconds != 0L) hash ^= CreatedSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CreatedSeconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CreatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepartmentBase other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CreatedSeconds != 0L) {
        CreatedSeconds = other.CreatedSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CreatedSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Department : pb::IMessage<Department> {
    private static readonly pb::MessageParser<Department> _parser = new pb::MessageParser<Department>(() => new Department());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Department> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Department() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Department(Department other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      memberBases_ = other.memberBases_.Clone();
      connectorBases_ = other.connectorBases_.Clone();
      departmentLowers_ = other.departmentLowers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Department Clone() {
      return new Department(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.DepartmentBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.DepartmentBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "memberBases" field.</summary>
    public const int MemberBasesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.MemberBase> _repeated_memberBases_codec
        = pb::FieldCodec.ForMessage(18, global::Saturn.Backends.Protocols.Common.MemberBase.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MemberBase> memberBases_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MemberBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.MemberBase> MemberBases {
      get { return memberBases_; }
    }

    /// <summary>Field number for the "connectorBases" field.</summary>
    public const int ConnectorBasesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.ConnectorBase> _repeated_connectorBases_codec
        = pb::FieldCodec.ForMessage(26, global::Saturn.Backends.Protocols.Common.ConnectorBase.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ConnectorBase> connectorBases_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ConnectorBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ConnectorBase> ConnectorBases {
      get { return connectorBases_; }
    }

    /// <summary>Field number for the "departmentLowers" field.</summary>
    public const int DepartmentLowersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.DepartmentLowerBase> _repeated_departmentLowers_codec
        = pb::FieldCodec.ForMessage(34, global::Saturn.Backends.Protocols.Common.DepartmentLowerBase.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.DepartmentLowerBase> departmentLowers_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.DepartmentLowerBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.DepartmentLowerBase> DepartmentLowers {
      get { return departmentLowers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Department);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Department other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if(!memberBases_.Equals(other.memberBases_)) return false;
      if(!connectorBases_.Equals(other.connectorBases_)) return false;
      if(!departmentLowers_.Equals(other.departmentLowers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      hash ^= memberBases_.GetHashCode();
      hash ^= connectorBases_.GetHashCode();
      hash ^= departmentLowers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      memberBases_.WriteTo(output, _repeated_memberBases_codec);
      connectorBases_.WriteTo(output, _repeated_connectorBases_codec);
      departmentLowers_.WriteTo(output, _repeated_departmentLowers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      size += memberBases_.CalculateSize(_repeated_memberBases_codec);
      size += connectorBases_.CalculateSize(_repeated_connectorBases_codec);
      size += departmentLowers_.CalculateSize(_repeated_departmentLowers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Department other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
        }
        Base.MergeFrom(other.Base);
      }
      memberBases_.Add(other.memberBases_);
      connectorBases_.Add(other.connectorBases_);
      departmentLowers_.Add(other.departmentLowers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            memberBases_.AddEntriesFrom(input, _repeated_memberBases_codec);
            break;
          }
          case 26: {
            connectorBases_.AddEntriesFrom(input, _repeated_connectorBases_codec);
            break;
          }
          case 34: {
            departmentLowers_.AddEntriesFrom(input, _repeated_departmentLowers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepartmentLowerBase : pb::IMessage<DepartmentLowerBase> {
    private static readonly pb::MessageParser<DepartmentLowerBase> _parser = new pb::MessageParser<DepartmentLowerBase>(() => new DepartmentLowerBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepartmentLowerBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentLowerBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentLowerBase(DepartmentLowerBase other) : this() {
      id_ = other.id_;
      lowerDepartmentBase_ = other.lowerDepartmentBase_ != null ? other.lowerDepartmentBase_.Clone() : null;
      createdSeconds_ = other.createdSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentLowerBase Clone() {
      return new DepartmentLowerBase(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "lowerDepartmentBase" field.</summary>
    public const int LowerDepartmentBaseFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.DepartmentBase lowerDepartmentBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.DepartmentBase LowerDepartmentBase {
      get { return lowerDepartmentBase_; }
      set {
        lowerDepartmentBase_ = value;
      }
    }

    /// <summary>Field number for the "createdSeconds" field.</summary>
    public const int CreatedSecondsFieldNumber = 3;
    private long createdSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedSeconds {
      get { return createdSeconds_; }
      set {
        createdSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepartmentLowerBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepartmentLowerBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(LowerDepartmentBase, other.LowerDepartmentBase)) return false;
      if (CreatedSeconds != other.CreatedSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (lowerDepartmentBase_ != null) hash ^= LowerDepartmentBase.GetHashCode();
      if (CreatedSeconds != 0L) hash ^= CreatedSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (lowerDepartmentBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LowerDepartmentBase);
      }
      if (CreatedSeconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (lowerDepartmentBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LowerDepartmentBase);
      }
      if (CreatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepartmentLowerBase other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.lowerDepartmentBase_ != null) {
        if (lowerDepartmentBase_ == null) {
          LowerDepartmentBase = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
        }
        LowerDepartmentBase.MergeFrom(other.LowerDepartmentBase);
      }
      if (other.CreatedSeconds != 0L) {
        CreatedSeconds = other.CreatedSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (lowerDepartmentBase_ == null) {
              LowerDepartmentBase = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
            }
            input.ReadMessage(LowerDepartmentBase);
            break;
          }
          case 24: {
            CreatedSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepartmentNodeBase : pb::IMessage<DepartmentNodeBase> {
    private static readonly pb::MessageParser<DepartmentNodeBase> _parser = new pb::MessageParser<DepartmentNodeBase>(() => new DepartmentNodeBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepartmentNodeBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentNodeBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentNodeBase(DepartmentNodeBase other) : this() {
      id_ = other.id_;
      order_ = other.order_;
      parentDepartmentNodeId_ = other.parentDepartmentNodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentNodeBase Clone() {
      return new DepartmentNodeBase(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private long order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "parentDepartmentNodeId" field.</summary>
    public const int ParentDepartmentNodeIdFieldNumber = 3;
    private long parentDepartmentNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentDepartmentNodeId {
      get { return parentDepartmentNodeId_; }
      set {
        parentDepartmentNodeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepartmentNodeBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepartmentNodeBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Order != other.Order) return false;
      if (ParentDepartmentNodeId != other.ParentDepartmentNodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Order != 0L) hash ^= Order.GetHashCode();
      if (ParentDepartmentNodeId != 0L) hash ^= ParentDepartmentNodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Order != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Order);
      }
      if (ParentDepartmentNodeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ParentDepartmentNodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Order != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Order);
      }
      if (ParentDepartmentNodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentDepartmentNodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepartmentNodeBase other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Order != 0L) {
        Order = other.Order;
      }
      if (other.ParentDepartmentNodeId != 0L) {
        ParentDepartmentNodeId = other.ParentDepartmentNodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Order = input.ReadInt64();
            break;
          }
          case 24: {
            ParentDepartmentNodeId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepartmentNode : pb::IMessage<DepartmentNode> {
    private static readonly pb::MessageParser<DepartmentNode> _parser = new pb::MessageParser<DepartmentNode>(() => new DepartmentNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepartmentNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentNode(DepartmentNode other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      department_ = other.department_ != null ? other.department_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentNode Clone() {
      return new DepartmentNode(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.DepartmentNodeBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.DepartmentNodeBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "department" field.</summary>
    public const int DepartmentFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.Department department_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Department Department {
      get { return department_; }
      set {
        department_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepartmentNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepartmentNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (!object.Equals(Department, other.Department)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (department_ != null) hash ^= Department.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (department_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Department);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (department_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Department);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepartmentNode other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Saturn.Backends.Protocols.Common.DepartmentNodeBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.department_ != null) {
        if (department_ == null) {
          Department = new global::Saturn.Backends.Protocols.Common.Department();
        }
        Department.MergeFrom(other.Department);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Saturn.Backends.Protocols.Common.DepartmentNodeBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            if (department_ == null) {
              Department = new global::Saturn.Backends.Protocols.Common.Department();
            }
            input.ReadMessage(Department);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectorBase : pb::IMessage<ConnectorBase> {
    private static readonly pb::MessageParser<ConnectorBase> _parser = new pb::MessageParser<ConnectorBase>(() => new ConnectorBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectorBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorBase(ConnectorBase other) : this() {
      connectorId_ = other.connectorId_;
      name_ = other.name_;
      deviceId_ = other.deviceId_;
      createdSeconds_ = other.createdSeconds_;
      kind_ = other.kind_;
      updatedSeconds_ = other.updatedSeconds_;
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      emergencySceneId_ = other.emergencySceneId_;
      isEmergency_ = other.isEmergency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorBase Clone() {
      return new ConnectorBase(this);
    }

    /// <summary>Field number for the "connectorId" field.</summary>
    public const int ConnectorIdFieldNumber = 1;
    private long connectorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConnectorId {
      get { return connectorId_; }
      set {
        connectorId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 3;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdSeconds" field.</summary>
    public const int CreatedSecondsFieldNumber = 4;
    private long createdSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedSeconds {
      get { return createdSeconds_; }
      set {
        createdSeconds_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 5;
    private global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND kind_ = global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "updatedSeconds" field.</summary>
    public const int UpdatedSecondsFieldNumber = 6;
    private long updatedSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedSeconds {
      get { return updatedSeconds_; }
      set {
        updatedSeconds_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 7;
    private global::Saturn.Backends.Protocols.Common.Resource resource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "emergencySceneId" field.</summary>
    public const int EmergencySceneIdFieldNumber = 8;
    private long emergencySceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EmergencySceneId {
      get { return emergencySceneId_; }
      set {
        emergencySceneId_ = value;
      }
    }

    /// <summary>Field number for the "isEmergency" field.</summary>
    public const int IsEmergencyFieldNumber = 9;
    private bool isEmergency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEmergency {
      get { return isEmergency_; }
      set {
        isEmergency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectorBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectorBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectorId != other.ConnectorId) return false;
      if (Name != other.Name) return false;
      if (DeviceId != other.DeviceId) return false;
      if (CreatedSeconds != other.CreatedSeconds) return false;
      if (Kind != other.Kind) return false;
      if (UpdatedSeconds != other.UpdatedSeconds) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (EmergencySceneId != other.EmergencySceneId) return false;
      if (IsEmergency != other.IsEmergency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectorId != 0L) hash ^= ConnectorId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (CreatedSeconds != 0L) hash ^= CreatedSeconds.GetHashCode();
      if (Kind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) hash ^= Kind.GetHashCode();
      if (UpdatedSeconds != 0L) hash ^= UpdatedSeconds.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (EmergencySceneId != 0L) hash ^= EmergencySceneId.GetHashCode();
      if (IsEmergency != false) hash ^= IsEmergency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConnectorId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceId);
      }
      if (CreatedSeconds != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CreatedSeconds);
      }
      if (Kind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Kind);
      }
      if (UpdatedSeconds != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UpdatedSeconds);
      }
      if (resource_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Resource);
      }
      if (EmergencySceneId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EmergencySceneId);
      }
      if (IsEmergency != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsEmergency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (CreatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedSeconds);
      }
      if (Kind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (UpdatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedSeconds);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (EmergencySceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EmergencySceneId);
      }
      if (IsEmergency != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectorBase other) {
      if (other == null) {
        return;
      }
      if (other.ConnectorId != 0L) {
        ConnectorId = other.ConnectorId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.CreatedSeconds != 0L) {
        CreatedSeconds = other.CreatedSeconds;
      }
      if (other.Kind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
        Kind = other.Kind;
      }
      if (other.UpdatedSeconds != 0L) {
        UpdatedSeconds = other.UpdatedSeconds;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Saturn.Backends.Protocols.Common.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.EmergencySceneId != 0L) {
        EmergencySceneId = other.EmergencySceneId;
      }
      if (other.IsEmergency != false) {
        IsEmergency = other.IsEmergency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConnectorId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            DeviceId = input.ReadString();
            break;
          }
          case 32: {
            CreatedSeconds = input.ReadInt64();
            break;
          }
          case 40: {
            Kind = (global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND) input.ReadEnum();
            break;
          }
          case 48: {
            UpdatedSeconds = input.ReadInt64();
            break;
          }
          case 58: {
            if (resource_ == null) {
              Resource = new global::Saturn.Backends.Protocols.Common.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 64: {
            EmergencySceneId = input.ReadInt64();
            break;
          }
          case 72: {
            IsEmergency = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Connector : pb::IMessage<Connector> {
    private static readonly pb::MessageParser<Connector> _parser = new pb::MessageParser<Connector>(() => new Connector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Connector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector(Connector other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      departmentBase_ = other.departmentBase_ != null ? other.departmentBase_.Clone() : null;
      scene_ = other.scene_ != null ? other.scene_.Clone() : null;
      schedules_ = other.schedules_.Clone();
      emergencyScene_ = other.emergencyScene_ != null ? other.emergencyScene_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector Clone() {
      return new Connector(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.ConnectorBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ConnectorBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "departmentBase" field.</summary>
    public const int DepartmentBaseFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.DepartmentBase departmentBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.DepartmentBase DepartmentBase {
      get { return departmentBase_; }
      set {
        departmentBase_ = value;
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.Scene scene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Scene Scene {
      get { return scene_; }
      set {
        scene_ = value;
      }
    }

    /// <summary>Field number for the "schedules" field.</summary>
    public const int SchedulesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.ConnectorScheduleScene> _repeated_schedules_codec
        = pb::FieldCodec.ForMessage(34, global::Saturn.Backends.Protocols.Common.ConnectorScheduleScene.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ConnectorScheduleScene> schedules_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ConnectorScheduleScene>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.ConnectorScheduleScene> Schedules {
      get { return schedules_; }
    }

    /// <summary>Field number for the "emergencyScene" field.</summary>
    public const int EmergencySceneFieldNumber = 5;
    private global::Saturn.Backends.Protocols.Common.Scene emergencyScene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Scene EmergencyScene {
      get { return emergencyScene_; }
      set {
        emergencyScene_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Connector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Connector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (!object.Equals(DepartmentBase, other.DepartmentBase)) return false;
      if (!object.Equals(Scene, other.Scene)) return false;
      if(!schedules_.Equals(other.schedules_)) return false;
      if (!object.Equals(EmergencyScene, other.EmergencyScene)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (departmentBase_ != null) hash ^= DepartmentBase.GetHashCode();
      if (scene_ != null) hash ^= Scene.GetHashCode();
      hash ^= schedules_.GetHashCode();
      if (emergencyScene_ != null) hash ^= EmergencyScene.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (departmentBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DepartmentBase);
      }
      if (scene_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scene);
      }
      schedules_.WriteTo(output, _repeated_schedules_codec);
      if (emergencyScene_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EmergencyScene);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (departmentBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartmentBase);
      }
      if (scene_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scene);
      }
      size += schedules_.CalculateSize(_repeated_schedules_codec);
      if (emergencyScene_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmergencyScene);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Connector other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Saturn.Backends.Protocols.Common.ConnectorBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.departmentBase_ != null) {
        if (departmentBase_ == null) {
          DepartmentBase = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
        }
        DepartmentBase.MergeFrom(other.DepartmentBase);
      }
      if (other.scene_ != null) {
        if (scene_ == null) {
          Scene = new global::Saturn.Backends.Protocols.Common.Scene();
        }
        Scene.MergeFrom(other.Scene);
      }
      schedules_.Add(other.schedules_);
      if (other.emergencyScene_ != null) {
        if (emergencyScene_ == null) {
          EmergencyScene = new global::Saturn.Backends.Protocols.Common.Scene();
        }
        EmergencyScene.MergeFrom(other.EmergencyScene);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Saturn.Backends.Protocols.Common.ConnectorBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            if (departmentBase_ == null) {
              DepartmentBase = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
            }
            input.ReadMessage(DepartmentBase);
            break;
          }
          case 26: {
            if (scene_ == null) {
              Scene = new global::Saturn.Backends.Protocols.Common.Scene();
            }
            input.ReadMessage(Scene);
            break;
          }
          case 34: {
            schedules_.AddEntriesFrom(input, _repeated_schedules_codec);
            break;
          }
          case 42: {
            if (emergencyScene_ == null) {
              EmergencyScene = new global::Saturn.Backends.Protocols.Common.Scene();
            }
            input.ReadMessage(EmergencyScene);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectorDepartmentBase : pb::IMessage<ConnectorDepartmentBase> {
    private static readonly pb::MessageParser<ConnectorDepartmentBase> _parser = new pb::MessageParser<ConnectorDepartmentBase>(() => new ConnectorDepartmentBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectorDepartmentBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorDepartmentBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorDepartmentBase(ConnectorDepartmentBase other) : this() {
      connectorBase_ = other.connectorBase_ != null ? other.connectorBase_.Clone() : null;
      departmentBase_ = other.departmentBase_ != null ? other.departmentBase_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorDepartmentBase Clone() {
      return new ConnectorDepartmentBase(this);
    }

    /// <summary>Field number for the "connectorBase" field.</summary>
    public const int ConnectorBaseFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.ConnectorBase connectorBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ConnectorBase ConnectorBase {
      get { return connectorBase_; }
      set {
        connectorBase_ = value;
      }
    }

    /// <summary>Field number for the "departmentBase" field.</summary>
    public const int DepartmentBaseFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.DepartmentBase departmentBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.DepartmentBase DepartmentBase {
      get { return departmentBase_; }
      set {
        departmentBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectorDepartmentBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectorDepartmentBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConnectorBase, other.ConnectorBase)) return false;
      if (!object.Equals(DepartmentBase, other.DepartmentBase)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (connectorBase_ != null) hash ^= ConnectorBase.GetHashCode();
      if (departmentBase_ != null) hash ^= DepartmentBase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (connectorBase_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConnectorBase);
      }
      if (departmentBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DepartmentBase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (connectorBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorBase);
      }
      if (departmentBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartmentBase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectorDepartmentBase other) {
      if (other == null) {
        return;
      }
      if (other.connectorBase_ != null) {
        if (connectorBase_ == null) {
          ConnectorBase = new global::Saturn.Backends.Protocols.Common.ConnectorBase();
        }
        ConnectorBase.MergeFrom(other.ConnectorBase);
      }
      if (other.departmentBase_ != null) {
        if (departmentBase_ == null) {
          DepartmentBase = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
        }
        DepartmentBase.MergeFrom(other.DepartmentBase);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (connectorBase_ == null) {
              ConnectorBase = new global::Saturn.Backends.Protocols.Common.ConnectorBase();
            }
            input.ReadMessage(ConnectorBase);
            break;
          }
          case 18: {
            if (departmentBase_ == null) {
              DepartmentBase = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
            }
            input.ReadMessage(DepartmentBase);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberPermission : pb::IMessage<MemberPermission> {
    private static readonly pb::MessageParser<MemberPermission> _parser = new pb::MessageParser<MemberPermission>(() => new MemberPermission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberPermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPermission(MemberPermission other) : this() {
      id_ = other.id_;
      memberBase_ = other.memberBase_ != null ? other.memberBase_.Clone() : null;
      permission_ = other.permission_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPermission Clone() {
      return new MemberPermission(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "memberBase" field.</summary>
    public const int MemberBaseFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.MemberBase memberBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberBase MemberBase {
      get { return memberBase_; }
      set {
        memberBase_ = value;
      }
    }

    /// <summary>Field number for the "permission" field.</summary>
    public const int PermissionFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND permission_ = global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND Permission {
      get { return permission_; }
      set {
        permission_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberPermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberPermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(MemberBase, other.MemberBase)) return false;
      if (Permission != other.Permission) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (memberBase_ != null) hash ^= MemberBase.GetHashCode();
      if (Permission != global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND.Default) hash ^= Permission.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (memberBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberBase);
      }
      if (Permission != global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Permission);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (memberBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberBase);
      }
      if (Permission != global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Permission);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberPermission other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.memberBase_ != null) {
        if (memberBase_ == null) {
          MemberBase = new global::Saturn.Backends.Protocols.Common.MemberBase();
        }
        MemberBase.MergeFrom(other.MemberBase);
      }
      if (other.Permission != global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND.Default) {
        Permission = other.Permission;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (memberBase_ == null) {
              MemberBase = new global::Saturn.Backends.Protocols.Common.MemberBase();
            }
            input.ReadMessage(MemberBase);
            break;
          }
          case 24: {
            Permission = (global::Saturn.Backends.Protocols.Common.MEMBER_PERMISSION_KIND) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberDepartment : pb::IMessage<MemberDepartment> {
    private static readonly pb::MessageParser<MemberDepartment> _parser = new pb::MessageParser<MemberDepartment>(() => new MemberDepartment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberDepartment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberDepartment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberDepartment(MemberDepartment other) : this() {
      id_ = other.id_;
      memberBase_ = other.memberBase_ != null ? other.memberBase_.Clone() : null;
      departmentBase_ = other.departmentBase_ != null ? other.departmentBase_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberDepartment Clone() {
      return new MemberDepartment(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "memberBase" field.</summary>
    public const int MemberBaseFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.MemberBase memberBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberBase MemberBase {
      get { return memberBase_; }
      set {
        memberBase_ = value;
      }
    }

    /// <summary>Field number for the "departmentBase" field.</summary>
    public const int DepartmentBaseFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.DepartmentBase departmentBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.DepartmentBase DepartmentBase {
      get { return departmentBase_; }
      set {
        departmentBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberDepartment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberDepartment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(MemberBase, other.MemberBase)) return false;
      if (!object.Equals(DepartmentBase, other.DepartmentBase)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (memberBase_ != null) hash ^= MemberBase.GetHashCode();
      if (departmentBase_ != null) hash ^= DepartmentBase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (memberBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberBase);
      }
      if (departmentBase_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DepartmentBase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (memberBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberBase);
      }
      if (departmentBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartmentBase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberDepartment other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.memberBase_ != null) {
        if (memberBase_ == null) {
          MemberBase = new global::Saturn.Backends.Protocols.Common.MemberBase();
        }
        MemberBase.MergeFrom(other.MemberBase);
      }
      if (other.departmentBase_ != null) {
        if (departmentBase_ == null) {
          DepartmentBase = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
        }
        DepartmentBase.MergeFrom(other.DepartmentBase);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (memberBase_ == null) {
              MemberBase = new global::Saturn.Backends.Protocols.Common.MemberBase();
            }
            input.ReadMessage(MemberBase);
            break;
          }
          case 26: {
            if (departmentBase_ == null) {
              DepartmentBase = new global::Saturn.Backends.Protocols.Common.DepartmentBase();
            }
            input.ReadMessage(DepartmentBase);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberRecordBlueprint : pb::IMessage<MemberRecordBlueprint> {
    private static readonly pb::MessageParser<MemberRecordBlueprint> _parser = new pb::MessageParser<MemberRecordBlueprint>(() => new MemberRecordBlueprint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberRecordBlueprint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRecordBlueprint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRecordBlueprint(MemberRecordBlueprint other) : this() {
      kind_ = other.kind_;
      sceneRecord_ = other.sceneRecord_ != null ? other.sceneRecord_.Clone() : null;
      connectorRecord_ = other.connectorRecord_ != null ? other.connectorRecord_.Clone() : null;
      connectorScheduleRecord_ = other.connectorScheduleRecord_ != null ? other.connectorScheduleRecord_.Clone() : null;
      connectorKindRecord_ = other.connectorKindRecord_ != null ? other.connectorKindRecord_.Clone() : null;
      connectorSceneRecord_ = other.connectorSceneRecord_ != null ? other.connectorSceneRecord_.Clone() : null;
      connectorDepartmentRecord_ = other.connectorDepartmentRecord_ != null ? other.connectorDepartmentRecord_.Clone() : null;
      scheduleReocrd_ = other.scheduleReocrd_ != null ? other.scheduleReocrd_.Clone() : null;
      scheduleSceneRecord_ = other.scheduleSceneRecord_ != null ? other.scheduleSceneRecord_.Clone() : null;
      departmentRecord_ = other.departmentRecord_ != null ? other.departmentRecord_.Clone() : null;
      departmentNodeRecord_ = other.departmentNodeRecord_ != null ? other.departmentNodeRecord_.Clone() : null;
      departmentResourceFolderRecord_ = other.departmentResourceFolderRecord_ != null ? other.departmentResourceFolderRecord_.Clone() : null;
      departmentSceneFolderRecord_ = other.departmentSceneFolderRecord_ != null ? other.departmentSceneFolderRecord_.Clone() : null;
      connectorEmergencyRecord_ = other.connectorEmergencyRecord_ != null ? other.connectorEmergencyRecord_.Clone() : null;
      connectorEmergencySceneRecord_ = other.connectorEmergencySceneRecord_ != null ? other.connectorEmergencySceneRecord_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRecordBlueprint Clone() {
      return new MemberRecordBlueprint(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND kind_ = global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "sceneRecord" field.</summary>
    public const int SceneRecordFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberSceneRecord sceneRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberSceneRecord SceneRecord {
      get { return sceneRecord_; }
      set {
        sceneRecord_ = value;
      }
    }

    /// <summary>Field number for the "connectorRecord" field.</summary>
    public const int ConnectorRecordFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorRecord connectorRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorRecord ConnectorRecord {
      get { return connectorRecord_; }
      set {
        connectorRecord_ = value;
      }
    }

    /// <summary>Field number for the "connectorScheduleRecord" field.</summary>
    public const int ConnectorScheduleRecordFieldNumber = 4;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorScheduleRecord connectorScheduleRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorScheduleRecord ConnectorScheduleRecord {
      get { return connectorScheduleRecord_; }
      set {
        connectorScheduleRecord_ = value;
      }
    }

    /// <summary>Field number for the "connectorKindRecord" field.</summary>
    public const int ConnectorKindRecordFieldNumber = 5;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorKindRecord connectorKindRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorKindRecord ConnectorKindRecord {
      get { return connectorKindRecord_; }
      set {
        connectorKindRecord_ = value;
      }
    }

    /// <summary>Field number for the "connectorSceneRecord" field.</summary>
    public const int ConnectorSceneRecordFieldNumber = 6;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorSceneRecord connectorSceneRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorSceneRecord ConnectorSceneRecord {
      get { return connectorSceneRecord_; }
      set {
        connectorSceneRecord_ = value;
      }
    }

    /// <summary>Field number for the "connectorDepartmentRecord" field.</summary>
    public const int ConnectorDepartmentRecordFieldNumber = 7;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorDepartmentRecord connectorDepartmentRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorDepartmentRecord ConnectorDepartmentRecord {
      get { return connectorDepartmentRecord_; }
      set {
        connectorDepartmentRecord_ = value;
      }
    }

    /// <summary>Field number for the "scheduleReocrd" field.</summary>
    public const int ScheduleReocrdFieldNumber = 8;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleRecord scheduleReocrd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleRecord ScheduleReocrd {
      get { return scheduleReocrd_; }
      set {
        scheduleReocrd_ = value;
      }
    }

    /// <summary>Field number for the "scheduleSceneRecord" field.</summary>
    public const int ScheduleSceneRecordFieldNumber = 9;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleSceneRecord scheduleSceneRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleSceneRecord ScheduleSceneRecord {
      get { return scheduleSceneRecord_; }
      set {
        scheduleSceneRecord_ = value;
      }
    }

    /// <summary>Field number for the "departmentRecord" field.</summary>
    public const int DepartmentRecordFieldNumber = 10;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentRecord departmentRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentRecord DepartmentRecord {
      get { return departmentRecord_; }
      set {
        departmentRecord_ = value;
      }
    }

    /// <summary>Field number for the "departmentNodeRecord" field.</summary>
    public const int DepartmentNodeRecordFieldNumber = 11;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentNodeRecord departmentNodeRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentNodeRecord DepartmentNodeRecord {
      get { return departmentNodeRecord_; }
      set {
        departmentNodeRecord_ = value;
      }
    }

    /// <summary>Field number for the "departmentResourceFolderRecord" field.</summary>
    public const int DepartmentResourceFolderRecordFieldNumber = 12;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentResourceFolderRecord departmentResourceFolderRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentResourceFolderRecord DepartmentResourceFolderRecord {
      get { return departmentResourceFolderRecord_; }
      set {
        departmentResourceFolderRecord_ = value;
      }
    }

    /// <summary>Field number for the "departmentSceneFolderRecord" field.</summary>
    public const int DepartmentSceneFolderRecordFieldNumber = 13;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentSceneFolderRecord departmentSceneFolderRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentSceneFolderRecord DepartmentSceneFolderRecord {
      get { return departmentSceneFolderRecord_; }
      set {
        departmentSceneFolderRecord_ = value;
      }
    }

    /// <summary>Field number for the "connectorEmergencyRecord" field.</summary>
    public const int ConnectorEmergencyRecordFieldNumber = 14;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencyRecord connectorEmergencyRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencyRecord ConnectorEmergencyRecord {
      get { return connectorEmergencyRecord_; }
      set {
        connectorEmergencyRecord_ = value;
      }
    }

    /// <summary>Field number for the "connectorEmergencySceneRecord" field.</summary>
    public const int ConnectorEmergencySceneRecordFieldNumber = 15;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencySceneRecord connectorEmergencySceneRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencySceneRecord ConnectorEmergencySceneRecord {
      get { return connectorEmergencySceneRecord_; }
      set {
        connectorEmergencySceneRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberRecordBlueprint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberRecordBlueprint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (!object.Equals(SceneRecord, other.SceneRecord)) return false;
      if (!object.Equals(ConnectorRecord, other.ConnectorRecord)) return false;
      if (!object.Equals(ConnectorScheduleRecord, other.ConnectorScheduleRecord)) return false;
      if (!object.Equals(ConnectorKindRecord, other.ConnectorKindRecord)) return false;
      if (!object.Equals(ConnectorSceneRecord, other.ConnectorSceneRecord)) return false;
      if (!object.Equals(ConnectorDepartmentRecord, other.ConnectorDepartmentRecord)) return false;
      if (!object.Equals(ScheduleReocrd, other.ScheduleReocrd)) return false;
      if (!object.Equals(ScheduleSceneRecord, other.ScheduleSceneRecord)) return false;
      if (!object.Equals(DepartmentRecord, other.DepartmentRecord)) return false;
      if (!object.Equals(DepartmentNodeRecord, other.DepartmentNodeRecord)) return false;
      if (!object.Equals(DepartmentResourceFolderRecord, other.DepartmentResourceFolderRecord)) return false;
      if (!object.Equals(DepartmentSceneFolderRecord, other.DepartmentSceneFolderRecord)) return false;
      if (!object.Equals(ConnectorEmergencyRecord, other.ConnectorEmergencyRecord)) return false;
      if (!object.Equals(ConnectorEmergencySceneRecord, other.ConnectorEmergencySceneRecord)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default) hash ^= Kind.GetHashCode();
      if (sceneRecord_ != null) hash ^= SceneRecord.GetHashCode();
      if (connectorRecord_ != null) hash ^= ConnectorRecord.GetHashCode();
      if (connectorScheduleRecord_ != null) hash ^= ConnectorScheduleRecord.GetHashCode();
      if (connectorKindRecord_ != null) hash ^= ConnectorKindRecord.GetHashCode();
      if (connectorSceneRecord_ != null) hash ^= ConnectorSceneRecord.GetHashCode();
      if (connectorDepartmentRecord_ != null) hash ^= ConnectorDepartmentRecord.GetHashCode();
      if (scheduleReocrd_ != null) hash ^= ScheduleReocrd.GetHashCode();
      if (scheduleSceneRecord_ != null) hash ^= ScheduleSceneRecord.GetHashCode();
      if (departmentRecord_ != null) hash ^= DepartmentRecord.GetHashCode();
      if (departmentNodeRecord_ != null) hash ^= DepartmentNodeRecord.GetHashCode();
      if (departmentResourceFolderRecord_ != null) hash ^= DepartmentResourceFolderRecord.GetHashCode();
      if (departmentSceneFolderRecord_ != null) hash ^= DepartmentSceneFolderRecord.GetHashCode();
      if (connectorEmergencyRecord_ != null) hash ^= ConnectorEmergencyRecord.GetHashCode();
      if (connectorEmergencySceneRecord_ != null) hash ^= ConnectorEmergencySceneRecord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (sceneRecord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SceneRecord);
      }
      if (connectorRecord_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConnectorRecord);
      }
      if (connectorScheduleRecord_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConnectorScheduleRecord);
      }
      if (connectorKindRecord_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ConnectorKindRecord);
      }
      if (connectorSceneRecord_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ConnectorSceneRecord);
      }
      if (connectorDepartmentRecord_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ConnectorDepartmentRecord);
      }
      if (scheduleReocrd_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ScheduleReocrd);
      }
      if (scheduleSceneRecord_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ScheduleSceneRecord);
      }
      if (departmentRecord_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DepartmentRecord);
      }
      if (departmentNodeRecord_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DepartmentNodeRecord);
      }
      if (departmentResourceFolderRecord_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DepartmentResourceFolderRecord);
      }
      if (departmentSceneFolderRecord_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DepartmentSceneFolderRecord);
      }
      if (connectorEmergencyRecord_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ConnectorEmergencyRecord);
      }
      if (connectorEmergencySceneRecord_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ConnectorEmergencySceneRecord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (sceneRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneRecord);
      }
      if (connectorRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorRecord);
      }
      if (connectorScheduleRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorScheduleRecord);
      }
      if (connectorKindRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorKindRecord);
      }
      if (connectorSceneRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorSceneRecord);
      }
      if (connectorDepartmentRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorDepartmentRecord);
      }
      if (scheduleReocrd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduleReocrd);
      }
      if (scheduleSceneRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduleSceneRecord);
      }
      if (departmentRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartmentRecord);
      }
      if (departmentNodeRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartmentNodeRecord);
      }
      if (departmentResourceFolderRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartmentResourceFolderRecord);
      }
      if (departmentSceneFolderRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartmentSceneFolderRecord);
      }
      if (connectorEmergencyRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorEmergencyRecord);
      }
      if (connectorEmergencySceneRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorEmergencySceneRecord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberRecordBlueprint other) {
      if (other == null) {
        return;
      }
      if (other.Kind != global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default) {
        Kind = other.Kind;
      }
      if (other.sceneRecord_ != null) {
        if (sceneRecord_ == null) {
          SceneRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberSceneRecord();
        }
        SceneRecord.MergeFrom(other.SceneRecord);
      }
      if (other.connectorRecord_ != null) {
        if (connectorRecord_ == null) {
          ConnectorRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorRecord();
        }
        ConnectorRecord.MergeFrom(other.ConnectorRecord);
      }
      if (other.connectorScheduleRecord_ != null) {
        if (connectorScheduleRecord_ == null) {
          ConnectorScheduleRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorScheduleRecord();
        }
        ConnectorScheduleRecord.MergeFrom(other.ConnectorScheduleRecord);
      }
      if (other.connectorKindRecord_ != null) {
        if (connectorKindRecord_ == null) {
          ConnectorKindRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorKindRecord();
        }
        ConnectorKindRecord.MergeFrom(other.ConnectorKindRecord);
      }
      if (other.connectorSceneRecord_ != null) {
        if (connectorSceneRecord_ == null) {
          ConnectorSceneRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorSceneRecord();
        }
        ConnectorSceneRecord.MergeFrom(other.ConnectorSceneRecord);
      }
      if (other.connectorDepartmentRecord_ != null) {
        if (connectorDepartmentRecord_ == null) {
          ConnectorDepartmentRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorDepartmentRecord();
        }
        ConnectorDepartmentRecord.MergeFrom(other.ConnectorDepartmentRecord);
      }
      if (other.scheduleReocrd_ != null) {
        if (scheduleReocrd_ == null) {
          ScheduleReocrd = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleRecord();
        }
        ScheduleReocrd.MergeFrom(other.ScheduleReocrd);
      }
      if (other.scheduleSceneRecord_ != null) {
        if (scheduleSceneRecord_ == null) {
          ScheduleSceneRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleSceneRecord();
        }
        ScheduleSceneRecord.MergeFrom(other.ScheduleSceneRecord);
      }
      if (other.departmentRecord_ != null) {
        if (departmentRecord_ == null) {
          DepartmentRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentRecord();
        }
        DepartmentRecord.MergeFrom(other.DepartmentRecord);
      }
      if (other.departmentNodeRecord_ != null) {
        if (departmentNodeRecord_ == null) {
          DepartmentNodeRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentNodeRecord();
        }
        DepartmentNodeRecord.MergeFrom(other.DepartmentNodeRecord);
      }
      if (other.departmentResourceFolderRecord_ != null) {
        if (departmentResourceFolderRecord_ == null) {
          DepartmentResourceFolderRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentResourceFolderRecord();
        }
        DepartmentResourceFolderRecord.MergeFrom(other.DepartmentResourceFolderRecord);
      }
      if (other.departmentSceneFolderRecord_ != null) {
        if (departmentSceneFolderRecord_ == null) {
          DepartmentSceneFolderRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentSceneFolderRecord();
        }
        DepartmentSceneFolderRecord.MergeFrom(other.DepartmentSceneFolderRecord);
      }
      if (other.connectorEmergencyRecord_ != null) {
        if (connectorEmergencyRecord_ == null) {
          ConnectorEmergencyRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencyRecord();
        }
        ConnectorEmergencyRecord.MergeFrom(other.ConnectorEmergencyRecord);
      }
      if (other.connectorEmergencySceneRecord_ != null) {
        if (connectorEmergencySceneRecord_ == null) {
          ConnectorEmergencySceneRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencySceneRecord();
        }
        ConnectorEmergencySceneRecord.MergeFrom(other.ConnectorEmergencySceneRecord);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND) input.ReadEnum();
            break;
          }
          case 18: {
            if (sceneRecord_ == null) {
              SceneRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberSceneRecord();
            }
            input.ReadMessage(SceneRecord);
            break;
          }
          case 26: {
            if (connectorRecord_ == null) {
              ConnectorRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorRecord();
            }
            input.ReadMessage(ConnectorRecord);
            break;
          }
          case 34: {
            if (connectorScheduleRecord_ == null) {
              ConnectorScheduleRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorScheduleRecord();
            }
            input.ReadMessage(ConnectorScheduleRecord);
            break;
          }
          case 42: {
            if (connectorKindRecord_ == null) {
              ConnectorKindRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorKindRecord();
            }
            input.ReadMessage(ConnectorKindRecord);
            break;
          }
          case 50: {
            if (connectorSceneRecord_ == null) {
              ConnectorSceneRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorSceneRecord();
            }
            input.ReadMessage(ConnectorSceneRecord);
            break;
          }
          case 58: {
            if (connectorDepartmentRecord_ == null) {
              ConnectorDepartmentRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorDepartmentRecord();
            }
            input.ReadMessage(ConnectorDepartmentRecord);
            break;
          }
          case 66: {
            if (scheduleReocrd_ == null) {
              ScheduleReocrd = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleRecord();
            }
            input.ReadMessage(ScheduleReocrd);
            break;
          }
          case 74: {
            if (scheduleSceneRecord_ == null) {
              ScheduleSceneRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberScheduleSceneRecord();
            }
            input.ReadMessage(ScheduleSceneRecord);
            break;
          }
          case 82: {
            if (departmentRecord_ == null) {
              DepartmentRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentRecord();
            }
            input.ReadMessage(DepartmentRecord);
            break;
          }
          case 90: {
            if (departmentNodeRecord_ == null) {
              DepartmentNodeRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentNodeRecord();
            }
            input.ReadMessage(DepartmentNodeRecord);
            break;
          }
          case 98: {
            if (departmentResourceFolderRecord_ == null) {
              DepartmentResourceFolderRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentResourceFolderRecord();
            }
            input.ReadMessage(DepartmentResourceFolderRecord);
            break;
          }
          case 106: {
            if (departmentSceneFolderRecord_ == null) {
              DepartmentSceneFolderRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberDepartmentSceneFolderRecord();
            }
            input.ReadMessage(DepartmentSceneFolderRecord);
            break;
          }
          case 114: {
            if (connectorEmergencyRecord_ == null) {
              ConnectorEmergencyRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencyRecord();
            }
            input.ReadMessage(ConnectorEmergencyRecord);
            break;
          }
          case 122: {
            if (connectorEmergencySceneRecord_ == null) {
              ConnectorEmergencySceneRecord = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Types.MemberConnectorEmergencySceneRecord();
            }
            input.ReadMessage(ConnectorEmergencySceneRecord);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MemberRecordBlueprint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MemberSceneRecord : pb::IMessage<MemberSceneRecord> {
        private static readonly pb::MessageParser<MemberSceneRecord> _parser = new pb::MessageParser<MemberSceneRecord>(() => new MemberSceneRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberSceneRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberSceneRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberSceneRecord(MemberSceneRecord other) : this() {
          sceneId_ = other.sceneId_;
          sceneName_ = other.sceneName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberSceneRecord Clone() {
          return new MemberSceneRecord(this);
        }

        /// <summary>Field number for the "sceneId" field.</summary>
        public const int SceneIdFieldNumber = 1;
        private long sceneId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long SceneId {
          get { return sceneId_; }
          set {
            sceneId_ = value;
          }
        }

        /// <summary>Field number for the "sceneName" field.</summary>
        public const int SceneNameFieldNumber = 2;
        private string sceneName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SceneName {
          get { return sceneName_; }
          set {
            sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberSceneRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberSceneRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SceneId != other.SceneId) return false;
          if (SceneName != other.SceneName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SceneId != 0L) hash ^= SceneId.GetHashCode();
          if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SceneId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(SceneId);
          }
          if (SceneName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(SceneName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SceneId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
          }
          if (SceneName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberSceneRecord other) {
          if (other == null) {
            return;
          }
          if (other.SceneId != 0L) {
            SceneId = other.SceneId;
          }
          if (other.SceneName.Length != 0) {
            SceneName = other.SceneName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SceneId = input.ReadInt64();
                break;
              }
              case 18: {
                SceneName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberScheduleRecord : pb::IMessage<MemberScheduleRecord> {
        private static readonly pb::MessageParser<MemberScheduleRecord> _parser = new pb::MessageParser<MemberScheduleRecord>(() => new MemberScheduleRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberScheduleRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberScheduleRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberScheduleRecord(MemberScheduleRecord other) : this() {
          scheduleId_ = other.scheduleId_;
          scheduleName_ = other.scheduleName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberScheduleRecord Clone() {
          return new MemberScheduleRecord(this);
        }

        /// <summary>Field number for the "scheduleId" field.</summary>
        public const int ScheduleIdFieldNumber = 1;
        private long scheduleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ScheduleId {
          get { return scheduleId_; }
          set {
            scheduleId_ = value;
          }
        }

        /// <summary>Field number for the "scheduleName" field.</summary>
        public const int ScheduleNameFieldNumber = 2;
        private string scheduleName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ScheduleName {
          get { return scheduleName_; }
          set {
            scheduleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberScheduleRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberScheduleRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ScheduleId != other.ScheduleId) return false;
          if (ScheduleName != other.ScheduleName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ScheduleId != 0L) hash ^= ScheduleId.GetHashCode();
          if (ScheduleName.Length != 0) hash ^= ScheduleName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ScheduleId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ScheduleId);
          }
          if (ScheduleName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ScheduleName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ScheduleId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScheduleId);
          }
          if (ScheduleName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ScheduleName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberScheduleRecord other) {
          if (other == null) {
            return;
          }
          if (other.ScheduleId != 0L) {
            ScheduleId = other.ScheduleId;
          }
          if (other.ScheduleName.Length != 0) {
            ScheduleName = other.ScheduleName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ScheduleId = input.ReadInt64();
                break;
              }
              case 18: {
                ScheduleName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberScheduleSceneRecord : pb::IMessage<MemberScheduleSceneRecord> {
        private static readonly pb::MessageParser<MemberScheduleSceneRecord> _parser = new pb::MessageParser<MemberScheduleSceneRecord>(() => new MemberScheduleSceneRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberScheduleSceneRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberScheduleSceneRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberScheduleSceneRecord(MemberScheduleSceneRecord other) : this() {
          scheduleSceneId_ = other.scheduleSceneId_;
          scheduleSceneName_ = other.scheduleSceneName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberScheduleSceneRecord Clone() {
          return new MemberScheduleSceneRecord(this);
        }

        /// <summary>Field number for the "scheduleSceneId" field.</summary>
        public const int ScheduleSceneIdFieldNumber = 1;
        private long scheduleSceneId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ScheduleSceneId {
          get { return scheduleSceneId_; }
          set {
            scheduleSceneId_ = value;
          }
        }

        /// <summary>Field number for the "scheduleSceneName" field.</summary>
        public const int ScheduleSceneNameFieldNumber = 2;
        private string scheduleSceneName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ScheduleSceneName {
          get { return scheduleSceneName_; }
          set {
            scheduleSceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberScheduleSceneRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberScheduleSceneRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ScheduleSceneId != other.ScheduleSceneId) return false;
          if (ScheduleSceneName != other.ScheduleSceneName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ScheduleSceneId != 0L) hash ^= ScheduleSceneId.GetHashCode();
          if (ScheduleSceneName.Length != 0) hash ^= ScheduleSceneName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ScheduleSceneId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ScheduleSceneId);
          }
          if (ScheduleSceneName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ScheduleSceneName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ScheduleSceneId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScheduleSceneId);
          }
          if (ScheduleSceneName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ScheduleSceneName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberScheduleSceneRecord other) {
          if (other == null) {
            return;
          }
          if (other.ScheduleSceneId != 0L) {
            ScheduleSceneId = other.ScheduleSceneId;
          }
          if (other.ScheduleSceneName.Length != 0) {
            ScheduleSceneName = other.ScheduleSceneName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ScheduleSceneId = input.ReadInt64();
                break;
              }
              case 18: {
                ScheduleSceneName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberConnectorKindRecord : pb::IMessage<MemberConnectorKindRecord> {
        private static readonly pb::MessageParser<MemberConnectorKindRecord> _parser = new pb::MessageParser<MemberConnectorKindRecord>(() => new MemberConnectorKindRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberConnectorKindRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorKindRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorKindRecord(MemberConnectorKindRecord other) : this() {
          connectorId_ = other.connectorId_;
          connectorName_ = other.connectorName_;
          oldKind_ = other.oldKind_;
          kind_ = other.kind_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorKindRecord Clone() {
          return new MemberConnectorKindRecord(this);
        }

        /// <summary>Field number for the "connectorId" field.</summary>
        public const int ConnectorIdFieldNumber = 1;
        private long connectorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectorId {
          get { return connectorId_; }
          set {
            connectorId_ = value;
          }
        }

        /// <summary>Field number for the "connectorName" field.</summary>
        public const int ConnectorNameFieldNumber = 2;
        private string connectorName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConnectorName {
          get { return connectorName_; }
          set {
            connectorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "oldKind" field.</summary>
        public const int OldKindFieldNumber = 3;
        private global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND oldKind_ = global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND OldKind {
          get { return oldKind_; }
          set {
            oldKind_ = value;
          }
        }

        /// <summary>Field number for the "kind" field.</summary>
        public const int KindFieldNumber = 4;
        private global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND kind_ = global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND Kind {
          get { return kind_; }
          set {
            kind_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberConnectorKindRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberConnectorKindRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConnectorId != other.ConnectorId) return false;
          if (ConnectorName != other.ConnectorName) return false;
          if (OldKind != other.OldKind) return false;
          if (Kind != other.Kind) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConnectorId != 0L) hash ^= ConnectorId.GetHashCode();
          if (ConnectorName.Length != 0) hash ^= ConnectorName.GetHashCode();
          if (OldKind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) hash ^= OldKind.GetHashCode();
          if (Kind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) hash ^= Kind.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConnectorId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ConnectorName);
          }
          if (OldKind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
            output.WriteRawTag(24);
            output.WriteEnum((int) OldKind);
          }
          if (Kind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Kind);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConnectorId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectorName);
          }
          if (OldKind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OldKind);
          }
          if (Kind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberConnectorKindRecord other) {
          if (other == null) {
            return;
          }
          if (other.ConnectorId != 0L) {
            ConnectorId = other.ConnectorId;
          }
          if (other.ConnectorName.Length != 0) {
            ConnectorName = other.ConnectorName;
          }
          if (other.OldKind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
            OldKind = other.OldKind;
          }
          if (other.Kind != global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND.Default) {
            Kind = other.Kind;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConnectorId = input.ReadInt64();
                break;
              }
              case 18: {
                ConnectorName = input.ReadString();
                break;
              }
              case 24: {
                OldKind = (global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND) input.ReadEnum();
                break;
              }
              case 32: {
                Kind = (global::Saturn.Backends.Protocols.Common.CONNECTOR_REGISTER_KIND) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberConnectorRecord : pb::IMessage<MemberConnectorRecord> {
        private static readonly pb::MessageParser<MemberConnectorRecord> _parser = new pb::MessageParser<MemberConnectorRecord>(() => new MemberConnectorRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberConnectorRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorRecord(MemberConnectorRecord other) : this() {
          connectorId_ = other.connectorId_;
          connectorName_ = other.connectorName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorRecord Clone() {
          return new MemberConnectorRecord(this);
        }

        /// <summary>Field number for the "connectorId" field.</summary>
        public const int ConnectorIdFieldNumber = 1;
        private long connectorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectorId {
          get { return connectorId_; }
          set {
            connectorId_ = value;
          }
        }

        /// <summary>Field number for the "connectorName" field.</summary>
        public const int ConnectorNameFieldNumber = 2;
        private string connectorName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConnectorName {
          get { return connectorName_; }
          set {
            connectorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberConnectorRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberConnectorRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConnectorId != other.ConnectorId) return false;
          if (ConnectorName != other.ConnectorName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConnectorId != 0L) hash ^= ConnectorId.GetHashCode();
          if (ConnectorName.Length != 0) hash ^= ConnectorName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConnectorId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ConnectorName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConnectorId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectorName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberConnectorRecord other) {
          if (other == null) {
            return;
          }
          if (other.ConnectorId != 0L) {
            ConnectorId = other.ConnectorId;
          }
          if (other.ConnectorName.Length != 0) {
            ConnectorName = other.ConnectorName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConnectorId = input.ReadInt64();
                break;
              }
              case 18: {
                ConnectorName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberConnectorEmergencyRecord : pb::IMessage<MemberConnectorEmergencyRecord> {
        private static readonly pb::MessageParser<MemberConnectorEmergencyRecord> _parser = new pb::MessageParser<MemberConnectorEmergencyRecord>(() => new MemberConnectorEmergencyRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberConnectorEmergencyRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorEmergencyRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorEmergencyRecord(MemberConnectorEmergencyRecord other) : this() {
          connectorId_ = other.connectorId_;
          connectorName_ = other.connectorName_;
          oldEmergency_ = other.oldEmergency_;
          newEmergency_ = other.newEmergency_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorEmergencyRecord Clone() {
          return new MemberConnectorEmergencyRecord(this);
        }

        /// <summary>Field number for the "connectorId" field.</summary>
        public const int ConnectorIdFieldNumber = 1;
        private long connectorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectorId {
          get { return connectorId_; }
          set {
            connectorId_ = value;
          }
        }

        /// <summary>Field number for the "connectorName" field.</summary>
        public const int ConnectorNameFieldNumber = 2;
        private string connectorName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConnectorName {
          get { return connectorName_; }
          set {
            connectorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "oldEmergency" field.</summary>
        public const int OldEmergencyFieldNumber = 3;
        private bool oldEmergency_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool OldEmergency {
          get { return oldEmergency_; }
          set {
            oldEmergency_ = value;
          }
        }

        /// <summary>Field number for the "newEmergency" field.</summary>
        public const int NewEmergencyFieldNumber = 4;
        private bool newEmergency_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NewEmergency {
          get { return newEmergency_; }
          set {
            newEmergency_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberConnectorEmergencyRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberConnectorEmergencyRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConnectorId != other.ConnectorId) return false;
          if (ConnectorName != other.ConnectorName) return false;
          if (OldEmergency != other.OldEmergency) return false;
          if (NewEmergency != other.NewEmergency) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConnectorId != 0L) hash ^= ConnectorId.GetHashCode();
          if (ConnectorName.Length != 0) hash ^= ConnectorName.GetHashCode();
          if (OldEmergency != false) hash ^= OldEmergency.GetHashCode();
          if (NewEmergency != false) hash ^= NewEmergency.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConnectorId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ConnectorName);
          }
          if (OldEmergency != false) {
            output.WriteRawTag(24);
            output.WriteBool(OldEmergency);
          }
          if (NewEmergency != false) {
            output.WriteRawTag(32);
            output.WriteBool(NewEmergency);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConnectorId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectorName);
          }
          if (OldEmergency != false) {
            size += 1 + 1;
          }
          if (NewEmergency != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberConnectorEmergencyRecord other) {
          if (other == null) {
            return;
          }
          if (other.ConnectorId != 0L) {
            ConnectorId = other.ConnectorId;
          }
          if (other.ConnectorName.Length != 0) {
            ConnectorName = other.ConnectorName;
          }
          if (other.OldEmergency != false) {
            OldEmergency = other.OldEmergency;
          }
          if (other.NewEmergency != false) {
            NewEmergency = other.NewEmergency;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConnectorId = input.ReadInt64();
                break;
              }
              case 18: {
                ConnectorName = input.ReadString();
                break;
              }
              case 24: {
                OldEmergency = input.ReadBool();
                break;
              }
              case 32: {
                NewEmergency = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberConnectorScheduleRecord : pb::IMessage<MemberConnectorScheduleRecord> {
        private static readonly pb::MessageParser<MemberConnectorScheduleRecord> _parser = new pb::MessageParser<MemberConnectorScheduleRecord>(() => new MemberConnectorScheduleRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberConnectorScheduleRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorScheduleRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorScheduleRecord(MemberConnectorScheduleRecord other) : this() {
          connectorId_ = other.connectorId_;
          connectorName_ = other.connectorName_;
          connectorScheduleSceneId_ = other.connectorScheduleSceneId_;
          sceneScheduleName_ = other.sceneScheduleName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorScheduleRecord Clone() {
          return new MemberConnectorScheduleRecord(this);
        }

        /// <summary>Field number for the "connectorId" field.</summary>
        public const int ConnectorIdFieldNumber = 1;
        private long connectorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectorId {
          get { return connectorId_; }
          set {
            connectorId_ = value;
          }
        }

        /// <summary>Field number for the "connectorName" field.</summary>
        public const int ConnectorNameFieldNumber = 2;
        private string connectorName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConnectorName {
          get { return connectorName_; }
          set {
            connectorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "connectorScheduleSceneId" field.</summary>
        public const int ConnectorScheduleSceneIdFieldNumber = 3;
        private long connectorScheduleSceneId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectorScheduleSceneId {
          get { return connectorScheduleSceneId_; }
          set {
            connectorScheduleSceneId_ = value;
          }
        }

        /// <summary>Field number for the "sceneScheduleName" field.</summary>
        public const int SceneScheduleNameFieldNumber = 4;
        private string sceneScheduleName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SceneScheduleName {
          get { return sceneScheduleName_; }
          set {
            sceneScheduleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberConnectorScheduleRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberConnectorScheduleRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConnectorId != other.ConnectorId) return false;
          if (ConnectorName != other.ConnectorName) return false;
          if (ConnectorScheduleSceneId != other.ConnectorScheduleSceneId) return false;
          if (SceneScheduleName != other.SceneScheduleName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConnectorId != 0L) hash ^= ConnectorId.GetHashCode();
          if (ConnectorName.Length != 0) hash ^= ConnectorName.GetHashCode();
          if (ConnectorScheduleSceneId != 0L) hash ^= ConnectorScheduleSceneId.GetHashCode();
          if (SceneScheduleName.Length != 0) hash ^= SceneScheduleName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConnectorId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ConnectorName);
          }
          if (ConnectorScheduleSceneId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(ConnectorScheduleSceneId);
          }
          if (SceneScheduleName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SceneScheduleName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConnectorId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectorName);
          }
          if (ConnectorScheduleSceneId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorScheduleSceneId);
          }
          if (SceneScheduleName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneScheduleName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberConnectorScheduleRecord other) {
          if (other == null) {
            return;
          }
          if (other.ConnectorId != 0L) {
            ConnectorId = other.ConnectorId;
          }
          if (other.ConnectorName.Length != 0) {
            ConnectorName = other.ConnectorName;
          }
          if (other.ConnectorScheduleSceneId != 0L) {
            ConnectorScheduleSceneId = other.ConnectorScheduleSceneId;
          }
          if (other.SceneScheduleName.Length != 0) {
            SceneScheduleName = other.SceneScheduleName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConnectorId = input.ReadInt64();
                break;
              }
              case 18: {
                ConnectorName = input.ReadString();
                break;
              }
              case 24: {
                ConnectorScheduleSceneId = input.ReadInt64();
                break;
              }
              case 34: {
                SceneScheduleName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberConnectorSceneRecord : pb::IMessage<MemberConnectorSceneRecord> {
        private static readonly pb::MessageParser<MemberConnectorSceneRecord> _parser = new pb::MessageParser<MemberConnectorSceneRecord>(() => new MemberConnectorSceneRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberConnectorSceneRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorSceneRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorSceneRecord(MemberConnectorSceneRecord other) : this() {
          connectorId_ = other.connectorId_;
          connectorName_ = other.connectorName_;
          sceneId_ = other.sceneId_;
          sceneName_ = other.sceneName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorSceneRecord Clone() {
          return new MemberConnectorSceneRecord(this);
        }

        /// <summary>Field number for the "connectorId" field.</summary>
        public const int ConnectorIdFieldNumber = 1;
        private long connectorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectorId {
          get { return connectorId_; }
          set {
            connectorId_ = value;
          }
        }

        /// <summary>Field number for the "connectorName" field.</summary>
        public const int ConnectorNameFieldNumber = 2;
        private string connectorName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConnectorName {
          get { return connectorName_; }
          set {
            connectorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sceneId" field.</summary>
        public const int SceneIdFieldNumber = 3;
        private long sceneId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long SceneId {
          get { return sceneId_; }
          set {
            sceneId_ = value;
          }
        }

        /// <summary>Field number for the "sceneName" field.</summary>
        public const int SceneNameFieldNumber = 4;
        private string sceneName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SceneName {
          get { return sceneName_; }
          set {
            sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberConnectorSceneRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberConnectorSceneRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConnectorId != other.ConnectorId) return false;
          if (ConnectorName != other.ConnectorName) return false;
          if (SceneId != other.SceneId) return false;
          if (SceneName != other.SceneName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConnectorId != 0L) hash ^= ConnectorId.GetHashCode();
          if (ConnectorName.Length != 0) hash ^= ConnectorName.GetHashCode();
          if (SceneId != 0L) hash ^= SceneId.GetHashCode();
          if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConnectorId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ConnectorName);
          }
          if (SceneId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(SceneId);
          }
          if (SceneName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SceneName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConnectorId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectorName);
          }
          if (SceneId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
          }
          if (SceneName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberConnectorSceneRecord other) {
          if (other == null) {
            return;
          }
          if (other.ConnectorId != 0L) {
            ConnectorId = other.ConnectorId;
          }
          if (other.ConnectorName.Length != 0) {
            ConnectorName = other.ConnectorName;
          }
          if (other.SceneId != 0L) {
            SceneId = other.SceneId;
          }
          if (other.SceneName.Length != 0) {
            SceneName = other.SceneName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConnectorId = input.ReadInt64();
                break;
              }
              case 18: {
                ConnectorName = input.ReadString();
                break;
              }
              case 24: {
                SceneId = input.ReadInt64();
                break;
              }
              case 34: {
                SceneName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberConnectorEmergencySceneRecord : pb::IMessage<MemberConnectorEmergencySceneRecord> {
        private static readonly pb::MessageParser<MemberConnectorEmergencySceneRecord> _parser = new pb::MessageParser<MemberConnectorEmergencySceneRecord>(() => new MemberConnectorEmergencySceneRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberConnectorEmergencySceneRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorEmergencySceneRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorEmergencySceneRecord(MemberConnectorEmergencySceneRecord other) : this() {
          connectorId_ = other.connectorId_;
          connectorName_ = other.connectorName_;
          sceneId_ = other.sceneId_;
          sceneName_ = other.sceneName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorEmergencySceneRecord Clone() {
          return new MemberConnectorEmergencySceneRecord(this);
        }

        /// <summary>Field number for the "connectorId" field.</summary>
        public const int ConnectorIdFieldNumber = 1;
        private long connectorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectorId {
          get { return connectorId_; }
          set {
            connectorId_ = value;
          }
        }

        /// <summary>Field number for the "connectorName" field.</summary>
        public const int ConnectorNameFieldNumber = 2;
        private string connectorName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConnectorName {
          get { return connectorName_; }
          set {
            connectorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sceneId" field.</summary>
        public const int SceneIdFieldNumber = 3;
        private long sceneId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long SceneId {
          get { return sceneId_; }
          set {
            sceneId_ = value;
          }
        }

        /// <summary>Field number for the "sceneName" field.</summary>
        public const int SceneNameFieldNumber = 4;
        private string sceneName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SceneName {
          get { return sceneName_; }
          set {
            sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberConnectorEmergencySceneRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberConnectorEmergencySceneRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConnectorId != other.ConnectorId) return false;
          if (ConnectorName != other.ConnectorName) return false;
          if (SceneId != other.SceneId) return false;
          if (SceneName != other.SceneName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConnectorId != 0L) hash ^= ConnectorId.GetHashCode();
          if (ConnectorName.Length != 0) hash ^= ConnectorName.GetHashCode();
          if (SceneId != 0L) hash ^= SceneId.GetHashCode();
          if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConnectorId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ConnectorName);
          }
          if (SceneId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(SceneId);
          }
          if (SceneName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SceneName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConnectorId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectorName);
          }
          if (SceneId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
          }
          if (SceneName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberConnectorEmergencySceneRecord other) {
          if (other == null) {
            return;
          }
          if (other.ConnectorId != 0L) {
            ConnectorId = other.ConnectorId;
          }
          if (other.ConnectorName.Length != 0) {
            ConnectorName = other.ConnectorName;
          }
          if (other.SceneId != 0L) {
            SceneId = other.SceneId;
          }
          if (other.SceneName.Length != 0) {
            SceneName = other.SceneName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConnectorId = input.ReadInt64();
                break;
              }
              case 18: {
                ConnectorName = input.ReadString();
                break;
              }
              case 24: {
                SceneId = input.ReadInt64();
                break;
              }
              case 34: {
                SceneName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberConnectorDepartmentRecord : pb::IMessage<MemberConnectorDepartmentRecord> {
        private static readonly pb::MessageParser<MemberConnectorDepartmentRecord> _parser = new pb::MessageParser<MemberConnectorDepartmentRecord>(() => new MemberConnectorDepartmentRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberConnectorDepartmentRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorDepartmentRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorDepartmentRecord(MemberConnectorDepartmentRecord other) : this() {
          connectorId_ = other.connectorId_;
          connectorName_ = other.connectorName_;
          departmentId_ = other.departmentId_;
          departmentName_ = other.departmentName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberConnectorDepartmentRecord Clone() {
          return new MemberConnectorDepartmentRecord(this);
        }

        /// <summary>Field number for the "connectorId" field.</summary>
        public const int ConnectorIdFieldNumber = 1;
        private long connectorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectorId {
          get { return connectorId_; }
          set {
            connectorId_ = value;
          }
        }

        /// <summary>Field number for the "connectorName" field.</summary>
        public const int ConnectorNameFieldNumber = 2;
        private string connectorName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConnectorName {
          get { return connectorName_; }
          set {
            connectorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "departmentId" field.</summary>
        public const int DepartmentIdFieldNumber = 3;
        private long departmentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DepartmentId {
          get { return departmentId_; }
          set {
            departmentId_ = value;
          }
        }

        /// <summary>Field number for the "departmentName" field.</summary>
        public const int DepartmentNameFieldNumber = 4;
        private string departmentName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DepartmentName {
          get { return departmentName_; }
          set {
            departmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberConnectorDepartmentRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberConnectorDepartmentRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConnectorId != other.ConnectorId) return false;
          if (ConnectorName != other.ConnectorName) return false;
          if (DepartmentId != other.DepartmentId) return false;
          if (DepartmentName != other.DepartmentName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConnectorId != 0L) hash ^= ConnectorId.GetHashCode();
          if (ConnectorName.Length != 0) hash ^= ConnectorName.GetHashCode();
          if (DepartmentId != 0L) hash ^= DepartmentId.GetHashCode();
          if (DepartmentName.Length != 0) hash ^= DepartmentName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConnectorId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ConnectorName);
          }
          if (DepartmentId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(DepartmentId);
          }
          if (DepartmentName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(DepartmentName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConnectorId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorId);
          }
          if (ConnectorName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectorName);
          }
          if (DepartmentId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentId);
          }
          if (DepartmentName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartmentName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberConnectorDepartmentRecord other) {
          if (other == null) {
            return;
          }
          if (other.ConnectorId != 0L) {
            ConnectorId = other.ConnectorId;
          }
          if (other.ConnectorName.Length != 0) {
            ConnectorName = other.ConnectorName;
          }
          if (other.DepartmentId != 0L) {
            DepartmentId = other.DepartmentId;
          }
          if (other.DepartmentName.Length != 0) {
            DepartmentName = other.DepartmentName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConnectorId = input.ReadInt64();
                break;
              }
              case 18: {
                ConnectorName = input.ReadString();
                break;
              }
              case 24: {
                DepartmentId = input.ReadInt64();
                break;
              }
              case 34: {
                DepartmentName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberDepartmentRecord : pb::IMessage<MemberDepartmentRecord> {
        private static readonly pb::MessageParser<MemberDepartmentRecord> _parser = new pb::MessageParser<MemberDepartmentRecord>(() => new MemberDepartmentRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberDepartmentRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentRecord(MemberDepartmentRecord other) : this() {
          departmentId_ = other.departmentId_;
          departmentName_ = other.departmentName_;
          newDepartmentName_ = other.newDepartmentName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentRecord Clone() {
          return new MemberDepartmentRecord(this);
        }

        /// <summary>Field number for the "departmentId" field.</summary>
        public const int DepartmentIdFieldNumber = 1;
        private long departmentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DepartmentId {
          get { return departmentId_; }
          set {
            departmentId_ = value;
          }
        }

        /// <summary>Field number for the "departmentName" field.</summary>
        public const int DepartmentNameFieldNumber = 2;
        private string departmentName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DepartmentName {
          get { return departmentName_; }
          set {
            departmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "newDepartmentName" field.</summary>
        public const int NewDepartmentNameFieldNumber = 3;
        private string newDepartmentName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NewDepartmentName {
          get { return newDepartmentName_; }
          set {
            newDepartmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberDepartmentRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberDepartmentRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DepartmentId != other.DepartmentId) return false;
          if (DepartmentName != other.DepartmentName) return false;
          if (NewDepartmentName != other.NewDepartmentName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DepartmentId != 0L) hash ^= DepartmentId.GetHashCode();
          if (DepartmentName.Length != 0) hash ^= DepartmentName.GetHashCode();
          if (NewDepartmentName.Length != 0) hash ^= NewDepartmentName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DepartmentId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(DepartmentId);
          }
          if (DepartmentName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DepartmentName);
          }
          if (NewDepartmentName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(NewDepartmentName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DepartmentId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentId);
          }
          if (DepartmentName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartmentName);
          }
          if (NewDepartmentName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NewDepartmentName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberDepartmentRecord other) {
          if (other == null) {
            return;
          }
          if (other.DepartmentId != 0L) {
            DepartmentId = other.DepartmentId;
          }
          if (other.DepartmentName.Length != 0) {
            DepartmentName = other.DepartmentName;
          }
          if (other.NewDepartmentName.Length != 0) {
            NewDepartmentName = other.NewDepartmentName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DepartmentId = input.ReadInt64();
                break;
              }
              case 18: {
                DepartmentName = input.ReadString();
                break;
              }
              case 26: {
                NewDepartmentName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberDepartmentNodeRecord : pb::IMessage<MemberDepartmentNodeRecord> {
        private static readonly pb::MessageParser<MemberDepartmentNodeRecord> _parser = new pb::MessageParser<MemberDepartmentNodeRecord>(() => new MemberDepartmentNodeRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberDepartmentNodeRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentNodeRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentNodeRecord(MemberDepartmentNodeRecord other) : this() {
          parentDepartmentId_ = other.parentDepartmentId_;
          parentDepartmentName_ = other.parentDepartmentName_;
          newParentDepartmentId_ = other.newParentDepartmentId_;
          newParentDepartmentName_ = other.newParentDepartmentName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentNodeRecord Clone() {
          return new MemberDepartmentNodeRecord(this);
        }

        /// <summary>Field number for the "parentDepartmentId" field.</summary>
        public const int ParentDepartmentIdFieldNumber = 1;
        private long parentDepartmentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ParentDepartmentId {
          get { return parentDepartmentId_; }
          set {
            parentDepartmentId_ = value;
          }
        }

        /// <summary>Field number for the "parentDepartmentName" field.</summary>
        public const int ParentDepartmentNameFieldNumber = 2;
        private string parentDepartmentName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ParentDepartmentName {
          get { return parentDepartmentName_; }
          set {
            parentDepartmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "newParentDepartmentId" field.</summary>
        public const int NewParentDepartmentIdFieldNumber = 3;
        private long newParentDepartmentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long NewParentDepartmentId {
          get { return newParentDepartmentId_; }
          set {
            newParentDepartmentId_ = value;
          }
        }

        /// <summary>Field number for the "newParentDepartmentName" field.</summary>
        public const int NewParentDepartmentNameFieldNumber = 4;
        private string newParentDepartmentName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NewParentDepartmentName {
          get { return newParentDepartmentName_; }
          set {
            newParentDepartmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberDepartmentNodeRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberDepartmentNodeRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ParentDepartmentId != other.ParentDepartmentId) return false;
          if (ParentDepartmentName != other.ParentDepartmentName) return false;
          if (NewParentDepartmentId != other.NewParentDepartmentId) return false;
          if (NewParentDepartmentName != other.NewParentDepartmentName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ParentDepartmentId != 0L) hash ^= ParentDepartmentId.GetHashCode();
          if (ParentDepartmentName.Length != 0) hash ^= ParentDepartmentName.GetHashCode();
          if (NewParentDepartmentId != 0L) hash ^= NewParentDepartmentId.GetHashCode();
          if (NewParentDepartmentName.Length != 0) hash ^= NewParentDepartmentName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ParentDepartmentId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ParentDepartmentId);
          }
          if (ParentDepartmentName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ParentDepartmentName);
          }
          if (NewParentDepartmentId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(NewParentDepartmentId);
          }
          if (NewParentDepartmentName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(NewParentDepartmentName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ParentDepartmentId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentDepartmentId);
          }
          if (ParentDepartmentName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentDepartmentName);
          }
          if (NewParentDepartmentId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewParentDepartmentId);
          }
          if (NewParentDepartmentName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NewParentDepartmentName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberDepartmentNodeRecord other) {
          if (other == null) {
            return;
          }
          if (other.ParentDepartmentId != 0L) {
            ParentDepartmentId = other.ParentDepartmentId;
          }
          if (other.ParentDepartmentName.Length != 0) {
            ParentDepartmentName = other.ParentDepartmentName;
          }
          if (other.NewParentDepartmentId != 0L) {
            NewParentDepartmentId = other.NewParentDepartmentId;
          }
          if (other.NewParentDepartmentName.Length != 0) {
            NewParentDepartmentName = other.NewParentDepartmentName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ParentDepartmentId = input.ReadInt64();
                break;
              }
              case 18: {
                ParentDepartmentName = input.ReadString();
                break;
              }
              case 24: {
                NewParentDepartmentId = input.ReadInt64();
                break;
              }
              case 34: {
                NewParentDepartmentName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberDepartmentResourceFolderRecord : pb::IMessage<MemberDepartmentResourceFolderRecord> {
        private static readonly pb::MessageParser<MemberDepartmentResourceFolderRecord> _parser = new pb::MessageParser<MemberDepartmentResourceFolderRecord>(() => new MemberDepartmentResourceFolderRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberDepartmentResourceFolderRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentResourceFolderRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentResourceFolderRecord(MemberDepartmentResourceFolderRecord other) : this() {
          departmentId_ = other.departmentId_;
          departmentName_ = other.departmentName_;
          departmentResourceFolderId_ = other.departmentResourceFolderId_;
          departmentResourceFolderName_ = other.departmentResourceFolderName_;
          newDepartmentResourceFolderName_ = other.newDepartmentResourceFolderName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentResourceFolderRecord Clone() {
          return new MemberDepartmentResourceFolderRecord(this);
        }

        /// <summary>Field number for the "departmentId" field.</summary>
        public const int DepartmentIdFieldNumber = 1;
        private long departmentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DepartmentId {
          get { return departmentId_; }
          set {
            departmentId_ = value;
          }
        }

        /// <summary>Field number for the "departmentName" field.</summary>
        public const int DepartmentNameFieldNumber = 2;
        private string departmentName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DepartmentName {
          get { return departmentName_; }
          set {
            departmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "departmentResourceFolderId" field.</summary>
        public const int DepartmentResourceFolderIdFieldNumber = 3;
        private long departmentResourceFolderId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DepartmentResourceFolderId {
          get { return departmentResourceFolderId_; }
          set {
            departmentResourceFolderId_ = value;
          }
        }

        /// <summary>Field number for the "departmentResourceFolderName" field.</summary>
        public const int DepartmentResourceFolderNameFieldNumber = 4;
        private string departmentResourceFolderName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DepartmentResourceFolderName {
          get { return departmentResourceFolderName_; }
          set {
            departmentResourceFolderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "newDepartmentResourceFolderName" field.</summary>
        public const int NewDepartmentResourceFolderNameFieldNumber = 5;
        private string newDepartmentResourceFolderName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NewDepartmentResourceFolderName {
          get { return newDepartmentResourceFolderName_; }
          set {
            newDepartmentResourceFolderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberDepartmentResourceFolderRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberDepartmentResourceFolderRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DepartmentId != other.DepartmentId) return false;
          if (DepartmentName != other.DepartmentName) return false;
          if (DepartmentResourceFolderId != other.DepartmentResourceFolderId) return false;
          if (DepartmentResourceFolderName != other.DepartmentResourceFolderName) return false;
          if (NewDepartmentResourceFolderName != other.NewDepartmentResourceFolderName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DepartmentId != 0L) hash ^= DepartmentId.GetHashCode();
          if (DepartmentName.Length != 0) hash ^= DepartmentName.GetHashCode();
          if (DepartmentResourceFolderId != 0L) hash ^= DepartmentResourceFolderId.GetHashCode();
          if (DepartmentResourceFolderName.Length != 0) hash ^= DepartmentResourceFolderName.GetHashCode();
          if (NewDepartmentResourceFolderName.Length != 0) hash ^= NewDepartmentResourceFolderName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DepartmentId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(DepartmentId);
          }
          if (DepartmentName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DepartmentName);
          }
          if (DepartmentResourceFolderId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(DepartmentResourceFolderId);
          }
          if (DepartmentResourceFolderName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(DepartmentResourceFolderName);
          }
          if (NewDepartmentResourceFolderName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(NewDepartmentResourceFolderName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DepartmentId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentId);
          }
          if (DepartmentName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartmentName);
          }
          if (DepartmentResourceFolderId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentResourceFolderId);
          }
          if (DepartmentResourceFolderName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartmentResourceFolderName);
          }
          if (NewDepartmentResourceFolderName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NewDepartmentResourceFolderName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberDepartmentResourceFolderRecord other) {
          if (other == null) {
            return;
          }
          if (other.DepartmentId != 0L) {
            DepartmentId = other.DepartmentId;
          }
          if (other.DepartmentName.Length != 0) {
            DepartmentName = other.DepartmentName;
          }
          if (other.DepartmentResourceFolderId != 0L) {
            DepartmentResourceFolderId = other.DepartmentResourceFolderId;
          }
          if (other.DepartmentResourceFolderName.Length != 0) {
            DepartmentResourceFolderName = other.DepartmentResourceFolderName;
          }
          if (other.NewDepartmentResourceFolderName.Length != 0) {
            NewDepartmentResourceFolderName = other.NewDepartmentResourceFolderName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DepartmentId = input.ReadInt64();
                break;
              }
              case 18: {
                DepartmentName = input.ReadString();
                break;
              }
              case 24: {
                DepartmentResourceFolderId = input.ReadInt64();
                break;
              }
              case 34: {
                DepartmentResourceFolderName = input.ReadString();
                break;
              }
              case 42: {
                NewDepartmentResourceFolderName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MemberDepartmentSceneFolderRecord : pb::IMessage<MemberDepartmentSceneFolderRecord> {
        private static readonly pb::MessageParser<MemberDepartmentSceneFolderRecord> _parser = new pb::MessageParser<MemberDepartmentSceneFolderRecord>(() => new MemberDepartmentSceneFolderRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberDepartmentSceneFolderRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentSceneFolderRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentSceneFolderRecord(MemberDepartmentSceneFolderRecord other) : this() {
          departmentId_ = other.departmentId_;
          departmentName_ = other.departmentName_;
          departmentSceneFolderId_ = other.departmentSceneFolderId_;
          departmentSceneFolderName_ = other.departmentSceneFolderName_;
          newDepartmentSceneFolderName_ = other.newDepartmentSceneFolderName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MemberDepartmentSceneFolderRecord Clone() {
          return new MemberDepartmentSceneFolderRecord(this);
        }

        /// <summary>Field number for the "departmentId" field.</summary>
        public const int DepartmentIdFieldNumber = 1;
        private long departmentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DepartmentId {
          get { return departmentId_; }
          set {
            departmentId_ = value;
          }
        }

        /// <summary>Field number for the "departmentName" field.</summary>
        public const int DepartmentNameFieldNumber = 2;
        private string departmentName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DepartmentName {
          get { return departmentName_; }
          set {
            departmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "departmentSceneFolderId" field.</summary>
        public const int DepartmentSceneFolderIdFieldNumber = 3;
        private long departmentSceneFolderId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DepartmentSceneFolderId {
          get { return departmentSceneFolderId_; }
          set {
            departmentSceneFolderId_ = value;
          }
        }

        /// <summary>Field number for the "departmentSceneFolderName" field.</summary>
        public const int DepartmentSceneFolderNameFieldNumber = 4;
        private string departmentSceneFolderName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DepartmentSceneFolderName {
          get { return departmentSceneFolderName_; }
          set {
            departmentSceneFolderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "newDepartmentSceneFolderName" field.</summary>
        public const int NewDepartmentSceneFolderNameFieldNumber = 5;
        private string newDepartmentSceneFolderName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NewDepartmentSceneFolderName {
          get { return newDepartmentSceneFolderName_; }
          set {
            newDepartmentSceneFolderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MemberDepartmentSceneFolderRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MemberDepartmentSceneFolderRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DepartmentId != other.DepartmentId) return false;
          if (DepartmentName != other.DepartmentName) return false;
          if (DepartmentSceneFolderId != other.DepartmentSceneFolderId) return false;
          if (DepartmentSceneFolderName != other.DepartmentSceneFolderName) return false;
          if (NewDepartmentSceneFolderName != other.NewDepartmentSceneFolderName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DepartmentId != 0L) hash ^= DepartmentId.GetHashCode();
          if (DepartmentName.Length != 0) hash ^= DepartmentName.GetHashCode();
          if (DepartmentSceneFolderId != 0L) hash ^= DepartmentSceneFolderId.GetHashCode();
          if (DepartmentSceneFolderName.Length != 0) hash ^= DepartmentSceneFolderName.GetHashCode();
          if (NewDepartmentSceneFolderName.Length != 0) hash ^= NewDepartmentSceneFolderName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DepartmentId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(DepartmentId);
          }
          if (DepartmentName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DepartmentName);
          }
          if (DepartmentSceneFolderId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(DepartmentSceneFolderId);
          }
          if (DepartmentSceneFolderName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(DepartmentSceneFolderName);
          }
          if (NewDepartmentSceneFolderName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(NewDepartmentSceneFolderName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DepartmentId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentId);
          }
          if (DepartmentName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartmentName);
          }
          if (DepartmentSceneFolderId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentSceneFolderId);
          }
          if (DepartmentSceneFolderName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartmentSceneFolderName);
          }
          if (NewDepartmentSceneFolderName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NewDepartmentSceneFolderName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MemberDepartmentSceneFolderRecord other) {
          if (other == null) {
            return;
          }
          if (other.DepartmentId != 0L) {
            DepartmentId = other.DepartmentId;
          }
          if (other.DepartmentName.Length != 0) {
            DepartmentName = other.DepartmentName;
          }
          if (other.DepartmentSceneFolderId != 0L) {
            DepartmentSceneFolderId = other.DepartmentSceneFolderId;
          }
          if (other.DepartmentSceneFolderName.Length != 0) {
            DepartmentSceneFolderName = other.DepartmentSceneFolderName;
          }
          if (other.NewDepartmentSceneFolderName.Length != 0) {
            NewDepartmentSceneFolderName = other.NewDepartmentSceneFolderName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DepartmentId = input.ReadInt64();
                break;
              }
              case 18: {
                DepartmentName = input.ReadString();
                break;
              }
              case 24: {
                DepartmentSceneFolderId = input.ReadInt64();
                break;
              }
              case 34: {
                DepartmentSceneFolderName = input.ReadString();
                break;
              }
              case 42: {
                NewDepartmentSceneFolderName = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MemberRecord : pb::IMessage<MemberRecord> {
    private static readonly pb::MessageParser<MemberRecord> _parser = new pb::MessageParser<MemberRecord>(() => new MemberRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRecord(MemberRecord other) : this() {
      memberRecordId_ = other.memberRecordId_;
      memberBase_ = other.memberBase_ != null ? other.memberBase_.Clone() : null;
      kind_ = other.kind_;
      blueprint_ = other.blueprint_ != null ? other.blueprint_.Clone() : null;
      behaviorSeconds_ = other.behaviorSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRecord Clone() {
      return new MemberRecord(this);
    }

    /// <summary>Field number for the "memberRecordId" field.</summary>
    public const int MemberRecordIdFieldNumber = 1;
    private long memberRecordId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MemberRecordId {
      get { return memberRecordId_; }
      set {
        memberRecordId_ = value;
      }
    }

    /// <summary>Field number for the "memberBase" field.</summary>
    public const int MemberBaseFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.MemberBase memberBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberBase MemberBase {
      get { return memberBase_; }
      set {
        memberBase_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND kind_ = global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "blueprint" field.</summary>
    public const int BlueprintFieldNumber = 4;
    private global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint blueprint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint Blueprint {
      get { return blueprint_; }
      set {
        blueprint_ = value;
      }
    }

    /// <summary>Field number for the "behaviorSeconds" field.</summary>
    public const int BehaviorSecondsFieldNumber = 5;
    private long behaviorSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BehaviorSeconds {
      get { return behaviorSeconds_; }
      set {
        behaviorSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MemberRecordId != other.MemberRecordId) return false;
      if (!object.Equals(MemberBase, other.MemberBase)) return false;
      if (Kind != other.Kind) return false;
      if (!object.Equals(Blueprint, other.Blueprint)) return false;
      if (BehaviorSeconds != other.BehaviorSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MemberRecordId != 0L) hash ^= MemberRecordId.GetHashCode();
      if (memberBase_ != null) hash ^= MemberBase.GetHashCode();
      if (Kind != global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default) hash ^= Kind.GetHashCode();
      if (blueprint_ != null) hash ^= Blueprint.GetHashCode();
      if (BehaviorSeconds != 0L) hash ^= BehaviorSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberRecordId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MemberRecordId);
      }
      if (memberBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberBase);
      }
      if (Kind != global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Kind);
      }
      if (blueprint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Blueprint);
      }
      if (BehaviorSeconds != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BehaviorSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemberRecordId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MemberRecordId);
      }
      if (memberBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberBase);
      }
      if (Kind != global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (blueprint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blueprint);
      }
      if (BehaviorSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BehaviorSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberRecord other) {
      if (other == null) {
        return;
      }
      if (other.MemberRecordId != 0L) {
        MemberRecordId = other.MemberRecordId;
      }
      if (other.memberBase_ != null) {
        if (memberBase_ == null) {
          MemberBase = new global::Saturn.Backends.Protocols.Common.MemberBase();
        }
        MemberBase.MergeFrom(other.MemberBase);
      }
      if (other.Kind != global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND.Default) {
        Kind = other.Kind;
      }
      if (other.blueprint_ != null) {
        if (blueprint_ == null) {
          Blueprint = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint();
        }
        Blueprint.MergeFrom(other.Blueprint);
      }
      if (other.BehaviorSeconds != 0L) {
        BehaviorSeconds = other.BehaviorSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MemberRecordId = input.ReadInt64();
            break;
          }
          case 18: {
            if (memberBase_ == null) {
              MemberBase = new global::Saturn.Backends.Protocols.Common.MemberBase();
            }
            input.ReadMessage(MemberBase);
            break;
          }
          case 24: {
            Kind = (global::Saturn.Backends.Protocols.Common.MEMBER_RECORD_KIND) input.ReadEnum();
            break;
          }
          case 34: {
            if (blueprint_ == null) {
              Blueprint = new global::Saturn.Backends.Protocols.Common.MemberRecordBlueprint();
            }
            input.ReadMessage(Blueprint);
            break;
          }
          case 40: {
            BehaviorSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Schedule : pb::IMessage<Schedule> {
    private static readonly pb::MessageParser<Schedule> _parser = new pb::MessageParser<Schedule>(() => new Schedule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Schedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule(Schedule other) : this() {
      scheduleId_ = other.scheduleId_;
      name_ = other.name_;
      startDateSeconds_ = other.startDateSeconds_;
      endDateSeconds_ = other.endDateSeconds_;
      useDate_ = other.useDate_;
      week_ = other.week_ != null ? other.week_.Clone() : null;
      createdSeconds_ = other.createdSeconds_;
      updatedSeconds_ = other.updatedSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule Clone() {
      return new Schedule(this);
    }

    /// <summary>Field number for the "scheduleId" field.</summary>
    public const int ScheduleIdFieldNumber = 1;
    private long scheduleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScheduleId {
      get { return scheduleId_; }
      set {
        scheduleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startDateSeconds" field.</summary>
    public const int StartDateSecondsFieldNumber = 3;
    private long startDateSeconds_;
    /// <summary>
    /// 시작 날짜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDateSeconds {
      get { return startDateSeconds_; }
      set {
        startDateSeconds_ = value;
      }
    }

    /// <summary>Field number for the "endDateSeconds" field.</summary>
    public const int EndDateSecondsFieldNumber = 4;
    private long endDateSeconds_;
    /// <summary>
    /// 종료 날짜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndDateSeconds {
      get { return endDateSeconds_; }
      set {
        endDateSeconds_ = value;
      }
    }

    /// <summary>Field number for the "useDate" field.</summary>
    public const int UseDateFieldNumber = 5;
    private bool useDate_;
    /// <summary>
    /// 날짜 사용
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseDate {
      get { return useDate_; }
      set {
        useDate_ = value;
      }
    }

    /// <summary>Field number for the "week" field.</summary>
    public const int WeekFieldNumber = 6;
    private global::Saturn.Backends.Protocols.Common.Schedule.Types.Week week_;
    /// <summary>
    /// 일주일
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Schedule.Types.Week Week {
      get { return week_; }
      set {
        week_ = value;
      }
    }

    /// <summary>Field number for the "createdSeconds" field.</summary>
    public const int CreatedSecondsFieldNumber = 7;
    private long createdSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedSeconds {
      get { return createdSeconds_; }
      set {
        createdSeconds_ = value;
      }
    }

    /// <summary>Field number for the "updatedSeconds" field.</summary>
    public const int UpdatedSecondsFieldNumber = 8;
    private long updatedSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedSeconds {
      get { return updatedSeconds_; }
      set {
        updatedSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Schedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Schedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScheduleId != other.ScheduleId) return false;
      if (Name != other.Name) return false;
      if (StartDateSeconds != other.StartDateSeconds) return false;
      if (EndDateSeconds != other.EndDateSeconds) return false;
      if (UseDate != other.UseDate) return false;
      if (!object.Equals(Week, other.Week)) return false;
      if (CreatedSeconds != other.CreatedSeconds) return false;
      if (UpdatedSeconds != other.UpdatedSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScheduleId != 0L) hash ^= ScheduleId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (StartDateSeconds != 0L) hash ^= StartDateSeconds.GetHashCode();
      if (EndDateSeconds != 0L) hash ^= EndDateSeconds.GetHashCode();
      if (UseDate != false) hash ^= UseDate.GetHashCode();
      if (week_ != null) hash ^= Week.GetHashCode();
      if (CreatedSeconds != 0L) hash ^= CreatedSeconds.GetHashCode();
      if (UpdatedSeconds != 0L) hash ^= UpdatedSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScheduleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ScheduleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (StartDateSeconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartDateSeconds);
      }
      if (EndDateSeconds != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndDateSeconds);
      }
      if (UseDate != false) {
        output.WriteRawTag(40);
        output.WriteBool(UseDate);
      }
      if (week_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Week);
      }
      if (CreatedSeconds != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CreatedSeconds);
      }
      if (UpdatedSeconds != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UpdatedSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScheduleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScheduleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (StartDateSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDateSeconds);
      }
      if (EndDateSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndDateSeconds);
      }
      if (UseDate != false) {
        size += 1 + 1;
      }
      if (week_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Week);
      }
      if (CreatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedSeconds);
      }
      if (UpdatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Schedule other) {
      if (other == null) {
        return;
      }
      if (other.ScheduleId != 0L) {
        ScheduleId = other.ScheduleId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.StartDateSeconds != 0L) {
        StartDateSeconds = other.StartDateSeconds;
      }
      if (other.EndDateSeconds != 0L) {
        EndDateSeconds = other.EndDateSeconds;
      }
      if (other.UseDate != false) {
        UseDate = other.UseDate;
      }
      if (other.week_ != null) {
        if (week_ == null) {
          Week = new global::Saturn.Backends.Protocols.Common.Schedule.Types.Week();
        }
        Week.MergeFrom(other.Week);
      }
      if (other.CreatedSeconds != 0L) {
        CreatedSeconds = other.CreatedSeconds;
      }
      if (other.UpdatedSeconds != 0L) {
        UpdatedSeconds = other.UpdatedSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScheduleId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            StartDateSeconds = input.ReadInt64();
            break;
          }
          case 32: {
            EndDateSeconds = input.ReadInt64();
            break;
          }
          case 40: {
            UseDate = input.ReadBool();
            break;
          }
          case 50: {
            if (week_ == null) {
              Week = new global::Saturn.Backends.Protocols.Common.Schedule.Types.Week();
            }
            input.ReadMessage(Week);
            break;
          }
          case 56: {
            CreatedSeconds = input.ReadInt64();
            break;
          }
          case 64: {
            UpdatedSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Schedule message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DayOfWeek : pb::IMessage<DayOfWeek> {
        private static readonly pb::MessageParser<DayOfWeek> _parser = new pb::MessageParser<DayOfWeek>(() => new DayOfWeek());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DayOfWeek> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.Schedule.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DayOfWeek() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DayOfWeek(DayOfWeek other) : this() {
          startHour_ = other.startHour_;
          startMinute_ = other.startMinute_;
          endHour_ = other.endHour_;
          endMinute_ = other.endMinute_;
          isAllDay_ = other.isAllDay_;
          disabled_ = other.disabled_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DayOfWeek Clone() {
          return new DayOfWeek(this);
        }

        /// <summary>Field number for the "startHour" field.</summary>
        public const int StartHourFieldNumber = 1;
        private int startHour_;
        /// <summary>
        /// 시작 시간
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StartHour {
          get { return startHour_; }
          set {
            startHour_ = value;
          }
        }

        /// <summary>Field number for the "startMinute" field.</summary>
        public const int StartMinuteFieldNumber = 2;
        private int startMinute_;
        /// <summary>
        /// 시작 분
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StartMinute {
          get { return startMinute_; }
          set {
            startMinute_ = value;
          }
        }

        /// <summary>Field number for the "endHour" field.</summary>
        public const int EndHourFieldNumber = 3;
        private int endHour_;
        /// <summary>
        /// 종료 시간
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EndHour {
          get { return endHour_; }
          set {
            endHour_ = value;
          }
        }

        /// <summary>Field number for the "endMinute" field.</summary>
        public const int EndMinuteFieldNumber = 4;
        private int endMinute_;
        /// <summary>
        /// 종료 분
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EndMinute {
          get { return endMinute_; }
          set {
            endMinute_ = value;
          }
        }

        /// <summary>Field number for the "isAllDay" field.</summary>
        public const int IsAllDayFieldNumber = 5;
        private bool isAllDay_;
        /// <summary>
        /// 하루 종일
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsAllDay {
          get { return isAllDay_; }
          set {
            isAllDay_ = value;
          }
        }

        /// <summary>Field number for the "disabled" field.</summary>
        public const int DisabledFieldNumber = 6;
        private bool disabled_;
        /// <summary>
        /// 사용 안함     
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Disabled {
          get { return disabled_; }
          set {
            disabled_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DayOfWeek);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DayOfWeek other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StartHour != other.StartHour) return false;
          if (StartMinute != other.StartMinute) return false;
          if (EndHour != other.EndHour) return false;
          if (EndMinute != other.EndMinute) return false;
          if (IsAllDay != other.IsAllDay) return false;
          if (Disabled != other.Disabled) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StartHour != 0) hash ^= StartHour.GetHashCode();
          if (StartMinute != 0) hash ^= StartMinute.GetHashCode();
          if (EndHour != 0) hash ^= EndHour.GetHashCode();
          if (EndMinute != 0) hash ^= EndMinute.GetHashCode();
          if (IsAllDay != false) hash ^= IsAllDay.GetHashCode();
          if (Disabled != false) hash ^= Disabled.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StartHour != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(StartHour);
          }
          if (StartMinute != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(StartMinute);
          }
          if (EndHour != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EndHour);
          }
          if (EndMinute != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(EndMinute);
          }
          if (IsAllDay != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsAllDay);
          }
          if (Disabled != false) {
            output.WriteRawTag(48);
            output.WriteBool(Disabled);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StartHour != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartHour);
          }
          if (StartMinute != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartMinute);
          }
          if (EndHour != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndHour);
          }
          if (EndMinute != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndMinute);
          }
          if (IsAllDay != false) {
            size += 1 + 1;
          }
          if (Disabled != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DayOfWeek other) {
          if (other == null) {
            return;
          }
          if (other.StartHour != 0) {
            StartHour = other.StartHour;
          }
          if (other.StartMinute != 0) {
            StartMinute = other.StartMinute;
          }
          if (other.EndHour != 0) {
            EndHour = other.EndHour;
          }
          if (other.EndMinute != 0) {
            EndMinute = other.EndMinute;
          }
          if (other.IsAllDay != false) {
            IsAllDay = other.IsAllDay;
          }
          if (other.Disabled != false) {
            Disabled = other.Disabled;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                StartHour = input.ReadInt32();
                break;
              }
              case 16: {
                StartMinute = input.ReadInt32();
                break;
              }
              case 24: {
                EndHour = input.ReadInt32();
                break;
              }
              case 32: {
                EndMinute = input.ReadInt32();
                break;
              }
              case 40: {
                IsAllDay = input.ReadBool();
                break;
              }
              case 48: {
                Disabled = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Week : pb::IMessage<Week> {
        private static readonly pb::MessageParser<Week> _parser = new pb::MessageParser<Week>(() => new Week());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Week> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.Schedule.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Week() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Week(Week other) : this() {
          mon_ = other.mon_ != null ? other.mon_.Clone() : null;
          tue_ = other.tue_ != null ? other.tue_.Clone() : null;
          wed_ = other.wed_ != null ? other.wed_.Clone() : null;
          thu_ = other.thu_ != null ? other.thu_.Clone() : null;
          fri_ = other.fri_ != null ? other.fri_.Clone() : null;
          sat_ = other.sat_ != null ? other.sat_.Clone() : null;
          sun_ = other.sun_ != null ? other.sun_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Week Clone() {
          return new Week(this);
        }

        /// <summary>Field number for the "mon" field.</summary>
        public const int MonFieldNumber = 1;
        private global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek mon_;
        /// <summary>
        /// 월
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek Mon {
          get { return mon_; }
          set {
            mon_ = value;
          }
        }

        /// <summary>Field number for the "tue" field.</summary>
        public const int TueFieldNumber = 2;
        private global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek tue_;
        /// <summary>
        /// 화
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek Tue {
          get { return tue_; }
          set {
            tue_ = value;
          }
        }

        /// <summary>Field number for the "wed" field.</summary>
        public const int WedFieldNumber = 3;
        private global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek wed_;
        /// <summary>
        /// 수 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek Wed {
          get { return wed_; }
          set {
            wed_ = value;
          }
        }

        /// <summary>Field number for the "thu" field.</summary>
        public const int ThuFieldNumber = 4;
        private global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek thu_;
        /// <summary>
        /// 목
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek Thu {
          get { return thu_; }
          set {
            thu_ = value;
          }
        }

        /// <summary>Field number for the "fri" field.</summary>
        public const int FriFieldNumber = 5;
        private global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek fri_;
        /// <summary>
        /// 금
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek Fri {
          get { return fri_; }
          set {
            fri_ = value;
          }
        }

        /// <summary>Field number for the "sat" field.</summary>
        public const int SatFieldNumber = 6;
        private global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek sat_;
        /// <summary>
        /// 토
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek Sat {
          get { return sat_; }
          set {
            sat_ = value;
          }
        }

        /// <summary>Field number for the "sun" field.</summary>
        public const int SunFieldNumber = 7;
        private global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek sun_;
        /// <summary>
        /// 일
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek Sun {
          get { return sun_; }
          set {
            sun_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Week);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Week other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Mon, other.Mon)) return false;
          if (!object.Equals(Tue, other.Tue)) return false;
          if (!object.Equals(Wed, other.Wed)) return false;
          if (!object.Equals(Thu, other.Thu)) return false;
          if (!object.Equals(Fri, other.Fri)) return false;
          if (!object.Equals(Sat, other.Sat)) return false;
          if (!object.Equals(Sun, other.Sun)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (mon_ != null) hash ^= Mon.GetHashCode();
          if (tue_ != null) hash ^= Tue.GetHashCode();
          if (wed_ != null) hash ^= Wed.GetHashCode();
          if (thu_ != null) hash ^= Thu.GetHashCode();
          if (fri_ != null) hash ^= Fri.GetHashCode();
          if (sat_ != null) hash ^= Sat.GetHashCode();
          if (sun_ != null) hash ^= Sun.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (mon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Mon);
          }
          if (tue_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Tue);
          }
          if (wed_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Wed);
          }
          if (thu_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Thu);
          }
          if (fri_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Fri);
          }
          if (sat_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Sat);
          }
          if (sun_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Sun);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (mon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mon);
          }
          if (tue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tue);
          }
          if (wed_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wed);
          }
          if (thu_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thu);
          }
          if (fri_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fri);
          }
          if (sat_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sat);
          }
          if (sun_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sun);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Week other) {
          if (other == null) {
            return;
          }
          if (other.mon_ != null) {
            if (mon_ == null) {
              Mon = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
            }
            Mon.MergeFrom(other.Mon);
          }
          if (other.tue_ != null) {
            if (tue_ == null) {
              Tue = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
            }
            Tue.MergeFrom(other.Tue);
          }
          if (other.wed_ != null) {
            if (wed_ == null) {
              Wed = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
            }
            Wed.MergeFrom(other.Wed);
          }
          if (other.thu_ != null) {
            if (thu_ == null) {
              Thu = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
            }
            Thu.MergeFrom(other.Thu);
          }
          if (other.fri_ != null) {
            if (fri_ == null) {
              Fri = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
            }
            Fri.MergeFrom(other.Fri);
          }
          if (other.sat_ != null) {
            if (sat_ == null) {
              Sat = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
            }
            Sat.MergeFrom(other.Sat);
          }
          if (other.sun_ != null) {
            if (sun_ == null) {
              Sun = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
            }
            Sun.MergeFrom(other.Sun);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (mon_ == null) {
                  Mon = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
                }
                input.ReadMessage(Mon);
                break;
              }
              case 18: {
                if (tue_ == null) {
                  Tue = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
                }
                input.ReadMessage(Tue);
                break;
              }
              case 26: {
                if (wed_ == null) {
                  Wed = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
                }
                input.ReadMessage(Wed);
                break;
              }
              case 34: {
                if (thu_ == null) {
                  Thu = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
                }
                input.ReadMessage(Thu);
                break;
              }
              case 42: {
                if (fri_ == null) {
                  Fri = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
                }
                input.ReadMessage(Fri);
                break;
              }
              case 50: {
                if (sat_ == null) {
                  Sat = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
                }
                input.ReadMessage(Sat);
                break;
              }
              case 58: {
                if (sun_ == null) {
                  Sun = new global::Saturn.Backends.Protocols.Common.Schedule.Types.DayOfWeek();
                }
                input.ReadMessage(Sun);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ScheduleScene : pb::IMessage<ScheduleScene> {
    private static readonly pb::MessageParser<ScheduleScene> _parser = new pb::MessageParser<ScheduleScene>(() => new ScheduleScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScheduleScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleScene(ScheduleScene other) : this() {
      scheduleSceneId_ = other.scheduleSceneId_;
      name_ = other.name_;
      schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
      sceneBase_ = other.sceneBase_ != null ? other.sceneBase_.Clone() : null;
      created_ = other.created_;
      updated_ = other.updated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleScene Clone() {
      return new ScheduleScene(this);
    }

    /// <summary>Field number for the "scheduleSceneId" field.</summary>
    public const int ScheduleSceneIdFieldNumber = 1;
    private long scheduleSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScheduleSceneId {
      get { return scheduleSceneId_; }
      set {
        scheduleSceneId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 3;
    private global::Saturn.Backends.Protocols.Common.Schedule schedule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.Schedule Schedule {
      get { return schedule_; }
      set {
        schedule_ = value;
      }
    }

    /// <summary>Field number for the "sceneBase" field.</summary>
    public const int SceneBaseFieldNumber = 4;
    private global::Saturn.Backends.Protocols.Common.SceneBase sceneBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.SceneBase SceneBase {
      get { return sceneBase_; }
      set {
        sceneBase_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 5;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 6;
    private long updated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScheduleScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScheduleScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScheduleSceneId != other.ScheduleSceneId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Schedule, other.Schedule)) return false;
      if (!object.Equals(SceneBase, other.SceneBase)) return false;
      if (Created != other.Created) return false;
      if (Updated != other.Updated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScheduleSceneId != 0L) hash ^= ScheduleSceneId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (schedule_ != null) hash ^= Schedule.GetHashCode();
      if (sceneBase_ != null) hash ^= SceneBase.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Updated != 0L) hash ^= Updated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScheduleSceneId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ScheduleSceneId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (schedule_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Schedule);
      }
      if (sceneBase_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SceneBase);
      }
      if (Created != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Created);
      }
      if (Updated != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScheduleSceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScheduleSceneId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (schedule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
      }
      if (sceneBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneBase);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (Updated != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScheduleScene other) {
      if (other == null) {
        return;
      }
      if (other.ScheduleSceneId != 0L) {
        ScheduleSceneId = other.ScheduleSceneId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.schedule_ != null) {
        if (schedule_ == null) {
          Schedule = new global::Saturn.Backends.Protocols.Common.Schedule();
        }
        Schedule.MergeFrom(other.Schedule);
      }
      if (other.sceneBase_ != null) {
        if (sceneBase_ == null) {
          SceneBase = new global::Saturn.Backends.Protocols.Common.SceneBase();
        }
        SceneBase.MergeFrom(other.SceneBase);
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Updated != 0L) {
        Updated = other.Updated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScheduleSceneId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (schedule_ == null) {
              Schedule = new global::Saturn.Backends.Protocols.Common.Schedule();
            }
            input.ReadMessage(Schedule);
            break;
          }
          case 34: {
            if (sceneBase_ == null) {
              SceneBase = new global::Saturn.Backends.Protocols.Common.SceneBase();
            }
            input.ReadMessage(SceneBase);
            break;
          }
          case 40: {
            Created = input.ReadInt64();
            break;
          }
          case 48: {
            Updated = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectorScheduleScene : pb::IMessage<ConnectorScheduleScene> {
    private static readonly pb::MessageParser<ConnectorScheduleScene> _parser = new pb::MessageParser<ConnectorScheduleScene>(() => new ConnectorScheduleScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectorScheduleScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorScheduleScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorScheduleScene(ConnectorScheduleScene other) : this() {
      connectorScheduleSceneId_ = other.connectorScheduleSceneId_;
      scheduleScene_ = other.scheduleScene_ != null ? other.scheduleScene_.Clone() : null;
      created_ = other.created_;
      updated_ = other.updated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectorScheduleScene Clone() {
      return new ConnectorScheduleScene(this);
    }

    /// <summary>Field number for the "connectorScheduleSceneId" field.</summary>
    public const int ConnectorScheduleSceneIdFieldNumber = 1;
    private long connectorScheduleSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConnectorScheduleSceneId {
      get { return connectorScheduleSceneId_; }
      set {
        connectorScheduleSceneId_ = value;
      }
    }

    /// <summary>Field number for the "scheduleScene" field.</summary>
    public const int ScheduleSceneFieldNumber = 2;
    private global::Saturn.Backends.Protocols.Common.ScheduleScene scheduleScene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saturn.Backends.Protocols.Common.ScheduleScene ScheduleScene {
      get { return scheduleScene_; }
      set {
        scheduleScene_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 3;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 4;
    private long updated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectorScheduleScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectorScheduleScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectorScheduleSceneId != other.ConnectorScheduleSceneId) return false;
      if (!object.Equals(ScheduleScene, other.ScheduleScene)) return false;
      if (Created != other.Created) return false;
      if (Updated != other.Updated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectorScheduleSceneId != 0L) hash ^= ConnectorScheduleSceneId.GetHashCode();
      if (scheduleScene_ != null) hash ^= ScheduleScene.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Updated != 0L) hash ^= Updated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectorScheduleSceneId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConnectorScheduleSceneId);
      }
      if (scheduleScene_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ScheduleScene);
      }
      if (Created != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Created);
      }
      if (Updated != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectorScheduleSceneId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectorScheduleSceneId);
      }
      if (scheduleScene_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduleScene);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (Updated != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectorScheduleScene other) {
      if (other == null) {
        return;
      }
      if (other.ConnectorScheduleSceneId != 0L) {
        ConnectorScheduleSceneId = other.ConnectorScheduleSceneId;
      }
      if (other.scheduleScene_ != null) {
        if (scheduleScene_ == null) {
          ScheduleScene = new global::Saturn.Backends.Protocols.Common.ScheduleScene();
        }
        ScheduleScene.MergeFrom(other.ScheduleScene);
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Updated != 0L) {
        Updated = other.Updated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConnectorScheduleSceneId = input.ReadInt64();
            break;
          }
          case 18: {
            if (scheduleScene_ == null) {
              ScheduleScene = new global::Saturn.Backends.Protocols.Common.ScheduleScene();
            }
            input.ReadMessage(ScheduleScene);
            break;
          }
          case 24: {
            Created = input.ReadInt64();
            break;
          }
          case 32: {
            Updated = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Paginator : pb::IMessage<Paginator> {
    private static readonly pb::MessageParser<Paginator> _parser = new pb::MessageParser<Paginator>(() => new Paginator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Paginator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paginator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paginator(Paginator other) : this() {
      itemsCount_ = other.itemsCount_;
      pagesCount_ = other.pagesCount_;
      pagesIndex_ = other.pagesIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paginator Clone() {
      return new Paginator(this);
    }

    /// <summary>Field number for the "itemsCount" field.</summary>
    public const int ItemsCountFieldNumber = 1;
    private int itemsCount_;
    /// <summary>
    /// 모든 아이템 갯수
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemsCount {
      get { return itemsCount_; }
      set {
        itemsCount_ = value;
      }
    }

    /// <summary>Field number for the "pagesCount" field.</summary>
    public const int PagesCountFieldNumber = 2;
    private int pagesCount_;
    /// <summary>
    /// 모든 페이지의 갯수
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PagesCount {
      get { return pagesCount_; }
      set {
        pagesCount_ = value;
      }
    }

    /// <summary>Field number for the "pagesIndex" field.</summary>
    public const int PagesIndexFieldNumber = 3;
    private int pagesIndex_;
    /// <summary>
    /// 현재 페이지 인덱스
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PagesIndex {
      get { return pagesIndex_; }
      set {
        pagesIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Paginator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Paginator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemsCount != other.ItemsCount) return false;
      if (PagesCount != other.PagesCount) return false;
      if (PagesIndex != other.PagesIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemsCount != 0) hash ^= ItemsCount.GetHashCode();
      if (PagesCount != 0) hash ^= PagesCount.GetHashCode();
      if (PagesIndex != 0) hash ^= PagesIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemsCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemsCount);
      }
      if (PagesCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PagesCount);
      }
      if (PagesIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PagesIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemsCount);
      }
      if (PagesCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PagesCount);
      }
      if (PagesIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PagesIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Paginator other) {
      if (other == null) {
        return;
      }
      if (other.ItemsCount != 0) {
        ItemsCount = other.ItemsCount;
      }
      if (other.PagesCount != 0) {
        PagesCount = other.PagesCount;
      }
      if (other.PagesIndex != 0) {
        PagesIndex = other.PagesIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemsCount = input.ReadInt32();
            break;
          }
          case 16: {
            PagesCount = input.ReadInt32();
            break;
          }
          case 24: {
            PagesIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Weather : pb::IMessage<Weather> {
    private static readonly pb::MessageParser<Weather> _parser = new pb::MessageParser<Weather>(() => new Weather());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Weather> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weather() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weather(Weather other) : this() {
      skyCode_ = other.skyCode_;
      ptyCode_ = other.ptyCode_;
      temperature_ = other.temperature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weather Clone() {
      return new Weather(this);
    }

    /// <summary>Field number for the "skyCode" field.</summary>
    public const int SkyCodeFieldNumber = 1;
    private int skyCode_;
    /// <summary>
    /// 1: 맑음, 3: 구르많음, 4: 흐림
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkyCode {
      get { return skyCode_; }
      set {
        skyCode_ = value;
      }
    }

    /// <summary>Field number for the "ptyCode" field.</summary>
    public const int PtyCodeFieldNumber = 2;
    private int ptyCode_;
    /// <summary>
    /// 0: 없음, 1: 비, 2: 비/눈, 3:눈, 4: 소나기
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PtyCode {
      get { return ptyCode_; }
      set {
        ptyCode_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 3;
    private int temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Weather);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Weather other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkyCode != other.SkyCode) return false;
      if (PtyCode != other.PtyCode) return false;
      if (Temperature != other.Temperature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkyCode != 0) hash ^= SkyCode.GetHashCode();
      if (PtyCode != 0) hash ^= PtyCode.GetHashCode();
      if (Temperature != 0) hash ^= Temperature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkyCode);
      }
      if (PtyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PtyCode);
      }
      if (Temperature != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Temperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkyCode);
      }
      if (PtyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PtyCode);
      }
      if (Temperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Temperature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Weather other) {
      if (other == null) {
        return;
      }
      if (other.SkyCode != 0) {
        SkyCode = other.SkyCode;
      }
      if (other.PtyCode != 0) {
        PtyCode = other.PtyCode;
      }
      if (other.Temperature != 0) {
        Temperature = other.Temperature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkyCode = input.ReadInt32();
            break;
          }
          case 16: {
            PtyCode = input.ReadInt32();
            break;
          }
          case 24: {
            Temperature = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepartmentResourceFolder : pb::IMessage<DepartmentResourceFolder> {
    private static readonly pb::MessageParser<DepartmentResourceFolder> _parser = new pb::MessageParser<DepartmentResourceFolder>(() => new DepartmentResourceFolder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepartmentResourceFolder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentResourceFolder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentResourceFolder(DepartmentResourceFolder other) : this() {
      departmentFolderId_ = other.departmentFolderId_;
      name_ = other.name_;
      departmentId_ = other.departmentId_;
      parentDepartmentResourceFolderId_ = other.parentDepartmentResourceFolderId_;
      createdSeconds_ = other.createdSeconds_;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentResourceFolder Clone() {
      return new DepartmentResourceFolder(this);
    }

    /// <summary>Field number for the "departmentFolderId" field.</summary>
    public const int DepartmentFolderIdFieldNumber = 1;
    private long departmentFolderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DepartmentFolderId {
      get { return departmentFolderId_; }
      set {
        departmentFolderId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departmentId" field.</summary>
    public const int DepartmentIdFieldNumber = 3;
    private long departmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DepartmentId {
      get { return departmentId_; }
      set {
        departmentId_ = value;
      }
    }

    /// <summary>Field number for the "parentDepartmentResourceFolderId" field.</summary>
    public const int ParentDepartmentResourceFolderIdFieldNumber = 4;
    private long parentDepartmentResourceFolderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentDepartmentResourceFolderId {
      get { return parentDepartmentResourceFolderId_; }
      set {
        parentDepartmentResourceFolderId_ = value;
      }
    }

    /// <summary>Field number for the "createdSeconds" field.</summary>
    public const int CreatedSecondsFieldNumber = 5;
    private long createdSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedSeconds {
      get { return createdSeconds_; }
      set {
        createdSeconds_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 6;
    private long size_;
    /// <summary>
    /// resources 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepartmentResourceFolder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepartmentResourceFolder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DepartmentFolderId != other.DepartmentFolderId) return false;
      if (Name != other.Name) return false;
      if (DepartmentId != other.DepartmentId) return false;
      if (ParentDepartmentResourceFolderId != other.ParentDepartmentResourceFolderId) return false;
      if (CreatedSeconds != other.CreatedSeconds) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DepartmentFolderId != 0L) hash ^= DepartmentFolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DepartmentId != 0L) hash ^= DepartmentId.GetHashCode();
      if (ParentDepartmentResourceFolderId != 0L) hash ^= ParentDepartmentResourceFolderId.GetHashCode();
      if (CreatedSeconds != 0L) hash ^= CreatedSeconds.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DepartmentFolderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DepartmentFolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DepartmentId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DepartmentId);
      }
      if (ParentDepartmentResourceFolderId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ParentDepartmentResourceFolderId);
      }
      if (CreatedSeconds != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreatedSeconds);
      }
      if (Size != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DepartmentFolderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentFolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DepartmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentId);
      }
      if (ParentDepartmentResourceFolderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentDepartmentResourceFolderId);
      }
      if (CreatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedSeconds);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepartmentResourceFolder other) {
      if (other == null) {
        return;
      }
      if (other.DepartmentFolderId != 0L) {
        DepartmentFolderId = other.DepartmentFolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DepartmentId != 0L) {
        DepartmentId = other.DepartmentId;
      }
      if (other.ParentDepartmentResourceFolderId != 0L) {
        ParentDepartmentResourceFolderId = other.ParentDepartmentResourceFolderId;
      }
      if (other.CreatedSeconds != 0L) {
        CreatedSeconds = other.CreatedSeconds;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DepartmentFolderId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            DepartmentId = input.ReadInt64();
            break;
          }
          case 32: {
            ParentDepartmentResourceFolderId = input.ReadInt64();
            break;
          }
          case 40: {
            CreatedSeconds = input.ReadInt64();
            break;
          }
          case 48: {
            Size = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepartmentSceneFolder : pb::IMessage<DepartmentSceneFolder> {
    private static readonly pb::MessageParser<DepartmentSceneFolder> _parser = new pb::MessageParser<DepartmentSceneFolder>(() => new DepartmentSceneFolder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepartmentSceneFolder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentSceneFolder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentSceneFolder(DepartmentSceneFolder other) : this() {
      departmentFolderId_ = other.departmentFolderId_;
      name_ = other.name_;
      departmentId_ = other.departmentId_;
      parentDepartmentSceneFolderId_ = other.parentDepartmentSceneFolderId_;
      createdSeconds_ = other.createdSeconds_;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentSceneFolder Clone() {
      return new DepartmentSceneFolder(this);
    }

    /// <summary>Field number for the "departmentFolderId" field.</summary>
    public const int DepartmentFolderIdFieldNumber = 1;
    private long departmentFolderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DepartmentFolderId {
      get { return departmentFolderId_; }
      set {
        departmentFolderId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departmentId" field.</summary>
    public const int DepartmentIdFieldNumber = 3;
    private long departmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DepartmentId {
      get { return departmentId_; }
      set {
        departmentId_ = value;
      }
    }

    /// <summary>Field number for the "parentDepartmentSceneFolderId" field.</summary>
    public const int ParentDepartmentSceneFolderIdFieldNumber = 4;
    private long parentDepartmentSceneFolderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentDepartmentSceneFolderId {
      get { return parentDepartmentSceneFolderId_; }
      set {
        parentDepartmentSceneFolderId_ = value;
      }
    }

    /// <summary>Field number for the "createdSeconds" field.</summary>
    public const int CreatedSecondsFieldNumber = 5;
    private long createdSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedSeconds {
      get { return createdSeconds_; }
      set {
        createdSeconds_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 6;
    private long size_;
    /// <summary>
    /// scenes 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepartmentSceneFolder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepartmentSceneFolder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DepartmentFolderId != other.DepartmentFolderId) return false;
      if (Name != other.Name) return false;
      if (DepartmentId != other.DepartmentId) return false;
      if (ParentDepartmentSceneFolderId != other.ParentDepartmentSceneFolderId) return false;
      if (CreatedSeconds != other.CreatedSeconds) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DepartmentFolderId != 0L) hash ^= DepartmentFolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DepartmentId != 0L) hash ^= DepartmentId.GetHashCode();
      if (ParentDepartmentSceneFolderId != 0L) hash ^= ParentDepartmentSceneFolderId.GetHashCode();
      if (CreatedSeconds != 0L) hash ^= CreatedSeconds.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DepartmentFolderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DepartmentFolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DepartmentId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DepartmentId);
      }
      if (ParentDepartmentSceneFolderId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ParentDepartmentSceneFolderId);
      }
      if (CreatedSeconds != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreatedSeconds);
      }
      if (Size != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DepartmentFolderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentFolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DepartmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepartmentId);
      }
      if (ParentDepartmentSceneFolderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentDepartmentSceneFolderId);
      }
      if (CreatedSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedSeconds);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepartmentSceneFolder other) {
      if (other == null) {
        return;
      }
      if (other.DepartmentFolderId != 0L) {
        DepartmentFolderId = other.DepartmentFolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DepartmentId != 0L) {
        DepartmentId = other.DepartmentId;
      }
      if (other.ParentDepartmentSceneFolderId != 0L) {
        ParentDepartmentSceneFolderId = other.ParentDepartmentSceneFolderId;
      }
      if (other.CreatedSeconds != 0L) {
        CreatedSeconds = other.CreatedSeconds;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DepartmentFolderId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            DepartmentId = input.ReadInt64();
            break;
          }
          case 32: {
            ParentDepartmentSceneFolderId = input.ReadInt64();
            break;
          }
          case 40: {
            CreatedSeconds = input.ReadInt64();
            break;
          }
          case 48: {
            Size = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Feed : pb::IMessage<Feed> {
    private static readonly pb::MessageParser<Feed> _parser = new pb::MessageParser<Feed>(() => new Feed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Feed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saturn.Backends.Protocols.Common.CommonReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feed(Feed other) : this() {
      title_ = other.title_;
      link_ = other.link_;
      description_ = other.description_;
      language_ = other.language_;
      copyright_ = other.copyright_;
      lastBuildDateSeconds_ = other.lastBuildDateSeconds_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feed Clone() {
      return new Feed(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 2;
    private string link_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 4;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "copyright" field.</summary>
    public const int CopyrightFieldNumber = 5;
    private string copyright_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Copyright {
      get { return copyright_; }
      set {
        copyright_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastBuildDateSeconds" field.</summary>
    public const int LastBuildDateSecondsFieldNumber = 6;
    private long lastBuildDateSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBuildDateSeconds {
      get { return lastBuildDateSeconds_; }
      set {
        lastBuildDateSeconds_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Saturn.Backends.Protocols.Common.Feed.Types.FeedItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(58, global::Saturn.Backends.Protocols.Common.Feed.Types.FeedItem.Parser);
    private readonly pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.Feed.Types.FeedItem> items_ = new pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.Feed.Types.FeedItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saturn.Backends.Protocols.Common.Feed.Types.FeedItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Feed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Feed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Link != other.Link) return false;
      if (Description != other.Description) return false;
      if (Language != other.Language) return false;
      if (Copyright != other.Copyright) return false;
      if (LastBuildDateSeconds != other.LastBuildDateSeconds) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (Copyright.Length != 0) hash ^= Copyright.GetHashCode();
      if (LastBuildDateSeconds != 0L) hash ^= LastBuildDateSeconds.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Link);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
      if (Copyright.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Copyright);
      }
      if (LastBuildDateSeconds != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastBuildDateSeconds);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (Copyright.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Copyright);
      }
      if (LastBuildDateSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBuildDateSeconds);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Feed other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.Copyright.Length != 0) {
        Copyright = other.Copyright;
      }
      if (other.LastBuildDateSeconds != 0L) {
        LastBuildDateSeconds = other.LastBuildDateSeconds;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Link = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
          case 42: {
            Copyright = input.ReadString();
            break;
          }
          case 48: {
            LastBuildDateSeconds = input.ReadInt64();
            break;
          }
          case 58: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Feed message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FeedItem : pb::IMessage<FeedItem> {
        private static readonly pb::MessageParser<FeedItem> _parser = new pb::MessageParser<FeedItem>(() => new FeedItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FeedItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saturn.Backends.Protocols.Common.Feed.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeedItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeedItem(FeedItem other) : this() {
          title_ = other.title_;
          description_ = other.description_;
          pubDateSeconds_ = other.pubDateSeconds_;
          lastUpdateSeconds_ = other.lastUpdateSeconds_;
          link_ = other.link_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeedItem Clone() {
          return new FeedItem(this);
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 1;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pubDateSeconds" field.</summary>
        public const int PubDateSecondsFieldNumber = 3;
        private long pubDateSeconds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PubDateSeconds {
          get { return pubDateSeconds_; }
          set {
            pubDateSeconds_ = value;
          }
        }

        /// <summary>Field number for the "lastUpdateSeconds" field.</summary>
        public const int LastUpdateSecondsFieldNumber = 4;
        private long lastUpdateSeconds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastUpdateSeconds {
          get { return lastUpdateSeconds_; }
          set {
            lastUpdateSeconds_ = value;
          }
        }

        /// <summary>Field number for the "link" field.</summary>
        public const int LinkFieldNumber = 5;
        private string link_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Link {
          get { return link_; }
          set {
            link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FeedItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FeedItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Title != other.Title) return false;
          if (Description != other.Description) return false;
          if (PubDateSeconds != other.PubDateSeconds) return false;
          if (LastUpdateSeconds != other.LastUpdateSeconds) return false;
          if (Link != other.Link) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Title.Length != 0) hash ^= Title.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (PubDateSeconds != 0L) hash ^= PubDateSeconds.GetHashCode();
          if (LastUpdateSeconds != 0L) hash ^= LastUpdateSeconds.GetHashCode();
          if (Link.Length != 0) hash ^= Link.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Title.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Title);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          if (PubDateSeconds != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(PubDateSeconds);
          }
          if (LastUpdateSeconds != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(LastUpdateSeconds);
          }
          if (Link.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Link);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (PubDateSeconds != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PubDateSeconds);
          }
          if (LastUpdateSeconds != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastUpdateSeconds);
          }
          if (Link.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FeedItem other) {
          if (other == null) {
            return;
          }
          if (other.Title.Length != 0) {
            Title = other.Title;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.PubDateSeconds != 0L) {
            PubDateSeconds = other.PubDateSeconds;
          }
          if (other.LastUpdateSeconds != 0L) {
            LastUpdateSeconds = other.LastUpdateSeconds;
          }
          if (other.Link.Length != 0) {
            Link = other.Link;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Title = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 24: {
                PubDateSeconds = input.ReadInt64();
                break;
              }
              case 32: {
                LastUpdateSeconds = input.ReadInt64();
                break;
              }
              case 42: {
                Link = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
